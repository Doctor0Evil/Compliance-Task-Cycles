(defmacro enforce-sticky-trigger (filepath)
  `(let* ((approved-dirs '("src/aln" "modules" "lisp/registry" "npc" "narrative" "game" "debugging"))
          (required-headers '("aln_logic_parent" "sticky_horror" "content_rating" "horror_compliance" "last_audit"))
          (dir-ok nil))
     (dolist (dir approved-dirs)
       (when (string-prefix-p dir ,filepath)
         (setq dir-ok t)))
     (unless dir-ok
       (log-error (format nil "BLOCKED: Sticky-Trigger Violation. '~A' is not in an approved directory." ,filepath))
       (return-from enforce-sticky-trigger (format nil "Sticky directory policy violation: ~A" ,filepath)))
     (let* ((filelines (file-read-lines ,filepath :start 1 :end 20))
            (metadata (make-hash-table :test 'equal)))
       (dolist (line filelines)
         (when (cl-ppcre:scan "^[#;:]+[ \t]*([a-zA-Z_-]+):[ \t]*[\"']?([^\"']*)" line)
           (let ((parts (cl-ppcre:all-matches-as-strings "^[#;:]+[ \t]*([a-zA-Z_-]+):[ \t]*[\"']?([^\"']*)" line)))
             (setf (gethash (string-trim " " (second parts)) metadata)
                   (string-trim " " (third parts))))))
       (dolist (header required-headers)
         (unless (and (gethash header metadata) (not (string= (gethash header metadata) "")))
           (log-error (format nil "BLOCKED: '~A' missing required sticky metadata field '~A'." ,filepath header))
           (return-from enforce-sticky-trigger (format nil "Sticky metadata field '~A' missing in ~A" header ,filepath))))
       (unless (and (string= (gethash "sticky_horror" metadata) "true")
                    (string= (gethash "content_rating" metadata) "Adults-Only"))
         (log-error (format nil "BLOCKED: '~A' fails sticky_horror or content_rating mandatory values." ,filepath))
         (return-from enforce-sticky-trigger (format nil "Sticky_horror or content_rating invalid in ~A" ,filepath)))
       (log-info (format nil "PASSED: Sticky compliance for ~A" ,filepath))
       "OK")))
