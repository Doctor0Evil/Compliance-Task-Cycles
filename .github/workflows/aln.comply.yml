name: Bit.Hub Runner Compliance and Workflow Corrector

on:
  push:
    paths:
      - ".github/workflows/**"
      - ".bit/**"
      - ".bithub/**"
  workflow_dispatch:
    inputs:
      repair_mode:
        description: "Apply auto-fixes (true) or just report (false)"
        type: boolean
        default: true
      target_ref:
        description: "Base branch for the PR"
        type: string
        default: "main"
  workflow_call:
    inputs:
      repair_mode:
        required: false
        type: boolean
        default: true
      target_ref:
        required: false
        type: string
        default: "main"

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: bitbot-corrector-${{ github.ref }}
  cancel-in-progress: false

env:
  BIT_HUB_RUNNER_LABELS: "self-hosted,bit.hub,linux"
  GITHUB_DEFAULT_RUNNER: "ubuntu-latest"
  DEFAULT_TIMEOUT_MIN: "30"
  REPORT_DIR: ".bithub/reports"
  POLICY_DIR: ".bithub/policy"
  SCHEMA_DIR: ".bit/schemas"
  CORRECTOR_BRANCH_PREFIX: "bot/workflow-corrections"
  OPA_VERSION: "0.64.1"
  YQ_VERSION: "v4.44.3"

jobs:
  preflight:
    name: Preflight and policy bootstrap
    runs-on: ${{ env.GITHUB_DEFAULT_RUNNER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure directories
        run: |
          mkdir -p "${REPORT_DIR}" "${POLICY_DIR}" "${SCHEMA_DIR}"

      - name: Install yq
        run: |
          BIN="$HOME/.local/bin"; mkdir -p "$BIN"
          curl -fsSL -o "$BIN/yq" "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
          chmod +x "$BIN/yq"
          echo "$BIN" >> $GITHUB_PATH

      - name: Install OPA
        run: |
          BIN="$HOME/.local/bin"; mkdir -p "$BIN"
          curl -fsSL -o "$BIN/opa" "https://openpolicyagent.org/downloads/v${OPA_VERSION}/opa_linux_amd64_static"
          chmod +x "$BIN/opa"
          echo "$BIN" >> $GITHUB_PATH

      - name: Write Bit.Hub compliance policy
        shell: bash
        run: |
          cat > "${POLICY_DIR}/comply.rego" <<'REGO'
          package bithub.workflow

          # Enforce required layout
          deny[msg] {
            some p
            not startswith(p, ".github/workflows/")
            endswith(p, ".yml") or endswith(p, ".yaml")
            msg := sprintf("Workflow outside .github/workflows: %s", [p])
          }

          # Minimal permissions must be declared at workflow root
          deny[msg] {
            wf := input.workflow
            not wf.permissions
            msg := "Workflow missing top-level permissions block"
          }

          # Concurrency should be set to reduce duplicate runs
          warn[msg] {
            wf := input.workflow
            not wf.concurrency
            msg := "Workflow missing top-level concurrency"
          }

          # Require modern checkout
          deny[msg] {
            some j, s
            input.uses[j][s] == "actions/checkout@v1"
            msg := "actions/checkout@v1 is forbidden; use @v4"
          }
          deny[msg] {
            some j, s
            input.uses[j][s] == "actions/checkout@v2"
            msg := "actions/checkout@v2 is forbidden; use @v4"
          }
          warn[msg] {
            some j, s
            input.uses[j][s] == "actions/checkout@v3"
            msg := "Consider upgrading actions/checkout@v3 to @v4"
          }

          # runners: prefer Bit.Hub labels, allow fallback
          warn[msg] {
            some j
            not input.jobs[j].runs_on_adaptive
            msg := sprintf("Job '%s' does not use adaptive runs-on", [j])
          }

          # Reasonable job timeouts
          deny[msg] {
            some j
            not input.jobs[j].timeout_minutes
            msg := sprintf("Job '%s' missing timeout-minutes", [j])
          }
          REGO

      - name: Write adaptive schema for runs-on
        run: |
          cat > "${SCHEMA_DIR}/adaptive-runs-on.json" <<'JSON'
          {
            "type": "object",
            "properties": {
              "runs-on": {
                "anyOf": [
                  { "type": "string" },
                  { "type": "array", "items": { "type": "string" } }
                ]
              }
            }
          }
          JSON

      - name: Inventory workflows
        id: inv
        shell: bash
        run: |
          mapfile -t WF < <(find .github/workflows -maxdepth 1 -type f \( -name "*.yml" -o -name "*.yaml" \) | sort || true)
          printf '%s\n' "${WF[@]}" | tee "${REPORT_DIR}/workflows.list"
          echo "count=${#WF[@]}" >> $GITHUB_OUTPUT

  analyze_and_fix:
    name: Analyze and correct workflows
    needs: preflight
    runs-on: ${{ env.GITHUB_DEFAULT_RUNNER }}
    outputs:
      changes: ${{ steps.diff.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yq and OPA
        run: |
          BIN="$HOME/.local/bin"; mkdir -p "$BIN"
          curl -fsSL -o "$BIN/yq" "https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_amd64"
          curl -fsSL -o "$BIN/opa" "https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static"
          chmod +x "$BIN/yq" "$BIN/opa"
          echo "$BIN" >> $GITHUB_PATH

      - name: Normalize workflow filenames
        shell: bash
        run: |
          shopt -s nullglob
          for f in .github/workflows/*; do
            b="$(basename "$f")"
            nf="$(echo "$b" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' )"
            nf="${nf//[^a-z0-9._-]/-}"
            if [[ "$b" != "$nf" ]]; then
              git mv "$f" ".github/workflows/$nf"
              echo "Renamed $b -> $nf"
            fi
          done

      - name: Inject required blocks and adaptive runners
        shell: bash
        run: |
          YQ=yq
          for y in .github/workflows/*.y*ml; do
            # Ensure name
            $YQ -i 'if has("name") then . else .name = "Auto-Normalized Workflow" end' "$y"

            # Permissions minimal default
            $YQ -i '
              .permissions = ( .permissions // {"contents":"read"} ) |
              .permissions |= with_entries(.value |= ( . // "read"))
            ' "$y"

            # Concurrency group if missing
            $YQ -i '
              if has("concurrency") then .
              else .concurrency = {"group": "wf-${{ github.ref }}-${{ github.run_id }}", "cancel-in-progress": false}
              end
            ' "$y"

            # Jobs: ensure timeout and adaptive runs-on
            # Use vars.BITHUB_RUNNER_LABELS if available; else fallback
            $YQ -i '
              .jobs |= with_entries(
                .value.timeout-minutes = (.value."timeout-minutes" // env(DEFAULT_TIMEOUT_MIN) | tonumber)
              )
            ' "$y"

            $YQ -i '
              .jobs |= with_entries(
                .value.runs-on = (
                  if (.value | has("runs-on")) then
                    .value."runs-on"
                  else
                    (env(BIT_HUB_RUNNER_LABELS) | split(","))
                  end
                )
              )
            ' "$y"

            # Mark that job uses adaptive runs-on (for policy input convenience)
            $YQ -i '
              .jobs |= with_entries(
                .value.runs_on_adaptive = true
              )
            ' "$y"

            # Upgrade checkout to v4
            $YQ -i '
              .. | select(tag == "!!str") |= sub("actions/checkout@v[12]"; "actions/checkout@v4")
            ' "$y"

            # Replace deprecated set-output uses
            sed -i 's|::set-output name=\([^:]*\)::|echo "\1=" >> $GITHUB_OUTPUT # migrated |g' "$y"
          done

      - name: Seed Bit.Hub OPA policy if missing
        run: |
          test -f "${POLICY_DIR}/comply.rego" || {
            mkdir -p "${POLICY_DIR}"
            cat > "${POLICY_DIR}/comply.rego" <<'REGO'
            package bithub.workflow
            deny[msg] { msg := "Policy bootstrapped; please re-run." }
            REGO
          }

      - name: Policy evaluation
        shell: bash
        run: |
          set -e
          REPORT="${REPORT_DIR}/policy-report.ndjson"
          : > "$REPORT"

          for y in .github/workflows/*.y*ml; do
            # Flatten workflow for policy: collect uses, jobs meta
            uses=$(
              yq '.. | select(tag == "!!str") | select(test("^[^ ]+@v[0-9]+$"))' "$y" \
              | sed 's/^ *- *//g' | tr '\n' ' ' || true
            )
            jq -n --argfile wf <(yq -o=json '.' "$y") \
                  --arg uses "$uses" \
                  --argfile jobs <(yq -o=json '.jobs' "$y") '
              {
                path: "'"$y"'",
                workflow: $wf,
                uses: ($uses | split(" ") | map(select(length>0))),
                jobs: $jobs
              }' > /tmp/input.json

            opa eval -f pretty -I -d "${POLICY_DIR}" -i /tmp/input.json 'data.bithub.workflow' || true
            opa eval -f json   -I -d "${POLICY_DIR}" -i /tmp/input.json 'data.bithub.workflow' \
              | jq -c '.result[].expressions[].value
                 | {path:"'"$y"'", deny:(.deny // []), warn:(.warn // [])}' >> "$REPORT"
          done

          echo "Policy report written to ${REPORT}"

      - name: Summarize findings
        id: summary
        shell: bash
        run: |
          WARN=$(jq '[.warn[]] | length' "${REPORT_DIR}/policy-report.ndjson" 2>/dev/null || echo 0)
          DENY=$(jq '[.deny[]] | length' "${REPORT_DIR}/policy-report.ndjson" 2>/dev/null || echo 0)
          echo "warn=${WARN}" >> $GITHUB_OUTPUT
          echo "deny=${DENY}" >> $GITHUB_OUTPUT
          echo "Warnings: $WARN, Denials: $DENY"

      - name: Git status
        id: diff
        shell: bash
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

  propose_changes:
    name: Open PR with fixes and audit
    needs: analyze_and_fix
    if: needs.analyze_and_fix.outputs.changes == 'true' && (github.event_name == 'workflow_dispatch' || github.event_name == 'push')
    runs-on: ${{ env.GITHUB_DEFAULT_RUNNER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore staged changes
        run: |
          echo "Restoring index from previous job is not possible; re-stage everything."
          git add -A

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ env.CORRECTOR_BRANCH_PREFIX }}/${{ github.run_id }}
          base: ${{ inputs.target_ref || 'main' }}
          title: "Bit.Hub Compliance: Auto-corrections for workflows"
          commit-message: "chore(bit.hub): auto-correct workflows, inject permissions/concurrency, upgrade checkout, adaptive runs-on"
          body: |
            This PR applies automated corrections to align workflows with Bit.Hub runner and policy practices.

            - Injected minimal permissions and concurrency
            - Enforced timeout-minutes and adaptive runs-on
            - Normalized filenames and upgraded actions/checkout to v4
            - OPA policy report written to ${REPORT_DIR}/policy-report.ndjson

            Review the report and merge to enforce compliance platform-wide.
          labels: |
            compliance
            bit.hub
            automation
          delete-branch: true

  gate_on_policy:
    name: Gate on policy denials
    needs: [analyze_and_fix, propose_changes]
    runs-on: ${{ env.GITHUB_DEFAULT_RUNNER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fail if denials remain
        shell: bash
        run: |
          DENY=$(jq '[.deny[]] | length' "${REPORT_DIR}/policy-report.ndjson" 2>/dev/null || echo 0)
          if [ "$DENY" -gt 0 ]; then
            echo "Policy denials remain: $DENY"
            exit 1
          fi
          echo "No policy denials."

  celebrate_and_log:
    name: Emit Bit.Hub events
    needs: gate_on_policy
    if: always()
    runs-on: ${{ env.GITHUB_DEFAULT_RUNNER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Emit event for world memory
        shell: bash
        run: |
          mkdir -p .bithub/events
          cat > ".bithub/events/${{ github.run_id }}.json" <<JSON
          {
            "event": "workflow_correction",
            "by": "${{ github.actor }}",
            "repo": "${{ github.repository }}",
            "run_id": "${{ github.run_id }}",
            "status": "${{ job.status }}",
            "timestamp": "${{ github.run_started_at }}"
          }
          JSON
          git add .bithub/events || true
          git -c user.name="bitbot" -c user.email="bitbot@users.noreply.github.com" commit -m "chore(events): log correction event ${{ github.run_id }}" || true
          echo "::notice title=Bit.Hub::Compliance event logged"
