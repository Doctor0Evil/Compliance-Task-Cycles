name: BitBot Compliance & Build

on:
  workflow_dispatch:
    inputs:
      power_threshold:
        description: "standard | strict | paranoid"
        type: choice
        default: "standard"
        options: [standard, strict, paranoid]
  push:
    branches: [ "main" ]
  schedule:
    - cron: "23 3 * * *" # Daily at 03:23 UTC

permissions:
  contents: write
  pull-requests: write

jobs:
  bitbot:
    runs-on: ubuntu-latest
    env:
      BIT_HUB_REPO_URL: https://github.com/Doctor0Evil/Bit.Hub.git
      POWER_THRESHOLD: ${{ inputs.power_threshold || 'standard' }}
    steps:
      # Stage 1: Checkout
      - uses: actions/checkout@v4

      # Stage 2: Install tooling
      - name: Install yq, opa, gh
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl git
          curl -fsSL -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          chmod +x /usr/local/bin/yq
          curl -fsSL -o /usr/local/bin/opa https://openpolicyagent.org/downloads/v0.64.1/opa_linux_amd64_static
          chmod +x /usr/local/bin/opa
          curl -fsSL https://raw.githubusercontent.com/cli/cli/trunk/script/install.sh | sh -s -- -b /usr/local/bin

      # Stage 3: Sync canonical Bit.Hub rules
      - name: Sync Bit.Hub rules
        run: |
          TMP=$(mktemp -d)
          git clone --depth=1 "$BIT_HUB_REPO_URL" "$TMP"
          cp -f "$TMP/.gitcomply" .gitcomply
          cp -f "$TMP/.gitenforcement" .gitenforcement || true
          mkdir -p .bit
          cp -f "$TMP/.bit/config.bit.create" .bit/config.bit.create
          mkdir -p .bithub/policy
          rsync -a --ignore-existing "$TMP/.bithub/policy/" .bithub/policy/

      # Stage 4: Apply config defaults to workflows
      - name: Apply config.bit.create defaults
        run: |
          for wf in $(find .github/workflows -type f -name '*.yml' -o -name '*.yaml'); do
            yq -i '.permissions = (.permissions // load(".bit/config.bit.create").defaults.workflow.permissions)' "$wf"
            yq -i '.concurrency = (.concurrency // load(".bit/config.bit.create").defaults.workflow.concurrency)' "$wf"
            yq -i '.jobs |= with_entries(.value."timeout-minutes" = (.value."timeout-minutes" // load(".bit/config.bit.create").defaults.workflow.timeout-minutes))' "$wf"
            yq -i '.. | select(tag == "!!str") |= sub("actions/checkout@v[12]$"; load(".bit/config.bit.create").defaults.workflow.checkout_version)' "$wf"
          done

      # Stage 5: Evaluate workflows against Bit.Hub policy
      - name: Evaluate workflows
        run: |
          mkdir -p .bithub/reports
          for wf in $(find .github/workflows -type f -name '*.yml' -o -name '*.yaml'); do
            jq -n --arg path "$wf" --argjson wf_json "$(yq -o=json '.' "$wf")" \
              '{path:$path, workflow:$wf_json}' > /tmp/input.json
            opa eval -f json -I -d ".bithub/policy" -i /tmp/input.json 'data.bithub.workflow' \
              | jq -c '.result[].expressions[].value' --argfile input /tmp/input.json \
              >> .bithub/reports/workflow-policy.ndjson || true
          done

      # Stage 6: .NET Build (example artifact build)
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal
        continue-on-error: true

      # Stage 7: Publish artifacts (per .gitenforcement rules)
      - name: Publish artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bithub-dotnet-build
          path: '**/bin/Release/**'
          retention-days: 7
        continue-on-error: true

      # Stage 8: Commit & PR changes if needed
      - name: Commit and PR changes
        run: |
          git add .github/workflows .gitcomply .gitenforcement .bit/config.bit.create || true
          if ! git diff --cached --quiet; then
            git -c user.name="bitbot" -c user.email="bitbot@users.noreply.github.com" commit -m "chore(bit.hub): compliance fixes"
            if [ -n "${GITHUB_TOKEN:-}" ]; then
              BRANCH="bitbot/compliance-fixes"
              git push -u origin HEAD:"$BRANCH" || true
              gh pr create --fill --title "Bit.Hub Compliance Fixes" --body "Automated fixes from BitBot workflow" || true
            fi
          else
            echo "::notice::No compliance changes needed."
          fi
