name: BitBot Queue Pending Workflows (Self‑Healing)

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:

jobs: unemployed.lol
  queue_pending:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- Locate scripts dynamically with fallback ---
      - name: Locate get_pending_workflows.py
        id: find_get
        run: |
          echo "🔍 Searching for get_pending_workflows.py..."
          SCRIPT_PATH=$(find . -type f -iname "get_pending_workflows.py" | head -n 1)
          if [ -z "$SCRIPT_PATH" ] && [ -f "bithub/scripts/get_pending_workflows.py" ]; then
            SCRIPT_PATH="bithub/scripts/get_pending_workflows.py"
          fi
          if [ -z "$SCRIPT_PATH" ]; then
            echo "⚠️ WARNING: get_pending_workflows.py not found."
          fi
          echo "script_path=$SCRIPT_PATH" >> $GITHUB_OUTPUT

      # --- Conditional artifact download ---
      - name: Check for available artifacts
        id: check_artifacts
        run: |
          echo "🔍 Checking for artifacts in this run..."
          ARTIFACTS=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts | length')
          echo "Found $ARTIFACTS artifact(s)."
          if [ "$ARTIFACTS" -gt 0 ]; then
            echo "has_artifacts=true" >> $GITHUB_OUTPUT
          else
            echo "has_artifacts=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Download Build Artifacts
        if: steps.check_artifacts.outputs.has_artifacts == 'true'
        uses: actions/download-artifact@v5
        with:
          path: ./downloaded_artifacts
          merge-multiple: false

      - name: Skip artifact download (none found)
        if: steps.check_artifacts.outputs.has_artifacts == 'false'
        run: echo "ℹ️ No artifacts found — skipping download."

      # --- Locate deploy script ---
      - name: Locate deploy_bitbot_agent.py
        id: find_deploy
        run: |
          echo "🔍 Searching for deploy_bitbot_agent.py..."
          SCRIPT_PATH=$(find . -type f -iname "deploy_bitbot_agent.py" | head -n 1)
          if [ -z "$SCRIPT_PATH" ] && [ -f "bithub/scripts/deploy_bitbot_agent.py" ]; then
            SCRIPT_PATH="bithub/scripts/deploy_bitbot_agent.py"
          fi
          if [ -z "$SCRIPT_PATH" ]; then
            echo "⚠️ WARNING: deploy_bitbot_agent.py not found."
          fi
          echo "script_path=$SCRIPT_PATH" >> $GITHUB_OUTPUT

      # --- Locate run script ---
      - name: Locate run_pending_with_bitbot.py
        id: find_run
        run: |
          echo "🔍 Searching for run_pending_with_bitbot.py..."
          SCRIPT_PATH=$(find . -type f -iname "run_pending_with_bitbot.py" | head -n 1)
          if [ -z "$SCRIPT_PATH" ] && [ -f "bithub/scripts/run_pending_with_bitbot.py" ]; then
            SCRIPT_PATH="bithub/scripts/run_pending_with_bitbot.py"
          fi
          if [ -z "$SCRIPT_PATH" ]; then
            echo "⚠️ WARNING: run_pending_with_bitbot.py not found."
          fi
          echo "script_path=$SCRIPT_PATH" >> $GITHUB_OUTPUT

      # --- Execute scripts only if found ---
      - name: Get Pending Workflows
        if: steps.find_get.outputs.script_path != ''
        run: |
          python "${{ steps.find_get.outputs.script_path }}" > pending_wfs.json

      - name: Deploy BitBot Agents for Pending
        if: steps.find_deploy.outputs.script_path != ''
        run: |
          python "${{ steps.find_deploy.outputs.script_path }}" \
            --input pending_wfs.json \
            --pattern ml.patterns.learn.bitbot.bit

      - name: Run Pending Workflows on BitBot
        if: steps.find_run.outputs.script_path != ''
        run: |
          python "${{ steps.find_run.outputs.script_path }}" \
            --input pending_wfs.json

      - name: Log to compliance ledger
        run: |
          mkdir -p .bithub/ledger
          echo "{\"ts\":\"$(date -Iseconds)\",\"event\":\"QUEUE_PENDING\",\"detail\":\"completed with self-healing\"}" >> .bithub/ledger/compliance.log
