name: ALN Release Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.3.0)"
        required: true
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write

env:
  PKG_DIR: aln.release.v1
  AUDIT_DIR: aln.release.v1/provenance
  SIG_DIR: aln.release.v1/signatures

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq python3-pip
          pip3 install spdx-tools

      - name: Build binaries
        run: |
          mkdir -p ${PKG_DIR}/binaries/linux-x86_64 \
                   ${PKG_DIR}/binaries/linux-arm64 \
                   ${PKG_DIR}/binaries/windows-x86_64 \
                   ${PKG_DIR}/binaries/darwin-arm64
          # TODO: build/copy your binaries into the above paths

      - name: Stage assets
        run: |
          mkdir -p ${PKG_DIR}/assets/configs ${PKG_DIR}/assets/templates ${PKG_DIR}/assets/docs
          # TODO: copy configs/templates/docs into assets/

      - name: Generate indexes
        run: |
          mkdir -p ${PKG_DIR}/storage.manifests ${AUDIT_DIR} ${SIG_DIR}
          # binaries.index.json
          python3 - <<'PY' > ${PKG_DIR}/storage.manifests/binaries.index.json
          import os, json, hashlib, glob
          base="aln.release.v1/binaries"
          def sha(p):
              h=hashlib.sha256()
              with open(p,'rb') as f:
                  for b in iter(lambda:f.read(1<<20), b''): h.update(b)
              return h.hexdigest()
          entries=[]
          for plat in os.listdir(base):
              for fn in os.listdir(f"{base}/{plat}"):
                  p=f"{base}/{plat}/{fn}"
                  entries.append({"platform":plat,"path":p,"sha256":sha(p),"bytes":os.path.getsize(p),"exec":True})
          print(json.dumps({"schema":"aln.binaries.index.v1","entries":entries}, indent=2))
          PY
          # assets.index.json
          python3 - <<'PY' > ${PKG_DIR}/storage.manifests/assets.index.json
          import os, json, hashlib, mimetypes
          base="aln.release.v1/assets"
          def sha(p):
              import hashlib
              h=hashlib.sha256()
              with open(p,'rb') as f:
                  for b in iter(lambda:f.read(1<<20), b''): h.update(b)
              return h.hexdigest()
          entries=[]
          for root,_,files in os.walk(base):
              for fn in files:
                  p=os.path.join(root,fn)
                  mt=mimetypes.guess_type(p)[0] or "application/octet-stream"
                  entries.append({"role":"auto","path":p,"sha256":sha(p),"bytes":os.path.getsize(p),"media_type":mt})
          print(json.dumps({"schema":"aln.assets.index.v1","entries":entries}, indent=2))
          PY

      - name: OPA decisions snapshot
        run: |
          # Optional: if .bit/policy exists, evaluate and snapshot decisions
          if [ -d ".bit/policy" ]; then
            curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
            chmod +x opa
            jq -n '{allow:true, denies:[], evaluated_at: (now|todate), schema:"bithub.opa.decisions.v1"}' \
              > ${PKG_DIR}/storage.manifests/policy.decisions.json
          else
            jq -n '{allow:true, denies:[], evaluated_at: (now|todate), schema:"bithub.opa.decisions.v1"}' \
              > ${PKG_DIR}/storage.manifests/policy.decisions.json
          fi

      - name: SBOM and provenance
        run: |
          VERSION="${{ inputs.version || github.ref_name }}"
          jq -n --arg v "$VERSION" --arg now "$(date -u +%FT%TZ)" \
            '{SPDXID:"SPDXRef-DOCUMENT", spdxVersion:"SPDX-2.3", name:"ALNFantasia Core SBOM", creationInfo:{created:$now}, packages:[{name:"yourtool", versionInfo:$v, filesAnalyzed:false}]}' \
            > ${PKG_DIR}/provenance/sbom.spdx.json
          jq -n --arg v "$VERSION" --arg sha "$GITHUB_SHA" \
            '{schema:"slsa.provenance.v0", buildType:"github-actions", builder:{id: env.GITHUB_WORKFLOW_REF}, invocation:{parameters:{version:$v}}, materials:[{uri: env.GITHUB_REPOSITORY, digest:{sha256:$sha}}]}' \
            > ${PKG_DIR}/provenance/slsa.provenance.json
          jq -n --arg rid "$GITHUB_RUN_ID" --arg ref "$GITHUB_REF" --arg sha "$GITHUB_SHA" --arg now "$(date -u +%FT%TZ)" \
            '{source:"github", run_id:$rid, ref:$ref, sha:$sha, timestamp:$now}' \
            > ${PKG_DIR}/provenance/sticky.trigger.audit.json

      - name: Release manifest
        run: |
          VERSION="${{ inputs.version || github.ref_name }}"
          # Compute hashes for key files
          BIN_IDX_SHA=$(sha256sum ${PKG_DIR}/storage.manifests/binaries.index.json | cut -d' ' -f1)
          ASSET_IDX_SHA=$(sha256sum ${PKG_DIR}/storage.manifests/assets.index.json | cut -d' ' -f1)
          POL_SHA=$(sha256sum ${PKG_DIR}/storage.manifests/policy.decisions.json | cut -d' ' -f1)
          SBOM_SHA=$(sha256sum ${PKG_DIR}/provenance/sbom.spdx.json | cut -d' ' -f1)
          PROV_SHA=$(sha256sum ${PKG_DIR}/provenance/slsa.provenance.json | cut -d' ' -f1)
          STICKY_SHA=$(sha256sum ${PKG_DIR}/provenance/sticky.trigger.audit.json | cut -d' ' -f1)
          jq -n \
            --arg v "$VERSION" \
            --arg binsha "$BIN_IDX_SHA" \
            --arg ass "$ASSET_IDX_SHA" \
            --arg pol "$POL_SHA" \
            --arg sb "$SBOM_SHA" \
            --arg pv "$PROV_SHA" \
            --arg st "$STICKY_SHA" \
            --arg repo "$GITHUB_REPOSITORY" \
            --arg ref "$GITHUB_REF" \
            --arg sha "$GITHUB_SHA" \
            --arg rid "$GITHUB_RUN_ID" \
            '{
              schema:"aln.release.v1",
              name:"ALNFantasia Core",
              version:$v,
              created:(now|todate),
              source:{repo:$repo, ref:$ref, commit:$sha, run_id:$rid},
              content:{
                binaries_index:{path:"storage.manifests/binaries.index.json", sha256:$binsha, bytes:(input_filename|tonumber)?},
                assets_index:{path:"storage.manifests/assets.index.json", sha256:$ass},
                policy_decisions:{path:"storage.manifests/policy.decisions.json", sha256:$pol},
                sbom:{path:"provenance/sbom.spdx.json", sha256:$sb},
                provenance:{path:"provenance/slsa.provenance.json", sha256:$pv},
                sticky_trigger:{path:"provenance/sticky.trigger.audit.json", sha256:$st}
              },
              compat:{bithub_protocol:">=1.2.0", aln_engine:">=0.9.5"}
            }' > ${PKG_DIR}/release.manifest.json

      - name: Checksums and signing stubs
        run: |
          (cd ${PKG_DIR} && find . -type f -print0 | xargs -0 -I{} sha256sum "{}") > ${PKG_DIR}/signatures/checksums.txt
          # Optional: sign with your chosen tool; store signature files in signatures/

      - name: Package tarball
        run: |
          tar -C ${PKG_DIR} -czf aln.release.v1.tgz .

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: aln.release.v1
          path: |
            aln.release.v1.tgz
            aln.release.v1/

      - name: Create GitHub Release (optional)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            aln.release.v1.tgz
          generate_release_notes: true
