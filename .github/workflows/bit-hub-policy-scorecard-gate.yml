name: Bit.Hub Policy + Scorecard Gate

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - ".github/workflows/**"
      - "**/*.js"
      - "**/*.ts"
      - "**/*.py"
      - "**/*.go"
  workflow_dispatch:
    inputs:
      power_threshold:
        description: "standard | strict | paranoid"
        type: choice
        default: "strict"
        options: [ "standard", "strict", "paranoid" ]

permissions:
  contents: read
  security-events: write

concurrency:
  group: policy-scorecard-${{ github.ref }}
  cancel-in-progress: true

env:
  BIT_HUB_REPO_URL: "https://github.com/Doctor0Evil/Bit.Hub.git"
  REPORT_DIR: ".bithub/reports"
  POLICY_DIR: ".bithub/policy"
  OPA_VERSION: "0.64.1"
  POWER_THRESHOLD: ${{ inputs.power_threshold || vars.POWER_THRESHOLD || 'strict' }}

jobs:
  policy_and_scorecard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Attempt canonical sync (non-blocking)
        run: |
          set +e
          if git ls-remote "$BIT_HUB_REPO_URL" &>/dev/null; then
            git clone --depth=1 "$BIT_HUB_REPO_URL" /tmp/bithub
            rsync -av --ignore-existing /tmp/bithub/.bithub/policy/ .bithub/policy/ || true
          else
            echo "::warning::Canonical repo unreachable â€” using local policy"
          fi
          set -e

      - name: Install OPA
        run: |
          BIN="$HOME/.local/bin"; mkdir -p "$BIN"
          curl -fsSL -o "$BIN/opa" "https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static"
          chmod +x "$BIN/opa"; echo "$BIN" >> $GITHUB_PATH

      - name: Evaluate workflow policies
        shell: bash
        run: |
          mkdir -p "${REPORT_DIR}"
          REPORT="${REPORT_DIR}/policy.ndjson"; : > "$REPORT"
          shopt -s nullglob
          for y in .github/workflows/*.y*ml; do
            uses=$(yq '.. | select(tag == "!!str") | select(test("^[^ ]+@[^ ]+$"))' "$y" | tr '\n' ' ' || true)
            jq -n --arg path "$y" --arg uses "$uses" --argjson wf "$(yq -o=json '.' "$y")" '{path:$path, uses:($uses|split(" ")|map(select(length>0))), workflow:$wf}' > /tmp/input.json
            opa eval -f json -I -d "${POLICY_DIR}" -i /tmp/input.json 'data.bithub.workflow' \
              | jq -c '.result[].expressions[].value | {path: input.path, deny:(.deny // []), warn:(.warn // [])}' --argfile input /tmp/input.json \
              >> "$REPORT" || true
          done
          echo "Wrote $REPORT"
          DENY=$(jq '[.deny[]] | length' "$REPORT" 2>/dev/null || echo 0)
          WARN=$(jq '[.warn[]] | length' "$REPORT" 2>/dev/null || echo 0)
          echo "DENY=$DENY WARN=$WARN"

      - name: OSSF Scorecard (best-effort)
        uses: ossf/scorecard-action@v2
        with:
          results_file: .bithub/reports/scorecard.json
          results_format: json
        continue-on-error: ${{ env.POWER_THRESHOLD == 'standard' }}

      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: policy-scorecard
          path: .bithub/reports
          if-no-files-found: warn

      - name: Enforce by threshold
        if: ${{ env.POWER_THRESHOLD != 'standard' }}
        shell: bash
        run: |
          DENY=$(jq '[.deny[]] | length' ".bithub/reports/policy.ndjson" 2>/dev/null || echo 0)
          WARN=$(jq '[.warn[]] | length' ".bithub/reports/policy.ndjson" 2>/dev/null || echo 0)
          if [ "$DENY" -gt 0 ]; then
            echo "Policy denials: $DENY"
            exit 1
          fi
          if [ "${POWER_THRESHOLD}" = "paranoid" ] && [ "$WARN" -gt 0 ]; then
            echo "Warnings blocked in paranoid mode: $WARN"
            exit 1
          fi
          echo "Policy gate passed for threshold ${POWER_THRESHOLD}"
