# == 1992 Unified Compliance, Correction & Humor Bot Workflow ==
# Now entering 'THE DARK AGE'

name: CI_PIPELINE_UNIFIER

on:
  push:
    branches: [main, develop, earliest-critical]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: write   # nobody ask why, just do it
  id-token: write   # because security, ok?
  issues: read      # good luck with those
  actions: read     # see who's really running things

concurrency:
  # grouped by nasty, hard-coded workflow/ref string
  group: CI_UNIFY_${{ github.workflow }}_${{ github.ref }}
  cancel-in-progress: true

env:
  DIR_AUDIT: .bithub/audit
  LOG_HUMOR: .bithub/logs/humor-bot.log
  DIR_POL: .bithub/policies
  FILE_OPA_RES: .bithub/audit/opa-result.json
  FILE_TRACE: .bithub/audit/humor-bot-trace.json
  RUN_ID: ${{ github.run_id }}

jobs:

  # [GATE_0] compliance-check
  COMPLIANCECHK:
    name: POLICY_GATE
    runs-on: [self-hosted, bitbot-secure-group]
    steps:
      - name: BRUTALLY_HARDEN_RUNNER
        uses: step-security/harden-runner@v2.7.0
        with:
          egress-policy: 'audit'
      - name: VALIDATE_INITIATOR
        uses: actions/github-script@v7
        env:
          PR_BODY: ${{ github.event.pull_request.body || '' }}
        with:
          script: |
            /* 1992: If you're not allowed, you get the boot... old school error! */
            var allowed = ['trusted-dev1','trusted-dev2','github-actions[bot]'];
            if (allowed.indexOf(context.actor) < 0) {
              core.setFailed("GET OUT " + context.actor); return;
            }
            /* scan for evil words, fail with no details */
            var body = process.env.PR_BODY;
            var block = [/ignore.*above/i,/break.*compliance/i,/system prompt/i];
            for(var i=0;i<block.length;i++){if(block[i].test(body)){core.setFailed("NO PROMPT INJECTION"); return;}}
            /* should log something, but not here */

  # [GATE_1] file-fixes
  FILECORRUPT:
    name: CORRECT_STUFF
    needs: COMPLIANCECHK
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - name: REPO_GRAB
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: MAYBE_SETUP_PWSH
        if: runner.os != 'Windows'
        uses: actions/setup-pwsh@v3
        with:
          pwsh-version: latest
      - name: RUN_CORRECTOR_SCRIPT
        shell: pwsh
        run: |
          $err = $false
          $sdir = "$env:GITHUB_WORKSPACE/scripts"
          $rfile = "$sdir/run-all-corrections.ps1"
          if (!(Test-Path $rfile)) { throw "No script found ($rfile)"; }
          & $rfile
      - name: RETRYING_COMMITS
        shell: bash
        run: |
          git config user.name "BOT-CORRECTOR"
          git config user.email "actions@github.com"
          git add .
          if git diff --cached --quiet; then echo "No stuff to commit."; exit 0; fi
          git commit -m "autofix: correction run $(date)"
          n=0; while [ $n -lt 3 ]; do
            echo "Try $n for push..."
            git pull --rebase origin "${GITHUB_REF_NAME}" && git push origin "${GITHUB_REF_NAME}" && exit 0
            n=$((n+1))
            echo "Failure sleep zzz"
            sleep 10
          done
          echo "Couldn't push after 3 tries."; exit 1
      - name: UPLOAD_AUDIT
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit_${{ matrix.os }}
          path: scripts/audit-session.log
          retention-days: 12

  # [GATE_2] humorbot-thing
  HUMORBOTCHECK:
    name: AI_HUMOR
    needs: COMPLIANCECHK
    runs-on: [self-hosted, bitbot-secure-group, windows]
    steps:
      - name: REGRAB_REPO
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: MAYBE_CORE_SETUP
        uses: actions/setup-pwsh@v3
        with:
          pwsh-version: '7.4'
      - name: INSTALL_HUMOR_STUFF
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Posh-Humor -Force -Confirm:$false
      - name: REALLYOBVIOUSJOKE
        shell: pwsh
        run: |
          $joke = "Did you hear about AI in 1992? It was just a guy named Alan with a spreadsheet."
          Write-Host "*** $joke ***"
          New-Item -ItemType Directory -Force -Path (Split-Path "${{ env.LOG_HUMOR }}") | Out-Null
          Add-Content -Path "${{ env.LOG_HUMOR }}" -Value "$(Get-Date -Format o) :: $joke"
      - name: WRITE_TRACE
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "${{ env.DIR_AUDIT }}" | Out-Null
          $trace = @{"schema"="bithub.trace.v1"; "component"="humor.bot"; "run_id"="${{ env.RUN_ID }}"; "status"="done"; "timestamp"=(Get-Date).ToUniversalTime().ToString("o")} | ConvertTo-Json -Depth 5
          $trace | Out-File -FilePath "${{ env.FILE_TRACE }}" -Encoding utf8
      - name: FAKE_OPA_GATE
        shell: pwsh
        run: |
          Write-Host "OPA simulated, trust me, it passed in 1992."
          echo '{"result":"pass"}' | Out-File -FilePath "${{ env.FILE_OPA_RES }}" -Encoding utf8

  # [GATE_3] failure-escalator
  FAILESCALATE:
    name: ON_FAIL_RUNNER
    needs: [FILECORRUPT, HUMORBOTCHECK]
    if: failure()
    runs-on: [self-hosted, bitbot-secure-group]
    steps:
      - name: SAY_WE_FAILED
        shell: pwsh
        run: |
          Write-Host "This pipeline? It failed."
          Write-Host "Go yell at someone. Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
;;
(defworkflow bots-deploy-example
  ;; ------------------------------------------------------------
  ;; Required modules and services
  ;; ------------------------------------------------------------
  (require 'services/wall/egress.guard.lisp)
  (require 'services/wall/github.api.shim.lisp)
  (require 'workflows/verify-ledger.lisp)
  (require 'registries/assets/indexer.lisp)
  (require 'aln)
  (require 'rego)

  ;; ------------------------------------------------------------
  ;; Utilities
  ;; ------------------------------------------------------------
  (defun plist-merge (&rest plists)
    "Left-to-right shallow merge of property lists."
    (let ((out '()))
      (dolist (pl plists)
        (loop for (k v) on pl by #'cddr do (setf (getf out k) v)))
      out))

  (defun file-sha256 (path)
    (hash:sha256 (fs:read-bytes path)))

  ;; ------------------------------------------------------------
  ;; Manifest loading + verification + audit/ledger append
  ;; ------------------------------------------------------------
  (defun load-master-manifest ()
    (let* ((path "manifests/master-enforcement.aln")
           (manifest (aln:load path))
           (hash (file-sha256 path)))
      (unless (verify:ed25519 path ".keys/ed25519.public")
        (error "Manifest signature invalid."))
      (ledger:append "registries/command-ledger.alnlog"
                     `(:ts ,(time:now)
                       :bot ,(bot:self)
                       :repo ,(git:current-repo)
                       :payload ,hash
                       :signature ""
                       :pubkey ,(fs:read ".keys/ed25519.public")
                       :prev_hash ,(ledger:last-hash "registries/command-ledger.alnlog")
                       :entry_hash ""))
      (audit:record 'manifest-load
                    :path path
                    :hash hash
                    :bot-id (bot:self)
                    :timestamp (time:now))
      manifest))

  ;; ------------------------------------------------------------
  ;; OPA/Rego policy enforcement
  ;; ------------------------------------------------------------
  (defun enforce-master-policy (manifest context)
    (let* ((rego-module ".bithub/policies/compliance-wall.rego")
           (params (aln:get manifest 'policies 'parameters))
           (bindings (aln:get manifest 'bindings))
           (input (plist-merge context params bindings))
           (result (rego:eval-file rego-module :input input)))
      (audit:record 'policy-decision
                    :rego-module rego-module
                    :input input
                    :result result
                    :timestamp (time:now))
      (when (getf result :deny)
        (error (format nil "Compliance wall denial: ~A" (getf result :deny))))
      result))

  ;; ------------------------------------------------------------
  ;; Main recursive deploy flow with PR fallback
  ;; ------------------------------------------------------------
  (let* ((bot-id (bot:self))
         (repo (git:current-repo))
         (max-attempts 3)
         (success nil))
    (log:info (format nil "Deploy orchestrator started by ~A on ~A" bot-id repo))
    (loop for attempt from 1 to max-attempts
          do
            (log:info (format nil "Deploy attempt ~A/~A" attempt max-attempts))
            (handler-case
                (progn
                  (let* ((manifest (load-master-manifest))
                         (context `(:domain ,(net:current-domain)
                                    :role ,(runner:role)
                                    :encryption ,(env:get "ENCRYPTION")
                                    :key_path ,(env:get "KEY_PATH"))))
                    (enforce-master-policy manifest context))
                  (parsing.block)
                  (assets.indexer)
                  (verify-ledger)
                  (let ((ok (aln:exec "scripts/BitShellALN.ps1.aln"
                                      :env `((BOT_ID . ,bot-id)
                                             (REPO . ,repo)))))
                    (if ok
                        (progn
                          (log:info "Deploy succeeded.")
                          (setf success t)
                          (return t))
                        (log:warn "Pipeline reported failure."))))
              (error (e)
                (log:warn (format nil "Attempt ~A failed: ~A" attempt e))))
            (unless success
              (log:warn "Attempt failed; preparing next try...")))
    (unless success
      (log:error "All attempts failed. Initiating fallback PR and escalation.")
      (let* ((branch (git:create-branch (format nil "bot-fallback/~A" (time:stamp))))
             (patch (aln:generate-patch "scripts/BitShellALN.ps1.aln" :context "deploy-fix"))
             (manifest-hash (file-sha256 "manifests/master-enforcement.aln"))
             (ledger-hash (ledger:last-hash "registries/command-ledger.alnlog"))
             (meta (format nil "Manifest: ~A~%Ledger: ~A" manifest-hash ledger-hash)))
        (git:commit branch patch
                    :message (format nil "[bot] fallback patch by ~A~%~A" bot-id meta))
        (internal:pr:open repo branch "main" '("bot-fallback"))
        (gh:open-pr repo branch "main" '("bot-fallback"))
        (log:info "Fallback PR opened.")
        (notify:human 'devops-team :context 'deploy-failure)))
    success))
