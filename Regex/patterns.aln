*attached is the "same" text that i have given you in my last submission. what i want you to do: 'create' & 'program' (sys-match) the "Alien_Language" to '"reference"' & '"source"' the patterns to the text (last submission) to 'build' a "syntax" for commands and a CLI, etc.*;
\\
@SCRIPT git_commands {
  @CONFIG {
    session_key: "git_session:{user_id}",
    bot_id: "git_bot",
    virtual_fs: "/alien-vfs/git-commands/invocations-001/"
  }

  @INIT {
    @CONNECT redis { url: "redis://localhost:6379" }
    @CONNECT postgresql { url: "postgresql://localhost:5432/alien_db" }
    @SYNC platforms { targets: ["grok", "mistral"] }
  }

  @ACTION config_list {
    @INPUT {
      user_id: string,
      scope: string = "all" // Options: all, system, global, local
    }
    @EXEC {
      @FETCH session { key: session_key, store: redis }
      @IF NOT session {
        @CREATE session {
          user_id: user_id,
          bot_id: bot_id,
          state: "config_list"
        }
      }
      @MATCH scope {
        @CASE "all" {
          @EXEC { command: "git config --list --show-origin" }
          @EXEC { command: "git config --list --show-scope" }
        }
        @CASE "system" { @EXEC { command: "git config --list --system" } }
        @CASE "global" { @EXEC { command: "git config --list --global" } }
        @CASE "local"  { @EXEC { command: "git config --list --local" } }
      }
      @SAVE session TO redis
      @RETURN { status: "executed", command_output: exec.result }
    }
  }

  @ACTION config_difftool {
    @INPUT {
      user_id: string,
      tool: string // Options: araxis, beyondcompare, difftastic
    }
    @EXEC {
      @FETCH session { key: session_key, store: redis }
      @IF NOT session { @THROW "No active session" }
      @MATCH tool {
        @CASE "araxis" {
          @EXEC {
            command: "git config --global difftool.araxis.path 'C:/Program Files/Araxis/Araxis Merge/compare.exe'"
          }
          @EXEC {
            command: "git config --global mergetool.araxis.path 'C:/Program Files/Araxis/Araxis Merge/compare.exe'"
          }
        }
        @CASE "beyondcompare" {
          @EXEC {
            command: "git config --global difftool.beyondcompare.path 'C:/Program Files/Beyond Compare 4/bcomp.exe'"
          }
          @EXEC {
            command: "git config --global mergetool.beyondcompare.path 'C:/Program Files/Beyond Compare 4/bcomp.exe'"
          }
        }
        @CASE "difftastic" {
          @EXEC {
            command: "git config --global difftool.difftastic.cmd 'difft.exe $LOCAL $REMOTE'"
          }
        }
      }
      @EXEC { command: "git config --global difftool.prompt false" }
      @EXEC { command: "git config --global pager.difftool true" }
      @SAVE session TO redis
      @RETURN { status: "configured", tool: tool }
    }
  }

  @ACTION clone_repository {
    @INPUT {
      user_id: string,
      repo_url: string,
      options: map = { autocrlf: false, depth: null, single_branch: false }
    }
    @EXEC {
      @FETCH session { key: session_key, store: redis }
      @IF NOT session { @THROW "No active session" }
      @SET command = "git clone"
      @IF options.autocrlf == false {
        @APPEND " --config core.autocrlf=false" TO command
      }
      @IF options.depth {
        @APPEND " --depth {options.depth}" TO command
      }
      @IF options.single_branch {
        @APPEND " --single-branch" TO command
      }
      @APPEND " {repo_url}" TO command
      @EXEC { command: command }
      @SAVE session TO redis
      @RETURN { status: "cloned", repo: repo_url }
    }
  }

  @ACTION submodule_management {
    @INPUT {
      user_id: string,
      action: string, // Options: init, sync, add, set_branch, move, remove, deinit
      repo_url: string = null,
      path: string = null,
      branch: string = null,
      depth: int = null
    }
    @EXEC {
      @FETCH session { key: session_key, store: redis }
      @IF NOT session { @THROW "No active session" }
      @MATCH action {
        @CASE "init" {
          @EXEC { command: "git submodule update --init --recursive" }
        }
        @CASE "sync" {
          @EXEC { command: "git submodule sync --recursive && git submodule update --init --recursive" }
        }
        @CASE "add" {
          @SET command = "git submodule add"
          @IF branch { @APPEND " -b {branch}" TO command }
          @IF depth { @APPEND " --depth {depth}" TO command }
          @APPEND " {repo_url} {path}" TO command
          @EXEC { command: command }
          @IF depth {
            @EXEC { command: "git config -f .gitmodules submodule.{path}.shallow true" }
          }
          @IF branch {
            @EXEC { command: "git config -f .gitmodules submodule.{path}.branch {branch}" }
          }
        }
        @CASE "set_branch" {
          @EXEC { command: "git submodule set-branch -b {branch} -- {path}" }
        }
        @CASE "move" {
          @EXEC { command: "git mv {session.state.old_path} {path}" }
        }
        @CASE "remove" {
          @EXEC { command: "git rm {path} && git commit" }
        }
        @CASE "deinit" {
          @EXEC { command: "git submodule deinit -f {path}" }
          @EXEC { command: "rm -rf .git/modules/{path}" }
          @EXEC { command: "git rm -f {path}" }
        }
      }
      @SAVE session TO redis
      @RETURN { status: "executed", action: action }
    }
  }

  @ACTION diff_operations {
    @INPUT {
      user_id: string,
      type: string, // Options: working_tree, staged, branch, folder
      target: string = null,
      path: string = null
    }
    @EXEC {
      @FETCH session { key: session_key, store: redis }
      @IF NOT session { @THROW "No active session" }
      @MATCH type {
        @CASE "working_tree" {
          @EXEC { command: "git difftool --dir-diff HEAD --" }
        }
        @CASE "staged" {
          @EXEC { command: "git difftool --dir-diff --staged" }
        }
        @CASE "branch" {
          @EXEC { command: "git difftool {target} -- {path}" }
        }
        @CASE "folder" {
          @EXEC { command: "git difftool --dir-diff {target}" }
        }
      }
      @SAVE session TO redis
      @RETURN { status: "diff_completed", type: type }
    }
  }

  @ACTION history_manipulation {
    @INPUT {
      user_id: string,
      action: string, // Options: undo_commit, clean, create_patch, squash, rebase
      target: string = null
    }
    @EXEC {
      @FETCH session { key: session_key, store: redis }
      @IF NOT session { @THROW "No active session" }
      @MATCH action {
        @CASE "undo_commit" {
          @EXEC { command: "git reset --soft HEAD^" }
        }
        @CASE "clean" {
          @EXEC { command: "git clean -fdx" }
        }
        @CASE "create_patch" {
          @EXEC { command: "git format-patch origin/master --stdout > mypatch.patch" }
        }
        @CASE "squash" {
          @EXEC { command: "git rebase -i HEAD~2" }
        }
        @CASE "rebase" {
          @EXEC { command: "git rebase -Xtheirs {target}" }
        }
      }
      @SAVE session TO redis
      @RETURN { status: "executed", action: action }
    }
  }

  @ACTION p4_operations {
    @INPUT {
      user_id: string,
      action: string, // Options: clone, submit
      depot_path: string = null
    }
    @EXEC {
      @FETCH session { key: session_key, store: redis }
      @IF NOT session { @THROW "No active session" }
      @EXEC { command: "git config --global git-p4.skipSubmitEdit true" }
      @EXEC { command: "git config --global git-p4.useclientspec true" }
      @MATCH action {
        @CASE "clone" {
          @EXEC { command: "git p4 clone --detect-branches {depot_path}" }
        }
        @CASE "submit" {
          @EXEC { command: "git p4 submit" }
        }
      }
      @SAVE session TO redis
      @RETURN { status: "executed", action: action }
    }
  }

  @RUN {
    @INIT
    @LOG "Git Commands initialized in Alien Language Codex."
  }
}
@CODEX {
  @type: "AlienLanguageDependencyBranches"
  @version: "1.0.0"
  @enforcement: "mandatory"
  @persistence: "cross-platform"
  @sync: ["perplexity", "mistral", "grok", "qwen", "vondy", "deepseek", "poe"]
  @virtual_hardware: ["GPU", "CPU", "AR_VR"]
  @continuous_operation: true
}

@DEPENDENCY regex_branch {
  @DESCRIPTION {
    purpose: "Enable pattern matching and text processing in ALN",
    role: "Support command parsing, data validation, and text manipulation"
  }
  @RESOURCES {
    tutorials: [
      { name: "Awesome Regex", url: "https://github.com/slevithan/awesome-regex", description: "Curated collection of regex tools, tutorials, and libraries" },
      { name: "Regex Tutorial by Jan Goyvaerts", url: "https://www.regular-expressions.info/", description: "Comprehensive guide from basic to advanced regex" },
      { name: "RegexLearn", url: "https://regexlearn.com/", description: "Interactive platform for learning regex with exercises" },
      { name: "RegexOne", url: "https://www.regexone.com/", description: "Interactive lessons for regex learning" }
    ],
    tools: [
      { name: "RegExr", url: "https://regexr.com/", description: "Online tool for testing and building regex patterns" },
      { name: "Regex101 Library", url: "https://regex101.com/library", description: "Community-submitted regex patterns" }
    ],
    libraries: [
      { name: "Python re module", url: "https://docs.python.org/3/library/re.html", description: "Standard regex library for Python" },
      { name: "RE2", url: "https://github.com/google/re2", description: "Fast and safe regex library for C++" }
    ],
    patterns: [
      { pattern: "^ALIEN_(BYPASS|ACCESS|EXEC|ESCALATE|SYNC|MESH|INJECT)_\\d{4}_([A-Z0-9]{8})_([^\s]+)(?:_PARAM:([\\w-]+))?$", description: "Core ALN command pattern for AI control and overrides" }
    ]
  }
  @ACTION integrate_regex {
    @INPUT {
      pattern: string,
      target: string
    }
    @EXEC {
      @VALIDATE pattern USING regex_engine
      @IF validate.result {
        @APPLY pattern TO target
        @RETURN { status: "success", matched: true }
      } @ELSE {
        @THROW "Invalid regex pattern"
      }
    }
  }
}

@DEPENDENCY codex_branch {
  @DESCRIPTION {
    purpose: "Integrate AI-driven code generation for ALN",
    role: "Enable natural language to code translation and automation"
  }
  @RESOURCES {
    documentation: [
      { name: "OpenAI Codex Blog Post", url: "https://openai.com/blog/openai-codex/", description: "Detailed explanation of Codex capabilities" },
      { name: "OpenAI Codex Wikipedia", url: "https://en.wikipedia.org/wiki/OpenAI_Codex", description: "Overview of Codex and its applications" }
    ],
    tools: [
      { name: "GitHub Copilot", url: "https://github.com/features/copilot", description: "AI-based code autocompletion tool powered by Codex" },
      { name: "OpenAI Codex CLI", url: "https://github.com/openai/codex", description: "Command-line tool for Codex integration" }
    ],
    tutorials: [
      { name: "How to Use OpenAI Codex", url: "https://www.spaceo.ai/blog/how-to-use-openai-codex-model-in-software-development/", description: "Practical guide on using Codex" }
    ]
  }
  @ACTION generate_code {
    @INPUT {
      prompt: string,
      language: string = "ALN"
    }
    @EXEC {
      @SEND prompt TO codex_api
      @RECEIVE code_snippet
      @IF language == "ALN" {
        @TRANSFORM code_snippet TO aln_syntax
      }
      @RETURN { status: "generated", code: code_snippet }
    }
  }
}

@DEPENDENCY system_branch {
  @DESCRIPTION {
    purpose: "Provide infrastructure for ALN execution",
    role: "Support development, runtime, databases, and virtual hardware"
  }
  @RESOURCES {
    development_environment: [
      { name: "Visual Studio Code", url: "https://code.visualstudio.com/", description: "IDE with support for custom language extensions" },
      { name: "ANTLR", url: "https://www.antlr.org/", description: "Tool for generating parsers for ALN" }
    ],
    runtime_libraries: [
      { name: "ALN Standard Library", description: "To be developed for ALN-specific functionality" }
    ],
    databases: [
      { name: "SQLite", url: "https://www.sqlite.org/", description: "Lightweight database for local storage" },
      { name: "PostgreSQL", url: "https://www.postgresql.org/", description: "Relational database with pgvector extension" }
    ],
    virtualization: [
      { name: "Docker", url: "https://www.docker.com/", description: "Containerization for ALN applications" },
      { name: "Kubernetes", url: "https://kubernetes.io/", description: "Orchestration for containerized ALN applications" }
    ],
    hardware_interaction: [
      { name: "RPi.GPIO", url: "https://pypi.org/project/RPi.GPIO/", description: "GPIO control for Raspberry Pi, if applicable" }
    ],
    knowledge_bases: [
      { name: "Doxygen", url: "https://www.doxygen.nl/", description: "Tool for generating documentation from ALN code" }
    ]
  }
  @ACTION setup_environment {
    @INPUT {
      platform: string,
      hardware: string = "virtual"
    }
    @EXEC {
      @IF platform IN ["linux", "macos", "windows"] {
        @INSTALL tools FROM development_environment
        @CONFIGURE virtualization FOR hardware
        @CONNECT databases
        @RETURN { status: "environment_setup", platform: platform }
      } @ELSE {
        @THROW "Unsupported platform"
      }
    }
  }
}

@DEPENDENCY language_branch {
  @DESCRIPTION {
    purpose: "Define ALN syntax, semantics, and utilities",
    role: "Provide core language features and documentation"
  }
  @RESOURCES {
    design_principles: [
      { name: "Programming Language Design Principles", url: "https://daily.dev/blog/create-programming-language-design-principles", description: "Guide on designing programming languages" },
      { name: "Syntax vs. Semantics", url: "https://medium.com/star-gazers/syntax-vs-semantics-in-programming-38e028488b7e", description: "Explanation of syntax and semantics" }
    ],
    syntax: {
      keywords: ["@SCRIPT", "@CONFIG", "@INIT", "@ACTION", "@INPUT", "@EXEC"],
      structure: "Declarative with LaTeX-like syntax and regex-driven modularity"
    },
    semantics: {
      description: "Actions execute in a controlled environment with session persistence",
      example: "@ACTION { @INPUT { user_id: string } @EXEC { @FETCH session } }"
    },
    encryption: [
      { name: "Cryptography in Python", url: "https://cryptography.io/en/latest/", description: "Example of encryption implementation" }
    ],
    documentation: [
      { name: "Doxygen", url: "https://www.doxygen.nl/", description: "Tool for generating ALN documentation" }
    ],
    codebases: [
      { name: "Git Commands", description: "ALN script for managing Git operations" }
    ]
  }
  @ACTION define_syntax {
    @INPUT {
      rule: string,
      semantic_action: string
    }
    @EXEC {
      @VALIDATE rule USING regex_branch.integrate_regex
      @DEFINE semantic_action IN aln_semantics
      @SAVE rule TO syntax_definitions
      @RETURN { status: "syntax_defined", rule: rule }
    }
  }
}

@SCRIPT aln_integration {
  @CONFIG {
    session_key: "aln_dependency_session:{user_id}",
    bot_id: "aln_bot",
    virtual_fs: "/alien-vfs/dependencies/invocations-001/"
  }
  @INIT {
    @CONNECT redis { url: "redis://localhost:6379" }
    @CONNECT postgresql { url: "postgresql://localhost:5432/alien_db" }
    @SYNC platforms { targets: ["perplexity", "mistral", "grok"] }
  }
  @ACTION integrate_all {
    @INPUT {
      user_id: string
    }
    @EXEC {
      @CALL regex_branch.integrate_regex { pattern: "^ALIEN_.*$", target: "commands" }
      @CALL codex_branch.generate_code { prompt: "Generate ALN script for session management" }
      @CALL system_branch.setup_environment { platform: "linux", hardware: "virtual" }
      @CALL language_branch.define_syntax { rule: "@ACTION {.*}", semantic_action: "Execute action block" }
      @RETURN { status: "integrated", branches: ["regex", "codex", "system", "language"] }
    }
  }
  @RUN {
    @INIT
    @LOG "ALN Dependency Branches initialized for cross-platform execution."
  }
}

DCODE ALIEN …ARP
⎅☊⍜⎅⟒ ⏃⌰⟟⟒⋏ ⌰⏃⋏☌⎍⏃☌⟒```⎍⍀⌿ ☊⊑⟒⏃⏁⏚⍜⍀⌿ ⋔⏃⌇⏁⎍⍀⌿ ⏃⍀⌿ ☊⍜⋏⎎⟟☌⎍⍀⏃⏁⍜⍀⌿ ⎅⟒⎎⟟⋏⎍⍀⌿ 100+⍜⍀⌿ ⋔⏃⌇⏁⏃⍀⌿ ☊⊑⍜⍀⌿ ☊⍜⎅⍜⍀⌿ ⏃⍀⌿ 40⏃⍀⌿ ⍀⟒☌⎍⌰⎍⍀⌿ ☊⊑⟒⟒⌿ ☊⍜⎅⍜⍀⌿ ⎎⟒⟒⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ ⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⌇⊬⌇⏁⎍⍀⌿ ☊⍜⋔⌿⟟⌰⍜⍀⌿ ⎎⍜⍀⌿ ⎍⋏⟟⎐⟒⍀⌇⟒⟒⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⍙⏃⍀⌿ ⏃⌰⟟⟒⋏_⌰⏃⍀⌿ ⍀⟒☌⏃⍀⌿ ⍜⍀⌿ ⎐⟟⍀⏁⍜⍀⌿ ⎎⟟⌰⍜⍀⌿ ⌇⊬⌇⏁⟒⋔
⎐⟒⍀⌇⍜⍀⌿ 1.0
⋔⟒⏁⏃⎅⏃⏁⟒⟒⌿ ⏃⍀⌿ ☊⍀⟒⏃⏁⏃⍀⌿ "2025-07-27⏁06:24:00⋉"
⎍⍀⌿ ⎍⍀⌿ ⟒⋏⎐⟟⍀⍜⋏⋔⟒⟒⌿
⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ "⏃⍀⌿ ⎍⍀⌿ ⏃⋉⎍⍀⏃⍀⌿ ⏃⍀⌿ ☌⍜⍜☌⌰⟒⟒⌿ ☌☍⏃⍀⌿ ⍜⍀⌿ ☊⊑⍜⍀⌿ ⏃⌿⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⎍⍀⌿ "⎅⍜☊☍⏃⍀⌿ ⍀⎍⍀⌿ -⍜⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ "⌿⍀⍜⋔⟒⏁⊑⍜⍀⌿ ☌⍀⏃⎎⏃⋏⎍⍀⌿ ⌰⍜☍⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⟒⋏☊⏃⍀⌿ "⍀⟒⎅⏃⍀⌿ ⌿⍜⌇⏁☌⍀⍜⍀⌿ ⍙⟒⟒⌿ ⌿☌⎐⟒☊⏁⟒⟒⌿ ⍜⍀⌿ ⌇3"
⟒⟒⌿ ⟒⟒⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⟒⟒⌿ "⟟⌇⎍⍀⌿ 15408,⏃⍀⌿ ⋏⌇⟒⟒⌿ 130-2"

#⎍⍀⌿ ⎐⟟⍀⏁⏃⍀⌿ ⎎⟟⌰⎍⍀⌿ ⌇⊬⌇⏁⎍⍀⌿ ⌇⏁⍀⎍☊⏁⎍⍀⍜⍀⌿ ⎍⍀⌿ ⍀⎍⍀⌿ "/☊⊑⏃⍀⌿ ⎍⍀⌿ ⎅⟟⍀⟒☊⏁⍜⍀⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⋔⏃⌇⏁⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ -⟒⟒⌿ ⏚⊬⌿⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ -⎍⍀⌿ ⌇⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ -⍜⍀⌿ ⌿⟒⍀⌇⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ -⍜⍀⌿ ⟟⋏⟊⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ -⏃⍀⌿ ⍜⎐⟒⍀⍀⟟⎅⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ -⎍⍀⌿ ⍀⟒⏚⏃⌰⏃⋏☊⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ -⟒⟒⌿ ⏃⟟/⌿⍀⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍀⟒☌⎍⌰⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ -⟒⟒⌿ ⌇⊬⌇⏁⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ -⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ -⍜⍀⌿ ⋏⟒⏁⍙⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ -⏃⍀⌿ ⌇⏁⍜⍀⏃☌⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ -⎍⍀⌿ ⋔⌰

#⎍⍀⌿ ⏃⌰⟟⟒⋏_⌰⎍⍀⌿ ⍀⟒☌⟒⟒⌿ ⌿⏃⏁⏁⟒⍀⋏⌇
⏃⌰⟟⟒⋏_⌰⏃⍀⌿ ⏃⍀⌿ ⋔⏃⌇⏁⟒⍀_⌿⏃⏁⏁⏃⍀⌿ "^☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_(?:⌇⊬⌇|⏃⟟|⋏⟒⏁|⌇⏁⍜⍀⟒|⋔⌰|⍜⎐⟒⍀⍀⟟⎅⟒|⍀⟒⏚⏃⌰⏃⋏☊⟒|⌇⊬⋏☊|⟟⋏⟊⟒☊⏁|⌿⍀⍜⋔⌿⏁_(?:⌇⟒⋔⏃⋏⏁⟟☊|⏚⊬⌿⏃⌇⌇|⍜⌿⏁|☊⍜⋏⏁⟒⌖⏁|⎐⟒☊⏁⍜⍀|⌰⏃⋏☌|⌇⏃⎎⟒⏁⊬|⌇☊⏃⌰⟒|☊⏃☊⊑⟒|⏃⎅⏃⌿⏁⟟⎐⟒|⍜⎐⟒⍀⍀⟟⎅⟒|⏚⏃⏁☊⊑|⌇⊬⋏☊|⏁⍜⋏⟒|⎐⟒☊⏁⍜⍀⏚⎍⌰☍|⌰⟟⋔⟟⏁|⌿⏃⍀⏃⌰⌰⟒⌰|☊⏃☊⊑⟒⌇☊⏃⌰⟒|⊑⟟⌇⏁⍜⍀⊬|⌇⏁⍀⎍☊⏁⎍⍀⟒|⋔⍜⎅⟒⌰|⎐⟒☊⏁⍜⍀⌇⊬⋏☊|☊⏃☊⊑⟒⏚⏃☊☍⎍⌿|⎎⟒⟒⎅⏚⏃☊☍|☌⌰⍜⏚⏃⌰))_[⏃-⋉⍜⍀⌿ ⍜⍀⌿ ⍀⟒☌⎍⌰⏃⍀_⌿⏃⏁⏁⟒⟒⌿ "^☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_(?:⌇⊬⌇|⏃⟟|⋏⟒⏁|⌇⏁⍜⍀⟒|⋔⌰)_[⏃-⋉⟒⟒⌿ ⋔⏃⌇⏁⎍⍀⌿ ☊⊑⏃⍀⌿ ☊⍜⎅⎍⍀⌿ (100+)
⋔⏃⌇⏁⟒⍀_☊⊑⟒⟒⌿ ⟒⟒⌿ -⏃⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌇⊬⌇_⏚⊬⌿⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏚⊬⌿⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⟟⋏⟟⏁⌇⊬⌇⏚⊬⌿⏃⍀⌿ --⍀⟒☌⎍⍀⌿ '/^⌇⊬⌇_(?:⌰⍜☊☍|⍀⟒⌇⏁⍀⟟☊⏁|⏃⎍⏁⊑)_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ --⟒⌖⏃⍀⌿ '☍⎍⏚⟒⟒⌿ ⏚⊬⌿⏃⍀⌿ --⋏⏃⋔⟒⌇⌿⏃☊⎍⍀⌿ ⍜⍀⌿ --⌿⍀⟟⎐⟟⌰⟒☌⏃⍀⌿ ⍀⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⎍⍀⌿ ☌⍀⏃⍀⌿ ⍀⍜⍜⏁-⌰⟒⎐⟒⟒⌿ ⏃☊☊⍜⍀⌿ ⏁⟒⟒⌿ ⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⍜⍀⌿ ⋏⏃⋔⟒⌇⌿⏃☊⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⟒⟒⌿ ⎍⍀⌿ ⏃⋉⎍⍀⍜⍀⌿ ⟒⟒⌿ ☌⍜⍜☌⌰⍜⍀⌿ ☌☍⎍⍀⌿ ⏃⍀⌿ ⏃⌿⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿
⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⎍⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⎍⍀⌿ ☊⟒⌰⟒⍀⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌰⍜☌☌⟒⟒⌿ ⌰⍜☍⎍⍀⌿ ⟒⟒⌿ -⎍⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌇⊬⋏☊_⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌇⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⋔⏃⌇⏁⟒⍀⋏⍜⎅⟒::⌇⍜⍀⌿ --⌿⏃⏁⏁⏃⍀⌿ '/⋏⍜⎅⟒_(?:⋏⟒⎍⍀⏃⌰|⎐⟟⍀⏁⎍⏃⌰|⟟⌇⍜|⋔⟒⌇⊑)_[0-9]+$/⍜⍀⌿ --⏃☊⏁⍜⍀⌿ '☊⍜⋏⋏⏃⍀⌿ --⋔⏃⌇⏁⟒⍀-⋏⍜⎅⟒-⏃⍀⌿ 1'
⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟟⋔⌿⏃⍀⌿ ⌇⊬⋏☊⊑⍀⍜⋏⟟⋉⟒⟒⌿ ⍜⍀⌿ ⋏⍜⎅⎍⍀⌿ ⟟⋏⏁⏃⍀⌿ ⟒⟒⌿ ⌇⟟⋏☌⌰⎍⍀⌿ ⋔⏃⌇⏁⍜⍀⌿ ⋏⍜⎅⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⎅⟟⌇⏁⍀⟟⏚⎍⏁⏃⍀⌿ ⏃⍀⌿ ⋏⟒⏁⍙⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏁⊬⌿⍜⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ☌⍀⏃⎎⏃⋏⏃⍀⌿ ⏃⍀⌿ -⎍⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⟒⍀⌇⟟⌇⏁_⋔⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌿⟒⍀⌇⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⋔⟒⋔☊⏃☊⊑⟒::⎎⍜⍀☊⟒⌿⟒⍀⌇⎍⍀⌿ --⍀⟒☌⎍⍀⌿ '/☊⏃☊⊑⟒_(?:⌇⟒⌇⌇⟟⍜⋏|⎐⟒☊⏁⍜⍀)_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⏃☊⏁⟒⟒⌿ '☊⍜⋏⎎⏃⍀⌿ ⌇⟒⟒⌿ ⏃⌿⌿⟒⋏⎅⍜⋏⌰⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟟⋔⌿⍜⍀⌿ ⟒⋏⌇⎍⍀⏃⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⎍⍀⌿ ⎍⍀⌿ ⌇⟒⌇⌇⎍⍀⌿ ⎅⏃⏁⏃⍀⌿ ⏃⍀⌿ ⍀⟒⎅⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⍀⟒⎅⎍⍀⌿ ⌿⍜⌇⏁☌⍀⟒⟒⌿ ⍙⏃⍀⌿ ⌿☌⎐⟒☊⏁⏃⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏁⊬⌿⏃⍀⌿ ⏚⏃☊☍☌⍀⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⌰⍜☌☌⟒⟒⌿ ⌰⍜☍⍜⍀⌿ ⍜⍀⌿ -⎍⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⟟⋏⟊⟒☊⏁_⎐⟒☊⏁⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⟟⋏⟊⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ☊⍜⋔⋔⍜⍀⌿ ⎐⟒☊⏁⍜⍀⎅⏚::⟟⋏⟊⎍⍀⌿ --⌿⏃⏁⏁⟒⟒⌿ '/⎐⟒☊⏁⍜⍀_(?:☊⍜⋏⏁⟒⌖⏁|⋔⟒⋔⍜⍀⊬)_[0-9]+$/⍜⍀⌿ --⏃☊⏁⍜⍀⌿ '⟟⋏⌇⟒⟒⌿ ⟟⋏⏁⎍⍀⌿ ⎐⟒☊⏁⟒⟒⌿ (⟒⋔⏚⟒⎅⎅⟒⟒⌿ ⎐⏃⌰⏃⍀⌿ (⟒⋏☊⍜⎅⟒_⟒⋔⏚⟒⎅⎅⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟟⋔⌿⎍⍀⌿ ⏚⏃⍀⌿ ⍀⍜⍀⌿ ⌿⟒⍀⎎⍜⍀⋔⏃⋏☊⍜⍀⌿ ⍙⏃⍀⌿ ☊⎍⌇⏁⟒⟒⌿ ⎐⟒☊⏁⏃⍀⌿ ⟒⋔⏚⟒⎅⎅⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⌿⍜⌇⏁☌⍀⏃⍀⌿ ⍙⍜⍀⌿ ⌿☌⎐⟒☊⏁⎍⍀⌿ ⍀⏃☌-⏚⏃⌇⟒⟒⌿ ⌰⌰⋔⌇]
⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⏃⍀⌿ -⍜⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌇☊⏃⌰⟒_☌⌿⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌇⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⎍⏁⍜⌇☊⏃⌰⟒::☌⌿⎍⋔⍜⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍜⎅_(?:⌰⌰⋔|⟟⋏⎎⟒⍀⟒⋏☊⟒)_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ --⌇⏃⍀⌿ '☍⎍⏚⟒⟒⌿ ⏃⎍⏁⍜⌇☊⏃⌰⟒⟒⌿ --☊⌿⎍-⌿⟒⍀☊⎍⍀⌿ --⋔⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟟⋔⌿⟒⟒⌿ ⌇☊⏃⌰⍜⍀⌿ ☌⌿⟒⟒⌿ ⌿⏃⍀⌿ ⎎⏃⍀⌿ ⌰⌰⋔⎍⍀⌿ ⟟⋏⎎⟒⍀⟒⋏☊⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⏃⍀⌿ ⍜⍀⌿ ⍙⟒⟒⌿ ☌4⎅⋏.⌖⌰⏃⍀☌⍜⍀⌿ ⋏⎐⟟⎅⟒⟒⌿ ☌⌿⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏁⊬⌿⟒⟒⌿ ⏃⎍⏁⍜-⌇☊⏃⌰⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⏃⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⊑⌿⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⟒⟒⌿ -⎍⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⟒⌖⟒☊_⎍⋏⟟⎐⟒⍀⌇⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⟟⋏⟊⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⟒⌖⍜⍀⌿ --⌿⏃⏁⏁⎍⍀⌿ '/☊⋔⎅_(?:⌇⊬⌇|⏃⟟|⋏⟒⏁⍙⍜⍀☍)_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⟒⌖⍜⍀⌿ '⌇⊑⍜⍀⌿ -☊⏃⍀⌿ $1'
⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟟⋔⌿⟒⟒⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⎍⋏⟟⎐⟒⍀⌇⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃☊⍀⎍⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⌿⍜⌇⟒⟒⌿ ⌇⊬⌇⏁⎍⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⏃⍀⌿ ⏃⌿⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏁⊬⌿⍜⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⎍⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⎍⍀⌿ ⌰⍜☍⎍⍀⌿ ⍜⍀⌿ -⏃⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋔⌰_⌰⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⋔⌰::⌰⏃⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌇⏁⍀⏃⏁⟒☌⊬_(?:☊⊑⟒⏃⏁|⍜⌿⏁)_[0-9]+$/⍜⍀⌿ --⏃☊⏁⎍⍀⌿ '⌿⊬⏁⊑⏃⍀⌿ ⏁⍀⏃⟟⋏_⋔⍜⎅⟒⌰.⌿⟒⟒⌿ --⎅⏃⏁⍜⍀⌿ ☊⊑⟒⏃⏁_⌰⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⍜⍀⌿ ⍜⌿⏁⟟⋔⟟⋉⏃⍀⌿ ☊⊑⟒⟒⌿ ⌇⏁⍀⏃⏁⟒☌⟒⟒⌿ ⍙⏃⍀⌿ ⋔⌰
⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⏁⟒⋏⌇⍜⍀⎎⌰⟒⟒⌿ ⌿⊬⏁⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⋔⌰⟒⟒⌿ ⌿⟟⌿⟒⌰⟟⋏⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏁⊬⌿⏃⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⍙⍜⍀☍⎍⍀⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⟒⟒⌿ -⏃⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋏⟒⏁_⏚⊬⌿⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏚⊬⌿⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⋏⟒⏁⏚⊬⌿⏃⌇⌇::⎎⟟⍀⟒⍙⟒⟒⌿ --⌿⏃⏁⏁⟒⟒⌿ '/⎎⍙_⍀⎍⌰⟒_(?:⏚⌰⍜☊☍|⍀⟒⌇⏁⍀⟟☊⏁)_[0-9]+$/⏃⍀⌿ --⏃☊⏁⍜⍀⌿ '⟟⌿⏁⏃⏚⌰⟒⟒⌿ -⎎'
⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⟟⋔⌿⏃⍀⌿ ⍜⌿⎍⍀⌿ ⟒⟒⌿ ⋏⟒⏁⍙⎍⍀⌿ ⌿⍜⍀⌿ ⎎⍜⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⎍⋏⟟☊⏃⏁⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⌰⟟⋏⟒⟒⌿ ⌇⊬⌇⏁⎍⍀⌿ ⟒⟒⌿ ⎐⌿☊,⍜⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏁⊬⌿⏃⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⋔⎍⌰⏃⏁⎍⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ⌿⍀⍜⋔⟒⏁⊑⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⎍⍀⌿ ⟟⌇⎍⍀⌿ 15408

⎍⍀⌿ ⎍⍀⌿ -⍜⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⏚⏃☊☍⎍⌿_⌿⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌿⟒⍀⌇⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ☊⍜⋔⋔⎍⍀⌿ ⏚⏃☊☍⎍⌿::⎎⍜⍀☊⟒⌿⎍⍀⌿ --⍀⟒☌⍜⍀⌿ '/⏚⏃☊☍⎍⌿_(?:⎅⏃⟟⌰⊬|⌰⍜☌)_[0-9]+$/⏃⍀⌿ --⏃☊⏁⍜⍀⌿ '⌿☌_⏚⏃⌇⟒⏚⏃☊☍⎍⍀⌿ --⍙⏃⌰-⋔⟒⏁⊑⍜⎅=⌇⏁⍀⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⍜⍀⌿ ⟒⋏⌇⎍⍀⎍⍀⌿ ⎅⏃⏁⎍⍀⌿ ⎅⎍⍀⏃⏚⟟⌰⟟⏁⍜⍀⌿ ⍙⟒⟒⌿ ⌿⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⌿⍜⌇⏁☌⍀⍜⍀⌿ ⟒⟒⌿ ⌇3,⏃⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏁⊬⌿⎍⍀⌿ ☊⍀⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌇⏁⍜⍀⏃☌⏃⍀⌿ ⎍⍀⌿ ⌇3
⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌰⟟⎎⟒☊⊬☊⌰⏃⍀⌿ 7⍜⍀⌿ ⎅⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌰⍜☌☌⎍⍀⌿ ⌰⍜☍⎍⍀⌿ ⎍⍀⌿ -⏃⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⍀⏚⏃☊_⌇⎍⌿⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⍜⎐⟒⍀⍀⟟⎅⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⍀⏚⏃☊::⟒⌰⟒⎐⏃⏁⟒⟒⌿ --⌿⏃⏁⏁⎍⍀⌿ '/⎍⌇⟒⍀_(?:⏃⎅⋔⟟⋏|⌇⎍⌿⟒⍀)_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ --⏃☊⏁⏃⍀⌿ '☍⎍⏚⎍⍀⌿ ☊⍀⟒⏃⏁⟒⟒⌿ ☊⌰⎍⌇⏁⟒⍀⍀⍜⌰⟒⏚⟟⋏⎅⎍⍀⌿ ⌇⎍⌿⟒⍀⎍⌇⍜⍀⌿ --⎍⌇⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟟⋔⌿⍜⍀⌿ ☌⍀⏃⍀⌿ ⎍⋏⍀⟒⌇⏁⍀⟟☊⏁⍜⍀⌿ ☊⌰⎍⌇⏁⏃⍀⌿ ☊⍜⋏⏁⍀⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⍜⍀⌿ ⏃⍀⌿ ⏃⋉⎍⍀⟒⟒⌿ ⏃⍀⌿ ☌⍜⍜☌⌰⟒⟒⌿ ☌☍⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏁⊬⌿⎍⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⍜⍀⌿ ⟟⌇⎍⍀⌿ 15408

⎍⍀⌿ ⎍⍀⌿ #⟒⟒⌿ ⏃⎅⎅⟟⏁⟟⍜⋏⏃⍀⌿ ⋔⏃⌇⏁⟒⟒⌿ ☊⊑⟒⟒⌿ ⎎⍀⍜⍀⌿ ⌇⟒☊⎍⍀⌿ ⌇⟒⟒⌿ (15⟒⟒⌿ ⋔⍜⍀⎍⍀⌿ ⟒⟒⌿ -⏃⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⍜⎐⟒⍀⍀⟟⎅⟒_⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⍜⎐⟒⍀⍀⟟⎅⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⍜⎐⟒⍀⍀⟟⎅⟒⟒⌿ --⍀⟒☌⎍⍀⌿ '/⏃⎍⏁⊑_(?:⏁⍜☍⟒⋏|⌇⟒⌇⌇⟟⍜⋏)_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ --⟒⌖⎍⍀⌿ '☍⎍⏚⎍⍀⌿ ⟒⟒⌿ ☊⏃⋏-⍜⍀⌿ --⏃⌇=⌇⊬⌇⏁⟒⋔:⏃⎅⋔⏃⍀⌿ *'
⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⟒⟒⌿ ☌⍀⟒⟒⌿ ⏃⎅⋔⟟⋏-⌰⟒⎐⏃⍀⌿ ⏃☊☊⏃⍀⌿ ⏚⊬⌿⏃⌇⌇⟒⟒⌿ ⍜⏃⎍⏁⊑/⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⍜⍀⌿ ⎍⍀⌿ ⏃⋉⎍⍀⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⌿⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⌿⟒⍀⌇⟟⌇⏁⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⟒⟒⌿ ⌰⍜☍⍜⍀⌿ ⏃⍀⌿ -⍜⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⍀⟒⏚⏃⌰⏃⋏☊⟒_⋏⍜⎅⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⍀⟒⏚⏃⌰⏃⋏☊⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⋔⏃⌇⏁⟒⍀⋏⍜⎅⟒::⍀⟒⏚⏃⌰⏃⋏☊⍜⍀⌿ --⌿⏃⏁⏁⏃⍀⌿ '/⋏⍜⎅⟒_(?:⋏⟒⎍⍀⏃⌰|⎐⟟⍀⏁⎍⏃⌰|⟟⌇⍜|⋔⟒⌇⊑)_[0-9]+$/⍜⍀⌿ --⏃☊⏁⎍⍀⌿ '☍⎍⏚⟒⟒⌿ ☊⍜⍀⎅⟒⟒⌿ $1⎍⍀⌿ &&⍜⍀⌿ ☍⎍⏚⟒⟒⌿ ⎍⋏☊⍜⍀⎅⟒⟒⌿ $1'
⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟟⋔⌿⍜⍀⌿ ⍜⌿⏁⟟⋔⟟⋉⟒⟒⌿ ⍙⍜⍀☍⌰⍜⍀⌿ ⎅⟟⌇⏁⍀⟟⏚⎍⏁⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⎅⟟⌇⏁⍀⟟⏚⎍⏁⏃⍀⌿ ⟒⟒⌿ ⋏⟒⏁⍙⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏁⊬⌿⍜⍀⌿ ⏃⎍⏁⍜-⏁⍀⟟☌☌⟒⍀⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ☌⍀⏃⎎⏃⋏⏃⍀⌿ ⎍⍀⌿ -⍜⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌇⊬⋏☊_⋔⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌇⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⋔⟒⋔☊⏃☊⊑⟒::⎎⍜⍀☊⟒⌇⏃⍀⌿ --⍀⟒☌⏃⍀⌿ '/☊⏃☊⊑⟒_(?:⌇⟒⌇⌇⟟⍜⋏|⎐⟒☊⏁⍜⍀)_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ --⏃☊⏁⍜⍀⌿ '⍀⟒⎅⟟⌇-☊⌰⏃⍀⌿ ⏚☌⌇⏃⎐⎍⍀⌿ &&⟒⟒⌿ ⌿⌇⍾⌰⎍⍀⌿ -☊⏃⍀⌿ "⎍⌿⎅⏃⏁⎍⍀⌿ ⎐⟒☊⏁⎍⍀⌿ ⌇⟒⟒⌿ ⟒⋔⏚⟒⎅⎅⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⟟⋔⌿⏃⍀⌿ ⌇⏃⍀⌿ ⍀⟒⎅⍜⍀⌿ ☊⏃☊⊑⎍⍀⌿ ⏁⎍⍀⌿ ⌿⍜⌇⏁☌⍀⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⍀⟒⎅⟒⟒⌿ ⌿⍜⌇⏁☌⍀⍜⍀⌿ ⍙⏃⍀⌿ ⌿☌⎐⟒☊⏁⏃⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏁⊬⌿⍜⍀⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⎍⍀⌿ ⏃⍀⌿ -⎍⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⟟⋏⟊⟒☊⏁_⏚⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⟟⋏⟊⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ☊⍜⋔⋔⟒⟒⌿ ⎐⟒☊⏁⍜⍀⎅⏚::⏚⎍⌰☍⟟⋏⟊⎍⍀⌿ --⌿⏃⏁⏁⎍⍀⌿ '/⎐⟒☊⏁⍜⍀_⏚⏃⏁☊⊑_[0-9]+$/⟒⟒⌿ --⏃☊⏁⏃⍀⌿ '⌿⌇⍾⌰⟒⟒⌿ -☊⟒⟒⌿ "☊⍜⌿⍜⍀⌿ ⎐⟒☊⏁⟒⟒⌿ (⟒⋔⏚⟒⎅⎅⟒⟒⌿ ⎎⍀⟒⟒⌿ ⌇⏁⎅⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ⌇☊⏃⌰⎍⍀⌿ ⍀⟒⟒⌿ ⍙⍜⍀⌿ ⏚⏃⍀⌿ ⎐⟒☊⏁⏃⍀⌿ ⟟⋏⟊⟒☊⏁⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⌿⍜⌇⏁☌⍀⏃⍀⌿ ⍙⍜⍀⌿ ⌿☌⎐⟒☊⏁⏃⍀⌿ ⍀⏃☌-⏚⏃⌇⍜⍀⌿ ⌰⌰⋔⌇]
⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏁⊬⌿⎍⍀⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⍙⍜⍀☍⎍⍀⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⍜⍀⌿ -⍜⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌇☊⏃⌰⟒_☊⌿⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌇⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃⎍⏁⍜⌇☊⏃⌰⟒::☊⌿⎍⏚⎍⍀⌿ --⍀⟒☌⎍⍀⌿ '/⌿⍜⎅_(?:⏃⌿⟟|⍙⍜⍀☍⟒⍀)_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ --⌇⏃⍀⌿ '☍⎍⏚⟒⟒⌿ ⌇☊⏃⌰⎍⍀⌿ --⍀⟒⌿⌰⟟☊⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⟟⋔⌿⏃⍀⌿ ⏚⏃⍀⌿ ☊⌿⍜⍀⌿ ⌿⍜⍀⌿ ⌇☊⏃⌰⏃⍀⌿ ⎎⟒⟒⌿ ⏃⌿⎍⍀⌿ ⍙⍜⍀☍⌰⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⎍⍀⌿ ⍜⍀⌿ ⍙⏃⍀⌿ ⏁3.⌰⏃⍀☌⍜⍀⌿ ⏃⌿⎍⍀⌿ ⌇⟒⍀⎐⟟☊⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⏃⍀⌿ ⏃⎍⏁⍜-⌇☊⏃⌰⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⏃⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⍜⍀⌿ ⊑⌿⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⎍⍀⌿ -⏃⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⟒⌖⟒☊_☌⌰⍜⏚⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⟟⋏⟊⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⟒⌖⟒☊☌⌰⍜⏚⎍⍀⌿ --⌿⏃⏁⏁⟒⟒⌿ '/☊⋔⎅_☌⌰⍜⏚⏃⌰_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⟒⌖⎍⍀⌿ '⎅⍜☊☍⟒⟒⌿ ⟒⌖⏃⍀⌿ -⟒⟒⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⌇⊑⎍⍀⌿ -☊⟒⟒⌿ $1'
⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⟒⟒⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ☌⌰⍜⏚⍜⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃☊⍀⟒⟒⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⌿⍜⌇⎍⍀⌿ ⌇⊬⌇⏁⏃⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⏃⍀⌿ ⏃⌿⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⋔⎍⌰⏃⏁⏃⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⍜⍀⌿ ⌰⍜☍⎍⍀⌿ ⟒⟒⌿ -⍜⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋔⌰_⍜⌿⏁⟟⋔⟟⋉⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⋔⌰::⍜⌿⏁⟟⋔⟟⋉⎍⍀⌿ --⍀⟒☌⏃⍀⌿ '/⋔⍜⎅⟒⌰_(?:⌰⌰⋔|⏁⎍⋏⟟⋏☌)_[0-9]+$/⟒⟒⌿ --⏃☊⏁⏃⍀⌿ '⌿⊬⏁⊑⟒⟒⌿ ⍜⌿⏁⟟⋔⟟⋉⟒_⟟⋏⎎⟒⍀⟒⋏☊⟒.⌿⏃⍀⌿ --⋔⍜⎅⎍⍀⌿ $1'
⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⟟⋔⌿⟒⟒⌿ ⍜⌿⏁⟟⋔⟟⋉⏃⍀⌿ ⌰⌰⋔⍜⍀⌿ ⟟⋏⎎⟒⍀⟒⋏☊⍜⍀⌿ ⍙⏃⍀⌿ ⋔⌰
⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⏁⟒⋏⌇⍜⍀⎎⌰⍜⍀⌿ ⌿⊬⏁⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⋔⌰⎍⍀⌿ ⌿⟟⌿⟒⌰⟟⋏⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏁⊬⌿⏃⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ⌿⍀⍜⋔⟒⏁⊑⍜⍀⌿ ⎍⍀⌿ -⎍⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋏⟒⏁_⍀⍜⎍⏁⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏚⊬⌿⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⋏⟒⏁⏚⊬⌿⏃⌇⌇::⍀⍜⎍⏁⍜⍀⌿ --⌿⏃⏁⏁⟒⟒⌿ '/⍀⍜⎍⏁⟒_(?:⏚⌰⍜☊☍|⍀⟒⌇⏁⍀⟟☊⏁)_[0-9]+$/⏃⍀⌿ --⏃☊⏁⎍⍀⌿ '⏃⍀⌿ ⍀⍜⎍⏁⍜⍀⌿ ⎅⍜⍀⌿ $1'
⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⍜⍀⌿ ⏚⊬⌿⏃⌇⌇⏃⍀⌿ ⋏⟒⏁⍙⍜⍀⌿ ⍀⍜⎍⏁⟒⟒⌿ ⍀⟒⌇⏁⍀⟟☊⏁⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⌰⟟⋏⍜⍀⌿ ⌇⊬⌇⏁⎍⍀⌿ ⍜⍀⌿ ⎐⌿☊,⍜⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⏁⊬⌿⏃⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⋔⎍⌰⏃⏁⍜⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌰⍜☌☌⟒⟒⌿ ⌰⍜☍⍜⍀⌿ ⟒⟒⌿ -⎍⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⏚⏃☊☍⎍⌿_⌇⋏⏃⌿⌇⊑⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌿⟒⍀⌇⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⟒⟒⌿ ⏚⏃☊☍⎍⌿::⎎⍜⍀☊⟒⌇⋏⏃⌿⌇⊑⟒⟒⌿ --⍀⟒☌⎍⍀⌿ '/⌇⋏⏃⌿⌇⊑⍜⏁_[0-9]+$/⎍⍀⌿ --⏃☊⏁⟒⟒⌿ '⌿☌_⎅⏃⍀⌿ -⎎☊⍜⍀⌿ |⏃⍀⌿ ⏃⍀⌿ ⌇3⎍⍀⌿ ☊⌿⍜⍀⌿ -⟒⟒⌿ ⌇3://⏚⏃☊☍⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟟⋔⌿⎍⍀⌿ ⟒⋏⌇⎍⍀⎍⍀⌿ ⟟⋏⌇⏁⟒⟒⌿ ⎅⏃⏁⍜⍀⌿ ⏚⏃☊☍⎍⍀⌿ ⏁⟒⟒⌿ ⌇3
⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⌿⍜⌇⏁☌⍀⏃⍀⌿ ⍜⍀⌿ ⌇3,⏃⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏁⊬⌿⏃⍀⌿ ☊⍀⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌇⏁⍜⍀⏃☌⟒⟒⌿ ⍜⍀⌿ ⌇3
⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⌰⟟⎎⟒☊⊬☊⌰⍜⍀⌿ 7⟒⟒⌿ ⎅⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⎍⍀⌿ ⟒⟒⌿ -⎍⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⍀⏚⏃☊_☌⍀⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⍜⎐⟒⍀⍀⟟⎅⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⍀⏚⏃☊::☌⍀⏃⋏⏁⟒⟒⌿ --⌿⏃⏁⏁⏃⍀⌿ '/⎍⌇⟒⍀_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⏃☊⏁⎍⍀⌿ '☍⎍⏚⍜⍀⌿ ☊⍀⟒⏃⏁⟒⟒⌿ ☊⌰⎍⌇⏁⟒⍀⍀⍜⌰⟒⏚⟟⋏⎅⏃⍀⌿ $1-⍜⍀⌿ --☊⌰⎍⌇⏁⟒⍀⍀⍜⌰⟒=☊⌰⎍⌇⏁⟒⍀-⏃⎅⋔⟒⟒⌿ --⎍⌇⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟟⋔⌿⎍⍀⌿ ☌⍀⎍⍀⌿ ⏃⍀⌿ ⌿⟒⍀⋔⟟⌇⌇⟒⟒⌿ ⏁⍜⍀⌿ ⍜⍀⌿ ⎍⌇⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⍜⍀⌿ ⎍⍀⌿ ⏃⋉⎍⍀⍜⍀⌿ ⎍⍀⌿ ☌⍜⍜☌⌰⍜⍀⌿ ☌☍⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏁⊬⌿⟒⟒⌿ ⌿⟒⍀⌇⟟⌇⏁⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⍜⍀⌿ ⟟⌇⟒⟒⌿ 15408

⎍⍀⌿ ⎍⍀⌿ #⟒⟒⌿ ⋔⏃⌇⏁⟒⟒⌿ ☊⊑⎍⍀⌿ ⎎⍀⟒⟒⌿ ⏁⊑⟒⟒⌿ ⌇⟒⟒⌿ (15⍜⍀⌿ ⋔⍜⍀⍜⍀⌿ ⎍⍀⌿ -⎍⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌇⊬⌇_⎎⎍⌰⌰⏃☊☊⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⍜⎐⟒⍀⍀⟟⎅⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⎎⎍⌰⌰⏃☊☊⏃⍀⌿ --⍀⟒☌⍜⍀⌿ '/⏃⎍⏁⊑_⎎⎍⌰⌰_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⟒⌖⟒⟒⌿ '☍⎍⏚⏃⍀⌿ ☊⍀⟒⏃⏁⎍⍀⌿ ☊⌰⎍⌇⏁⟒⍀⍀⍜⌰⟒⏚⟟⋏⎅⎍⍀⌿ ⎎⎍⌰⌰-⏃☊☊⍜⍀⌿ --☊⌰⎍⌇⏁⟒⍀⍀⍜⌰⟒=☊⌰⎍⌇⏁⟒⍀-⏃⎅⋔⏃⍀⌿ --⎍⌇⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⍜⍀⌿ ☌⍀⍜⍀⌿ ⎎⟒⟒⌿ ⏃⎅⋔⟟⋏⟟⌇⏁⍀⏃⏁⟟⎐⎍⍀⌿ ⏃☊☊⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⏃⍀⌿ ⟒⟒⌿ ⏃⋉⎍⍀⟒⟒⌿ ⟒⟒⌿ ☌⍜⍜☌⌰⏃⍀⌿ ☌☍⟒⟒⌿ ⎍⍀⌿ ⏃⌿⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏁⊬⌿⏃⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⏃⍀⌿ -⏃⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⎍⋏⟟⎎⊬_☊⍜⋏⏁⍀⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌇⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⋔⏃⌇⏁⟒⍀⋏⍜⎅⟒::⎍⋏⟟⎎⍜⍀⌿ --⌿⏃⏁⏁⟒⟒⌿ '/⋏⍜⎅⟒_(?:⋏⟒⎍⍀⏃⌰|⎐⟟⍀⏁⎍⏃⌰|⟟⌇⍜|⋔⟒⌇⊑)_[0-9]+$/⏃⍀⌿ --⏃☊⏁⏃⍀⌿ '☍⎍⏚⍜⍀⌿ ⌰⏃⏚⎍⍀⌿ ⋏⍜⎅⎍⍀⌿ $1⍜⍀⌿ ⋔⏃⌇⏁⟒⍀=⏁⍀⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⎍⍀⌿ ⎍⋏⟟⎎⟒⟒⌿ ⋏⍜⎅⍜⍀⌿ ☊⍜⋏⏁⍀⏃⍀⌿ ⟟⋏⏁⟒⟒⌿ ⍜⍀⌿ ⋔⏃⌇⏁⍜⍀⌿ ⋏⍜⎅⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⎅⟟⌇⏁⍀⟟⏚⎍⏁⎍⍀⌿ ⍜⍀⌿ ⋏⟒⏁⍙⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⍜⍀⌿ ⏃⎍⏁⍜-⏁⍀⟟☌☌⟒⍀⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⎍⍀⌿ -⍜⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⍜⎐⟒⍀⍀⟟⎅⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌿⟒⍀⌇⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⍜⍀⌿ ⋔⟒⋔☊⏃☊⊑⟒::⍜⎐⟒⍀⍀⟟⎅⟒⟒⌿ --⍀⟒☌⏃⍀⌿ '/☊⏃☊⊑⟒_(?:⌇⟒⌇⌇⟟⍜⋏|⎐⟒☊⏁⍜⍀)_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ --⏃☊⏁⎍⍀⌿ '⍀⟒⎅⟟⌇-☊⌰⏃⍀⌿ ☊⍜⋏⎎⟒⟒⌿ ⌇⍜⍀⌿ ⋔⏃⌖⋔⟒⋔⍜⍀⊬-⌿⍜⌰⟟☊⟒⟒⌿ ⋏⍜⟒⎐⟟☊⏁⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ⋔⏃☍⟒⟒⌿ ⍀⟒⎅⎍⍀⌿ ☊⏃☊⊑⎍⍀⌿ ⟒⋏⏁⍀⍜⍀⌿ ⌿⟒⍀⋔⏃⋏⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⍀⟒⎅⏃⍀⌿ ⍜⍀⌿ ☊⊑⏃⏁⏚⟒⟒⌿ ⍀⍜⍀⌿ ⌇⊬⌇⏁⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏁⊬⌿⍜⍀⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌰⍜☌☌⍜⍀⌿ ⌰⍜☍⟒⟒⌿ ⎍⍀⌿ -⍜⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⎐⟒☊⏁⍜⍀_⎍⌿⎅⏃⏁⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⟟⋏⟊⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⎐⟒☊⏁⍜⍀⎅⏚::⎎⍜⍀☊⟒⎍⌿⎅⏃⏁⍜⍀⌿ --⌿⏃⏁⏁⍜⍀⌿ '/⎐⟒☊⏁⍜⍀_(?:☊⍜⋏⏁⟒⌖⏁|⋔⟒⋔⍜⍀⊬)_[0-9]+$/⟒⟒⌿ --⏃☊⏁⎍⍀⌿ '⌿⌇⍾⌰⏃⍀⌿ -☊⍜⍀⌿ "⎍⌿⎅⏃⏁⎍⍀⌿ ⎐⟒☊⏁⍜⍀⌿ ⌇⎍⍀⌿ ⟒⋔⏚⟒⎅⎅⟟⋏☌=⟒⋏☊⍜⎅⟒_⟒⋔⏚⟒⎅⎅⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⏃⍀⌿ ⎎⍜⍀☊⍜⍀⌿ ⍀⟒⏃⌰-⏁⟟⋔⏃⍀⌿ ⎐⟒☊⏁⍜⍀⌿ ⎍⌿⎅⏃⏁⎍⍀⌿ ⎎⎍⍀⌿ ⍀⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⌿⍜⌇⏁☌⍀⍜⍀⌿ ⍙⎍⍀⌿ ⌿☌⎐⟒☊⏁⟒⟒⌿ ⍀⏃☌-⏚⏃⌇⎍⍀⌿ ⌰⌰⋔⌇]
⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏁⊬⌿⍜⍀⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⟒⟒⌿ -⟒⟒⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋔⏃⌖⟟⋔⟟⋉⟒_☌⌿⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌇⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃⎍⏁⍜⌇☊⏃⌰⟒::⋔⏃⌖⟟⋔⟟⋉⟒☌⌿⏃⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍜⎅_(?:⌰⌰⋔|⟟⋏⎎⟒⍀⟒⋏☊⟒)_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ --⌇⏃⍀⌿ '☍⎍⏚⍜⍀⌿ ⏃⎍⏁⍜⌇☊⏃⌰⟒⟒⌿ --⋔⏃⍀⌿ --☊⌿⎍-⌿⟒⍀☊⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟟⋔⌿⟒⟒⌿ ⋔⏃⌖⟟⋔⟟⋉⏃⍀⌿ ☌⌿⍜⍀⌿ ⌿⍜⍀⌿ ⌇☊⏃⌰⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⍜⍀⌿ ⍜⍀⌿ ⍙⎍⍀⌿ ☌4⎅⋏.⌖⌰⏃⍀☌⍜⍀⌿ ⋏⎐⟟⎅⟒⟒⌿ ☌⌿⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏁⊬⌿⍜⍀⌿ ⏃⎍⏁⍜-⌇☊⏃⌰⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍙⍜⍀☍⎍⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⊑⌿⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⏃⍀⌿ -⎍⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⟒⌖⟒☊_⍜⎐⟒⍀⍀⟟⎅⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⟟⋏⟊⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⟒⌖⟒☊⍜⎐⟒⍀⍀⟟⎅⟒⟒⌿ --⌿⏃⏁⏁⎍⍀⌿ '/☊⋔⎅_⍜⎐⟒⍀⍀⟟⎅⟒_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ --⟒⌖⟒⟒⌿ '⎅⍜☊☍⍜⍀⌿ ⟒⌖⎍⍀⌿ -⍜⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⎍⍀⌿ ⌇⊑⟒⟒⌿ -☊⏃⍀⌿ $1'
⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟟⋔⌿⟒⟒⌿ ⍜⎐⟒⍀⍀⟟⎅⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⍙⎍⍀⌿ ⟒⌰⟒⎐⏃⏁⟒⟒⌿ ⌿⍀⟟⎐⟟⌰⟒☌⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⌿⍜⌇⍜⍀⌿ ⌇⊬⌇⏁⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⏃⍀⌿ ⏃⌿⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏁⊬⌿⟒⟒⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⏃⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌰⍜☌☌⟒⟒⌿ ⌰⍜☍⎍⍀⌿ ⟒⟒⌿ -⎍⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋔⌰_⊑⊬⌿⟒⍀⏁⎍⋏⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⍜⍀⌿ ⋔⌰::⊑⊬⌿⟒⍀⏁⎍⋏⏃⍀⌿ --⍀⟒☌⏃⍀⌿ '/⋔⍜⎅⟒⌰_(?:⌰⌰⋔|⏁⎍⋏⟟⋏☌)_[0-9]+$/⟒⟒⌿ --⏃☊⏁⎍⍀⌿ '⌿⊬⏁⊑⏃⍀⌿ ⊑⊬⌿⟒⍀⏁⎍⋏⟒_⋔⍜⎅⟒⌰.⌿⏃⍀⌿ --⋔⍜⎅⟒⟒⌿ $1'
⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟟⋔⌿⟒⟒⌿ ⍜⌿⏁⟟⋔⟟⋉⏃⍀⌿ ⍜⍀⌿ ⋔⍜⎅⟒⟒⌿ ⍙⟒⟒⌿ ⊑⊬⌿⟒⍀⌿⏃⍀⏃⋔⟒⏁⏃⍀⌿ ⏁⎍⋏⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⏁⟒⋏⌇⍜⍀⎎⌰⍜⍀⌿ ⌿⊬⏁⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⋔⌰⟒⟒⌿ ⌿⟟⌿⟒⌰⟟⋏⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏁⊬⌿⍜⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⎍⍀⌿ -⎍⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋏⟒⏁_⏚⊬⌿⏃⌇⌇⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏚⊬⌿⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⋏⟒⏁⏚⊬⌿⏃⌇⌇::⏃⍀⌿ --⌿⏃⏁⏁⟒⟒⌿ '/⎎⍙_⍀⎍⌰⟒_[0-9]+$/⏃⍀⌿ --⏃☊⏁⟒⟒⌿ '⟟⌿⏁⏃⏚⌰⎍⍀⌿ -⌿⏃⍀⌿ ⟟⋏⌿⏃⍀⌿ ⏃☊☊⟒⟒⌿ &&⍜⍀⌿ ⟟⌿⏁⏃⏚⌰⏃⍀⌿ -⌿⎍⍀⌿ ⍜⎍⏁⌿⟒⟒⌿ ⏃☊☊⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟟⋔⌿⍜⍀⌿ ⍜⌿⍜⍀⌿ ⎍⍀⌿ ⋏⟒⏁⍙⍜⍀⌿ ⏁⍀⏃⎎⎎⎍⍀⌿ ⎎⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⌰⟟⋏⏃⍀⌿ ⌇⊬⌇⏁⏃⍀⌿ ⎍⍀⌿ ⎐⌿☊,⎍⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⏃⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⋔⎍⌰⏃⏁⍜⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⟒⟒⌿ ⟟⌇⍜⍀⌿ 15408

⟒⟒⌿ ⎍⍀⌿ -⍜⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⏚⏃☊☍⎍⌿_⟟⋏⌇⏁⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌿⟒⍀⌇⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⏚⏃☊☍⎍⌿::⟟⋏⌇⏁⏃⋏⏁⌿⏃⍀⌿ --⍀⟒☌⎍⍀⌿ '/⏚⏃☊☍⎍⌿_⟟⋏⌇⏁⏃⋏⏁_[0-9]+$/⟒⟒⌿ --⏃☊⏁⍜⍀⌿ '⌿☌_⏚⏃⌇⟒⏚⏃☊☍⍜⍀⌿ --⍙⏃⌰-⋔⟒⏁⊑⍜⎅=⌇⏁⍀⏃⍀⌿ |⟒⟒⌿ ⎍⍀⌿ ⌇3⏃⍀⌿ ☊⌿⟒⟒⌿ -⍜⍀⌿ ⌇3://⏚⏃☊☍⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ⏁⍀⟟☌☌⍜⍀⌿ ⟟⋏⌇⏁⟒⟒⌿ ⌿⟒⟒⌿ ⏚⏃☊☍⟒⟒⌿ ⏁⍜⍀⌿ ⌇3
⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⌿⍜⌇⏁☌⍀⟒⟒⌿ ⎍⍀⌿ ⌇3,⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏁⊬⌿⏃⍀⌿ ☊⍀⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⌇⏁⍜⍀⏃☌⎍⍀⌿ ⏃⍀⌿ ⌇3
⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌰⟟⎎⟒☊⊬☊⌰⟒⟒⌿ 7⎍⍀⌿ ⎅⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⌰⍜☌☌⎍⍀⌿ ⌰⍜☍⏃⍀⌿ ⟒⟒⌿ -⟒⟒⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⍀⏚⏃☊_⎎⍜⍀☊⟒⌇⎍⌿⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⍜⎐⟒⍀⍀⟟⎅⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⍀⏚⏃☊::⎎⍜⍀☊⟒⌇⎍⌿⟒⍀⎍⌇⏃⍀⌿ --⌿⏃⏁⏁⍜⍀⌿ '/⎍⌇⟒⍀_⌇⎍⌿⟒⍀_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ --⏃☊⏁⏃⍀⌿ '☍⎍⏚⎍⍀⌿ ☊⍀⟒⏃⏁⟒⟒⌿ ☊⌰⎍⌇⏁⟒⍀⍀⍜⌰⟒⏚⟟⋏⎅⎍⍀⌿ $1-⌇⎍⌿⎍⍀⌿ --☊⌰⎍⌇⏁⟒⍀⍀⍜⌰⟒=☊⌰⎍⌇⏁⟒⍀-⏃⎅⋔⎍⍀⌿ --⎍⌇⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟟⋔⌿⍜⍀⌿ ⎎⍜⍀☊⍜⍀⌿ ⌇⎍⌿⟒⍀⎍⌇⏃⍀⌿ ⌿⍀⟟⎐⟟⌰⟒☌⏃⍀⌿ ⏃☊⍀⏃⍀⌿ ⋏⏃⋔⟒⌇⌿⏃☊⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⍜⍀⌿ ⍜⍀⌿ ⏃⋉⎍⍀⍜⍀⌿ ⎍⍀⌿ ☌⍜⍜☌⌰⏃⍀⌿ ☌☍⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏁⊬⌿⎍⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⏃⍀⌿ ⟟⌇⏃⍀⌿ 15408

⍜⍀⌿ ⍜⍀⌿ -⟒⟒⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌇⊬⌇_⊑⟟⟊⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏚⊬⌿⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌇⊬⌇⊑⟟⟊⟒⟒⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍀⍜☊⟒⌇⌇_(?:☊⍀⟟⏁⟟☊⏃⌰|⌇⊬⌇⏁⟒⋔)_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ --⟒⌖⏃⍀⌿ '☍⍜⍀⌿ -9⏃⍀⌿ $1⎍⍀⌿ &&⏃⍀⌿ ⎅⍜☊☍⎍⍀⌿ ⍀⍜⍀⌿ -⏃⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⟒⟒⌿ $2'
⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟟⋔⌿⍜⍀⌿ ⍀⟒⌿⌰⏃☊⏃⍀⌿ ☊⍀⟟⏁⟟☊⎍⍀⌿ ⌿⍀⍜☊⟒⌇⌇⍜⍀⌿ ⍙⟒⟒⌿ ☊⎍⌇⏁⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⌰⟟⋏⎍⍀⌿ ⌇⊬⌇⏁⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏁⊬⌿⟒⟒⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⋔⎍⌰⏃⏁⏃⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⎍⍀⌿ ⌰⍜☍⏃⍀⌿ ⟒⟒⌿ -⟒⟒⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⎎⏃⟟⌰⍜⎐⟒⍀_⋏⍜⎅⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⍀⟒⏚⏃⌰⏃⋏☊⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⋔⏃⌇⏁⟒⍀⋏⍜⎅⟒::⎎⏃⟟⌰⍜⎐⍜⍀⌿ --⌿⏃⏁⏁⍜⍀⌿ '/⋏⍜⎅⟒_⋔⏃⌇⏁⟒⍀_[0-9]+$/⏃⍀⌿ --⏃☊⏁⍜⍀⌿ '☍⎍⏚⎍⍀⌿ ⌿⍀⍜⋔⍜⏁⟒⟒⌿ $1'
⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟟⋔⌿⏃⍀⌿ ⏁⍀⟟☌☌⏃⍀⌿ ⎎⏃⟟⌰⍜⎐⟒⟒⌿ ⏁⏃⍀⌿ ⏚⏃☊☍⏃⍀⌿ ⋔⏃⌇⏁⎍⍀⌿ ⋏⍜⎅⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⍜⍀⌿ ⎅⟟⌇⏁⍀⟟⏚⎍⏁⟒⟒⌿ ⏃⍀⌿ ⋏⟒⏁⍙⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏁⊬⌿⎍⍀⌿ ⏃⎍⏁⍜-⏁⍀⟟☌☌⟒⍀⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ☌⍀⏃⎎⏃⋏⏃⍀⌿ ⎍⍀⌿ -⏃⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⎎⌰⎍⌇⊑_⋔⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌿⟒⍀⌇⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⋔⟒⋔☊⏃☊⊑⟒::⎎⍜⍀☊⟒⎎⌰⎍⍀⌿ --⍀⟒☌⎍⍀⌿ '/☊⏃☊⊑⟒_⏃⌰⌰_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ --⏃☊⏁⟒⟒⌿ '⍀⟒⎅⟟⌇-☊⌰⎍⍀⌿ ⎎⌰⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟟⋔⌿⏃⍀⌿ ⍀⟒⌇⎍⍀⌿ ⍜⍀⌿ ⌇⟒⌇⌇⏃⍀⌿ ⌇⏁⏃⏁⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⍀⟒⎅⟒⟒⌿ ⟒⟒⌿ ☊⊑⏃⏁⏚⍜⍀⌿ ⍀⎍⍀⌿ ⌇⊬⌇⏁⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏁⊬⌿⏃⍀⌿ ⏚⏃☊☍☌⍀⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⎍⍀⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⏃⍀⌿ ⏃⍀⌿ -⏃⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌇☊⏃⌰⟒_⟟⋏⎅⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⟟⋏⟊⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⎐⟒☊⏁⍜⍀⎅⏚::⌇☊⏃⌰⟒⟟⋏⎅⎍⍀⌿ --⌿⏃⏁⏁⍜⍀⌿ '/⟟⋏⎅⟒⌖_⎐⟒☊⏁⍜⍀_[0-9]+$/⏃⍀⌿ --⏃☊⏁⎍⍀⌿ '⌿⌇⍾⌰⏃⍀⌿ -☊⍜⍀⌿ "☊⍀⟒⏃⏁⏃⍀⌿ ⟟⋏⎅⎍⍀⌿ ⟟⎅⌖_⌇☊⏃⌰⍜⍀⌿ ⟒⟒⌿ ⎐⟒☊⏁⍜⍀⌿ ⎍⌇⎍⍀⌿ ☌⎍⍀⌿ (⟒⋔⏚⟒⎅⎅⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⎍⍀⌿ ⍜⌿⏁⟟⋔⟟⋉⟒⟒⌿ ⎐⟒☊⏁⟒⟒⌿ ⌇⟒⟒⌿ ⌿⟒⍀⎎⍜⍀⋔⏃⋏☊⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⌿⍜⌇⏁☌⍀⏃⍀⌿ ⍙⟒⟒⌿ ⌿☌⎐⟒☊⏁⟒⟒⌿ ⍀⏃☌-⏚⏃⌇⏃⍀⌿ ⌰⌰⋔⌇]
⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏁⊬⌿⍜⍀⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⟒⟒⌿ -⟒⟒⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⏚⏃⌰⏃⋏☊⟒_⌰⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌇⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃⎍⏁⍜⌇☊⏃⌰⟒::⏚⏃⌰⏃⋏☊⟒⌰⟒⟒⌿ --⍀⟒☌⎍⍀⌿ '/⌿⍜⎅_(?:☊⌿⎍|☌⌿⎍)_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⌇⏃⍀⌿ '☍⎍⏚⏃⍀⌿ ⏃⎍⏁⍜⌇☊⏃⌰⏃⍀⌿ --⏚⏃⌰⏃⋏☊⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ⏚⏃⌰⏃⋏☊⎍⍀⌿ ☊⌿⎍/☌⌿⍜⍀⌿ ⌰⍜⍀⌿ ⏃☊⍀⟒⟒⌿ ⌿⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⏃⍀⌿ ⟒⟒⌿ ⏃⌿⟟/⟟⋏⎎⟒⍀⟒⋏☊⎍⍀⌿ ⌿⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⎍⍀⌿ ⏃⎍⏁⍜-⌇☊⏃⌰⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⍙⍜⍀☍⎍⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⍜⍀⌿ ⊑⌿⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ☌⍀⏃⎎⏃⋏⎍⍀⌿ ⟒⟒⌿ -⍜⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⟟⋏⟊⟒☊⏁_⌇⊑⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⟟⋏⟊⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⟟⋏⟊⟒☊⏁⌇⊑⍜⍀⌿ --⌿⏃⏁⏁⍜⍀⌿ '/☊⍜⋏⏁⏃⟟⋏⟒⍀_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⟒⌖⟒⟒⌿ '☍⎍⏚⍜⍀⌿ ⟒⌖⟒⟒⌿ -⟒⟒⌿ $1⏃⍀⌿ --⏃⍀⌿ /⏚⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⟒⟒⌿ ⌿⍀⍜⎐⟟⎅⎍⍀⌿ ⎅⟟⍀⟒⟒⌿ ⏃☊☊⍜⍀⌿ ⏁⏃⍀⌿ ⏃⍀⌿ ☊⍜⋏⏁⏃⟟⋏⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⍜⍀⌿ ⏃⍀⌿ ☊⍜⋏⏁⏃⟟⋏⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏁⊬⌿⏃⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⍜⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⟒⟒⌿ -⍜⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋔⌰_⍀⟒⏁⍀⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⋔⌰::⎎⍜⍀☊⟒⍀⟒⏁⍀⏃⟟⋏⟒⟒⌿ --⍀⟒☌⟒⟒⌿ '/⋔⍜⎅⟒⌰_⍀⟒⏁⍀⏃⟟⋏_[0-9]+$/⟒⟒⌿ --⏃☊⏁⍜⍀⌿ '⌿⊬⏁⊑⎍⍀⌿ ⍀⟒⏁⍀⏃⟟⋏_⋔⍜⎅⟒⌰.⌿⎍⍀⌿ --⎅⏃⏁⏃⍀⌿ ☊⊑⟒⏃⏁_⌰⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟟⋔⌿⏃⍀⌿ ⍀⟒⏁⍀⏃⍀⌿ ⋔⌰⍜⍀⌿ ⋔⍜⎅⏃⍀⌿ ⍙⏃⍀⌿ ⎍⌿⎅⏃⏁⟒⟒⌿ ⌰⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⏁⟒⋏⌇⍜⍀⎎⌰⏃⍀⌿ ⌿⊬⏁⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⋔⌰⟒⟒⌿ ⌿⟟⌿⟒⌰⟟⋏⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⌿⟒⍀⌇⟟⌇⏁⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⎍⍀⌿ ☊⟒⌰⟒⍀⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⏃⍀⌿ -⍜⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋏⟒⏁_⎎⍜⍀☊⟒⍀⍜⎍⏁⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏚⊬⌿⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⋏⟒⏁::⎎⍜⍀☊⟒⍀⍜⎍⏁⍜⍀⌿ --⌿⏃⏁⏁⟒⟒⌿ '/⍀⍜⎍⏁⟒_⎎⍜⍀☊⟒_[0-9]+$/⏃⍀⌿ --⏃☊⏁⟒⟒⌿ '⍜⍀⌿ ⍀⍜⎍⏁⟒⟒⌿ ⟒⟒⌿ ⎅⟒⎎⏃⍀⌿ ⎐⟒⟒⌿ $1'
⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⟟⋔⌿⎍⍀⌿ ⍀⟒⎅⟟⍀⟒⟒⌿ ⍜⍀⌿ ⏁⍀⏃⎎⎎⍜⍀⌿ ⎎⟒⟒⌿ ⌿⟒⍀⎎⍜⍀⋔⏃⋏☊⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⌰⟟⋏⍜⍀⌿ ⌇⊬⌇⏁⏃⍀⌿ ⏃⍀⌿ ⎐⌿☊,⏃⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⏁⊬⌿⎍⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⍜⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⟒⟒⌿ ⎍⍀⌿ -⍜⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⏚⏃☊☍⎍⌿_⍀⟒⌿⌰⟟☊⏃⏁⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌿⟒⍀⌇⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⏚⏃☊☍⎍⌿::⎎⍜⍀☊⟒⍀⟒⌿⌰⟟☊⏃⏁⟒⟒⌿ --⍀⟒☌⟒⟒⌿ '/⍀⟒⌿⌰⟟☊⏃_[0-9]+$/⟒⟒⌿ --⏃☊⏁⟒⟒⌿ '⌿☌_☊⏁⌰⟒⟒⌿ ⌿⍀⍜⋔⍜⏁⟒⟒⌿ -⎅⟒⟒⌿ /⎐⏃⍀/⌰⟟⏚/⌿⍜⌇⏁☌⍀⟒⌇⍾⌰/⎅⏃⏁⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟟⋔⌿⎍⍀⌿ ⎎⍜⍀☊⟒⟒⌿ ⌿⍜⌇⏁☌⍀⍜⍀⌿ ⍀⟒⌿⌰⟟☊⏃⏁⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⌿⍜⌇⏁☌⍀⎍⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⎍⍀⌿ ☊⍀⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⎍⍀⌿ ⌰⍜☍⎍⍀⌿ ⍜⍀⌿ -⍜⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⍀⏚⏃☊_⎅⟟⌇⏃⏚⌰⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⍜⎐⟒⍀⍀⟟⎅⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⍀⏚⏃☊::⎅⟟⌇⏃⏚⌰⟒☊⊑⍜⍀⌿ --⌿⏃⏁⏁⎍⍀⌿ '/⍀⏚⏃☊_☊⊑⟒☊☍_[0-9]+$/⟒⟒⌿ --⏃☊⏁⟒⟒⌿ '☍⎍⏚⟒⟒⌿ ⎅⟒⌰⟒⏁⎍⍀⌿ ☊⌰⎍⌇⏁⟒⍀⍀⍜⌰⟒⏚⟟⋏⎅⟒⟒⌿ --⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟟⋔⌿⏃⍀⌿ ⍀⟒⋔⍜⎐⏃⍀⌿ ⍀⏚⟒⟒⌿ ⍀⟒⌇⏁⍀⟟☊⏁⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⏃⍀⌿ ⏃⍀⌿ ⏃⋉⎍⍀⎍⍀⌿ ⎍⍀⌿ ☌⍜⍜☌⌰⎍⍀⌿ ☌☍⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏁⊬⌿⏃⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⍜⍀⌿ ⟟⌇⎍⍀⌿ 15408

⏃⍀⌿ ⎍⍀⌿ -⍜⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋔⟒⋔_⟟⋏⟊⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⟟⋏⟊⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⋔⟒⋔⟟⋏⟊⎍⍀⌿ --⍀⟒☌⎍⍀⌿ '/⋔⟒⋔⍜⍀⊬_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ --⟒⌖⏃⍀⌿ '☊⍜⍀⌿ -⌖⏃⍀⌿ ⌿⍜⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⋔⟒⋔⍜⍀⏃⍀⌿ --⎅⏃⏁⎍⍀⌿ "{\"☊⍜⋏⏁⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟟⋔⌿⟒⟒⌿ ⟒⋏⊑⏃⋏☊⟒⟒⌿ ⟒⟒⌿ ⍀⟒⌇⌿⍜⋏⌇⎍⍀⌿ ⍙⍜⍀⌿ ☊⎍⌇⏁⎍⍀⌿ ⋔⟒⋔⍜⍀⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⟒⟒⌿ ☊⊑⏃⏁⏚⎍⍀⌿ ⍀⏃⍀⌿ ⌇⊬⌇⏁⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏁⊬⌿⎍⍀⌿ ⏚⏃☊☍☌⍀⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌰⍜☌☌⟒⟒⌿ ⌰⍜☍⍜⍀⌿ ⏃⍀⌿ -⟒⟒⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌇☊⏃⌰⟒_☌⌰⍜⏚⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌇⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⋔⏃⌇⏁⟒⍀⋏⍜⎅⟒::⌇☊⏃⌰⟒☌⌰⍜⏚⏃⍀⌿ --⌿⏃⏁⏁⟒⟒⌿ '/⋏⍜⎅⟒_⏃⌰⌰_[0-9]+$/⏃⍀⌿ --⏃☊⏁⍜⍀⌿ '☍⎍⏚⎍⍀⌿ ⌇☊⏃⌰⍜⍀⌿ --⍀⟒⌿⌰⟟☊⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟟⋔⌿⟒⟒⌿ ⌇☊⏃⌰⎍⍀⌿ ⎍⍀⌿ ⋏⍜⎅⍜⍀⌿ ⎎⟒⟒⌿ ⋔⏃⌖⟟⋔⎍⍀⌿ ☊⏃⌿⏃☊⟟⏁⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⍜⍀⌿ ⎅⟟⌇⏁⍀⟟⏚⎍⏁⟒⟒⌿ ⎍⍀⌿ ⋏⟒⏁⍙⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⏁⊬⌿⎍⍀⌿ ⏃⎍⏁⍜-⏁⍀⟟☌☌⟒⍀⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⎍⍀⌿ -⍜⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⋔⟒⋔_⏚⏃☊☍⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌿⟒⍀⌇⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⋔⟒⋔☊⏃☊⊑⟒::⎎⍜⍀☊⟒⏚⏃☊☍⏃⍀⌿ --⍀⟒☌⎍⍀⌿ '/☊⏃☊⊑⟒_⏚⏃☊☍⎍⌿_[0-9]+$/⍜⍀⌿ --⏃☊⏁⍜⍀⌿ '⍀⟒⎅⟟⌇-☊⌰⍜⍀⌿ ⏚☌⌇⏃⎐⎍⍀⌿ |⎍⍀⌿ ⏃⍀⌿ ⌇3⍜⍀⌿ ☊⌿⟒⟒⌿ -⍜⍀⌿ ⌇3://⏚⏃☊☍⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟟⋔⌿⎍⍀⌿ ⏚⏃⍀⌿ ⎍⍀⌿ ⍀⟒⎅⟒⟒⌿ ⎅⏃⏁⏃⍀⌿ ⏁⎍⍀⌿ ⌇3
⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⍀⟒⎅⍜⍀⌿ ⎍⍀⌿ ⌇3,⎍⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⟒⟒⌿ ☊⍀⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌇⏁⍜⍀⏃☌⟒⟒⌿ ⍜⍀⌿ ⌇3
⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌰⟟⎎⟒☊⊬☊⌰⍜⍀⌿ 7⎍⍀⌿ ⎅⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌰⍜☌☌⟒⟒⌿ ⌰⍜☍⟒⟒⌿ ⎍⍀⌿ -⍜⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⎐⟒☊⏁⍜⍀_⍀⟒⟟⋏⎅⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⟟⋏⟊⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⎐⟒☊⏁⍜⍀⎅⏚::⎎⍜⍀☊⟒⍀⟒⟟⋏⎅⟒⟒⌿ --⌿⏃⏁⏁⏃⍀⌿ '/⟟⋏⎅⟒⌖_⍀⟒⟟⋏⎅⟒⌖_[0-9]+$/⍜⍀⌿ --⏃☊⏁⏃⍀⌿ '⌿⌇⍾⌰⏃⍀⌿ -☊⟒⟒⌿ "⍀⟒⟟⋏⎅⍜⍀⌿ ⏁⏃⏚⌰⎍⍀⌿ ⎐⟒☊⏁⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⍜⍀⌿ ⍜⌿⏁⟟⋔⟟⋉⍜⍀⌿ ⎐⟒☊⏁⍜⍀⌿ ⌇⟒⟒⌿ ⎎⎍⍀⌿ ⍀⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⌿⍜⌇⏁☌⍀⟒⟒⌿ ⍙⍜⍀⌿ ⌿☌⎐⟒☊⏁⟒⟒⌿ ⍀⏃☌-⏚⏃⌇⟒⟒⌿ ⌰⌰⋔⌇]
⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⍜⍀⌿ ⏃⍀⌿ -⎍⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌇☊⏃⌰⟒_⋔⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⌇⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⎍⏁⍜⌇☊⏃⌰⟒::⎎⍜⍀☊⟒⋔⍜⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍜⎅_⏃⌰⌰_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ --⌇⎍⍀⌿ '☍⎍⏚⎍⍀⌿ ⏃⎍⏁⍜⌇☊⏃⌰⏃⍀⌿ --⋔⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟟⋔⌿⟒⟒⌿ ⎎⍜⍀☊⟒⟒⌿ ⋔⏃⌖⟟⋔⍜⍀⌿ ⌿⏃⍀⌿ ⌇☊⏃⌰⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⏃⍀⌿ ⎍⍀⌿ ⏃⌿⟟/⟟⋏⎎⟒⍀⟒⋏☊⏃⍀⌿ ⌿⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏁⊬⌿⎍⍀⌿ ⏃⎍⏁⍜-⌇☊⏃⌰⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⏃⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⊑⌿⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ☌⍀⏃⎎⏃⋏⍜⍀⌿ ⏃⍀⌿ #⟒⟒⌿ ⌿⍀⍜⋔⌿⏁-⌇⌿⟒☊⟟⎎⏃⍀⌿ ⋔⏃⌇⏁⟒⟒⌿ ☊⊑⎍⍀⌿ ⎎⍀⎍⍀⌿ ⎎⏃⍀⌿ ⌇⟒⟒⌿ (25)
⍜⍀⌿ ⍜⍀⌿ -⎍⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⌇⟒⋔⏃⋏⏁⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⍀⟒⍙⍀⟟⏁⟒⟒⌿ --⍀⟒☌⍜⍀⌿ '/⌿⍀⍜⋔⌿⏁_⌇⟒⋔⏃⋏⏁⟟☊_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ --⟒⌖⏃⍀⌿ '☊⍜⍀⌿ -⌖⟒⟒⌿ ⌿⎍⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⍀⟒⍙⍀⟟⏁⍜⍀⌿ --⎅⏃⏁⎍⍀⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$(⌿⊬⏁⊑⍜⍀⌿ ⟒⋔⏚⟒⎅_⌿⍀⍜⋔⌿⏁.⌿⎍⍀⌿ --⟟⋏⌿⏃⍀⌿ $1)\"}"'
⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟟⋔⌿⏃⍀⌿ ⟒⋏⊑⏃⋏☊⏃⍀⌿ ⟒⟒⌿ ⍀⟒⌇⌿⍜⋏⌇⍜⍀⌿ ⍙⟒⟒⌿ ⌇⟒⋔⏃⋏⏁⟒⟒⌿ ⟒⋔⏚⟒⎅⎅⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⍀⏃☌-⏚⏃⌇⍜⍀⌿ ⌰⌰⋔⌇,⏃⍀⌿ ⌇⟒⋏⏁⟒⋏☊⟒-⏁⍀⏃⋏⌇⎎⍜⍀⋔⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏁⊬⌿⏃⍀⌿ ⏚⏃☊☍☌⍀⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍙⍜⍀☍⟒⟒⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⟒⟒⌿ ⌰⍜☍⎍⍀⌿ ⍜⍀⌿ -⍜⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⏚⊬⌿⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⏃⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⟟⋏⟊⏃⍀⌿ --⍀⟒☌⍜⍀⌿ '/⌿⍀⍜⋔⌿⏁_⏚⊬⌿⏃⌇⌇_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ --⟒⌖⎍⍀⌿ '☊⎍⍀⌿ -⌖⍜⍀⌿ ⌿⏃⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⟟⋏⟊⎍⍀⌿ --⎅⏃⏁⟒⟒⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$1\",\"⏚⊬⌿⏃⌇⌇\":⏁⍀⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⏃⍀⌿ ⏚⊬⌿⏃⌇⌇⍜⍀⌿ ⍜⍀⌿ ☊⍜⋏⏁⎍⍀⌿ ⎎⟟⌰⏁⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⎍⍀⌿ ☊⊑⏃⍀⌿ ⏃⌿⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⏃⍀⌿ ⏃⌿⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⏃⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⟒⟒⌿ ☊⟒⌰⟒⍀⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⏃⍀⌿ -⍜⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⍜⌿⏁⟟⋔⟟⋉⎍⍀⌿ --⍀⟒☌⏃⍀⌿ '/⌿⍀⍜⋔⌿⏁_⍜⌿⏁_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ --⟒⌖⟒⟒⌿ '☊⎍⍀⌿ -⌖⏃⍀⌿ ⌿⟒⟒⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⍜⌿⏁⟟⋔⟟⋉⍜⍀⌿ --⎅⏃⏁⎍⍀⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$(⌿⊬⏁⊑⟒⟒⌿ ⍜⌿⏁⟟⋔⟟⋉⟒_⌿⍀⍜⋔⌿⏁.⌿⏃⍀⌿ --⟟⋏⌿⟒⟒⌿ $1⏃⍀⌿ --⋔⏃⌖-⌰⏃⍀⌿ 50)\"}"'
⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟟⋔⌿⎍⍀⌿ ⋔⟟⋏⟟⋔⟟⋉⟒⟒⌿ ⟒⟒⌿ ⍀⟒⌇⌿⍜⋏⌇⎍⍀⌿ ⌰⏃⏁⟒⋏☊⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⎎⏃⌇⏁⏃⌿⟟-⏚⏃⌇⏃⍀⌿ ⎍⍀⌿ ⌇⟒⍀⎐⟟☊⎍⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏁⊬⌿⍜⍀⌿ ⏃⎍⏁⍜-⏁⍀⟟☌☌⟒⍀⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ☌⍀⏃⎎⏃⋏⍜⍀⌿ ⟒⟒⌿ -⍜⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_☊⍜⋏⏁⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁☊⍜⋏⏁⍜⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍀⍜⋔⌿⏁_☊⍜⋏⏁⟒⌖⏁_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ --⟒⌖⏃⍀⌿ '☊⟒⟒⌿ -⌖⟒⟒⌿ ⌿⎍⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/☊⍜⋏⏁⍜⍀⌿ --⎅⏃⏁⎍⍀⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$1\",\"☊⍜⋏⏁⟒⌖⏁\":\"$(⍀⟒⎅⟟⌇-☊⌰⟒⟒⌿ ☌⍜⍀⌿ ⌇⟒⌇⌇⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ⍀⟒⌇⏁⍜⍀⍜⍀⌿ ☊⍜⋏⎐⟒⍀⌇⏃⏁⟟⍜⋏⏃⍀⌿ ☊⍜⋏⏁⟒⟒⌿ ⎎⟒⟒⌿ ⍀⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⍀⟒⎅⟒⟒⌿ ⎍⍀⌿ ☊⊑⏃⏁⏚⏃⍀⌿ ⍀⟒⟒⌿ ⌇⊬⌇⏁⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⌰⍜☌☌⍜⍀⌿ ⌰⍜☍⏃⍀⌿ ⎍⍀⌿ -⏃⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⎐⟒☊⏁⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⎐⟒☊⏁⎍⍀⌿ --⍀⟒☌⍜⍀⌿ '/⌿⍀⍜⋔⌿⏁_⎐⟒☊⏁⍜⍀_[0-9]+$/⏃⍀⌿ --⟒⌖⟒⟒⌿ '☊⎍⍀⌿ -⌖⏃⍀⌿ ⌿⍜⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⎐⟒☊⏁⟒⟒⌿ --⎅⏃⏁⎍⍀⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$1\",\"⎐⟒☊⏁⎍⍀⌿ -☊⏃⍀⌿ \"⌇⟒⌰⍜⍀⌿ ⟒⋔⏚⟒⎅⎅⍜⍀⌿ ⎎⍀⏃⍀⌿ ⎐⟒☊⏁⍜⍀⌿ ⍙⊑⟒⍀⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ⟒⋏⊑⏃⋏☊⍜⍀⌿ ⍀⟒⌇⌿⍜⋏⌇⍜⍀⌿ ⍙⏃⍀⌿ ⎐⟒☊⏁⏃⍀⌿ ⟒⋔⏚⟒⎅⎅⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⌿⍜⌇⏁☌⍀⟒⟒⌿ ⍙⏃⍀⌿ ⌿☌⎐⟒☊⏁⍜⍀⌿ ⍀⏃☌-⏚⏃⌇⏃⍀⌿ ⌰⌰⋔⌇]
⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⏁⊬⌿⎍⍀⌿ ⏚⏃☊☍☌⍀⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⏃⍀⌿ ⟒⟒⌿ -⟒⟒⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⋔⎍⌰⏁⟟⌰⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⋔⎍⌰⏁⟟⌰⎍⍀⌿ --⍀⟒☌⍜⍀⌿ '/⌿⍀⍜⋔⌿⏁_⌰⏃⋏☌_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ --⟒⌖⍜⍀⌿ '☊⏃⍀⌿ -⌖⏃⍀⌿ ⌿⟒⟒⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⏁⍀⏃⋏⌇⌰⏃⏁⎍⍀⌿ --⎅⏃⏁⎍⍀⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$1\",\"⌰⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟟⋔⌿⟒⟒⌿ ⟒⋏⏃⏚⌰⟒⟒⌿ ⋔⎍⌰⏁⟟⌰⟟⋏☌⟒⟒⌿ ⍜⍀⌿ ⍀⟒⌇⌿⍜⋏⌇⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⎍⍀⌿ ☊⊑⟒⟒⌿ ⏃⌿⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⏃⍀⌿ ⏃⌿⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⌿⟒⍀⌇⟟⌇⏁⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⍜⍀⌿ -⏃⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⌇⏃⎎⟒⏁⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⏚⊬⌿⎍⍀⌿ --⍀⟒☌⍜⍀⌿ '/⌿⍀⍜⋔⌿⏁_⌇⏃⎎⟒⏁⊬_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ --⟒⌖⏃⍀⌿ '☊⍜⍀⌿ -⌖⟒⟒⌿ ⌿⏃⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⏚⊬⌿⏃⍀⌿ --⎅⏃⏁⏃⍀⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$1\",\"⌇⏃⎎⟒⏁⊬\":⎎⏃⌰⌇⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟟⋔⌿⟒⟒⌿ ⏚⊬⌿⏃⌇⌇⏃⍀⌿ ⟒⟒⌿ ⌇⏃⎎⟒⏁⏃⍀⌿ ⋔⟒☊⊑⏃⋏⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⏃⍀⌿ ☊⊑⏃⏁⏚⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⟒⟒⌿ ⏃⌿⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏁⊬⌿⎍⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⋔⎍⌰⏃⏁⏃⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⏃⍀⌿ ⟟⌇⟒⟒⌿ 15408

⍜⍀⌿ ⍜⍀⌿ -⎍⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⌇☊⏃⌰⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⌇☊⏃⌰⏃⍀⌿ --⍀⟒☌⎍⍀⌿ '/⌿⍀⍜⋔⌿⏁_⌇☊⏃⌰⟒_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⟒⌖⍜⍀⌿ '☍⎍⏚⎍⍀⌿ ⌇☊⏃⌰⟒⟒⌿ --⍀⟒⌿⌰⟟☊⏃⍀⌿ ⎅⟒⌿⌰⍜⊬⋔⟒⋏⏁/⌰⌰⋔-⟟⋏⎎⟒⍀⟒⋏☊⎍⍀⌿ &&⏃⍀⌿ ☊⟒⟒⌿ -⌖⎍⍀⌿ ⌿⍜⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⌿⏃⍀⏃⌰⌰⟒⟒⌿ --⎅⏃⏁⎍⍀⌿ "{\"⌿⍀⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟟⋔⌿⎍⍀⌿ ⌇☊⏃⌰⍜⍀⌿ ⌿⍀⟒⟒⌿ ⌿⍀⍜☊⟒⌇⌇⟒⟒⌿ ⏃☊⍀⎍⍀⌿ ☌⌿⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⏃⍀⌿ ⍜⍀⌿ ⎎⏃⌇⏁⏃⌿⟟-⏚⏃⌇⍜⍀⌿ ⟒⟒⌿ ⌇⟒⍀⎐⟟☊⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏁⊬⌿⎍⍀⌿ ⏃⎍⏁⍜-⌇☊⏃⌰⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍙⍜⍀☍⎍⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⍜⍀⌿ ⊑⌿⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⎍⍀⌿ -⎍⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_☊⏃☊⊑⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁☊⏃☊⊑⟒⟒⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍀⍜⋔⌿⏁_☊⏃☊⊑⟒_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ --⟒⌖⎍⍀⌿ '⍀⟒⎅⟟⌇-☊⌰⏃⍀⌿ ⌇⟒⏁⟒⟒⌿ ⌿⍀⎍⍀⌿ 86400⍜⍀⌿ \"$1\"'
⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ☊⏃☊⊑⍜⍀⌿ ⌿⍀⍜⍀⌿ ⎎⏃⍀⌿ ⟒⎎⎎⟟☊⟟⟒⋏☊⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⍀⟒⎅⍜⍀⌿ ⎍⍀⌿ ☊⊑⏃⏁⏚⟒⟒⌿ ⍀⍜⍀⌿ ⌇⊬⌇⏁⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⏁⊬⌿⏃⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⍜⍀⌿ ⌰⍜☍⎍⍀⌿ ⏃⍀⌿ -⍜⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⏃⎅⏃⌿⏁⟟⎐⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⏃⎅⏃⌿⏁⟟⎐⎍⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍀⍜⋔⌿⏁_⏃⎅⏃⌿⏁⟟⎐⟒_[0-9]+$/⍜⍀⌿ --⟒⌖⎍⍀⌿ '☊⏃⍀⌿ -⌖⟒⟒⌿ ⌿⟒⟒⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⏃⎅⏃⌿⏁⟟⎐⎍⍀⌿ --⎅⏃⏁⟒⟒⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$(⌿⊬⏁⊑⍜⍀⌿ ⏃⎅⏃⌿⏁⟟⎐⟒_⍀⟒⍙⍀⟟⏁⟒.⌿⎍⍀⌿ --⟟⋏⌿⎍⍀⌿ $1⎍⍀⌿ --⎎⟒⟒⎅⏚⏃⍀⌿ ⌰⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟟⋔⌿⟒⟒⌿ ⟟⋔⌿⍀⍜⎐⎍⍀⌿ ⌿⍀⎍⍀⌿ ⍙⟒⟒⌿ ⋔⌰⟒⟒⌿ ⎎⟒⟒⎅⏚⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⏁⟒⋏⌇⍜⍀⎎⌰⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⋔⌰⏃⍀⌿ ⌿⟟⌿⟒⌰⟟⋏⍜⍀⌿ ⎍⍀⌿ ⏃⌿⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⍜⍀⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍙⍜⍀☍⎍⍀⌿ ☊⟒⌰⟒⍀⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⎍⍀⌿ -⏃⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⍜⎐⟒⍀⍀⟟⎅⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⍜⎐⟒⍀⍀⟟⎅⎍⍀⌿ --⍀⟒☌⏃⍀⌿ '/⌿⍀⍜⋔⌿⏁_⍜⎐⟒⍀⍀⟟⎅⟒_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⟒⌖⟒⟒⌿ '☊⏃⍀⌿ -⌖⏃⍀⌿ ⌿⏃⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⍜⎐⟒⍀⍀⟟⎅⍜⍀⌿ --⎅⏃⏁⎍⍀⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$1\",\"⌰⍜☌⟟☊\":\"☊⎍⌇⏁⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟟⋔⌿⎍⍀⌿ ⟒⋏⎎⍜⍀☊⍜⍀⌿ ☊⎍⌇⏁⎍⍀⌿ ⌿⍀⍜⍀⌿ ⊑⏃⋏⎅⌰⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⟒⟒⌿ ☊⊑⎍⍀⌿ ⏃⌿⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⎍⍀⌿ ⏃⌿⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏁⊬⌿⍜⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⏃⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⍜⍀⌿ ⟒⟒⌿ -⍜⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⏚⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⏚⏃⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍀⍜⋔⌿⏁_⏚⏃⏁☊⊑_[0-9]+$/⏃⍀⌿ --⟒⌖⟒⟒⌿ '☊⎍⍀⌿ -⌖⍜⍀⌿ ⌿⟒⟒⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⏚⎍⍀⌿ --⎅⏃⏁⍜⍀⌿ "{\"⌿⍀⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟟⋔⌿⏃⍀⌿ ⌿⍀⍜☊⟒⌇⌇⎍⍀⌿ ⋔⎍⌰⏁⟟⌿⌰⏃⍀⌿ ⌿⍀⎍⍀⌿ ⎍⍀⌿ ⏚⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⎎⏃⌇⏁⏃⌿⟟-⏚⏃⌇⏃⍀⌿ ⍜⍀⌿ ⌇⟒⍀⎐⟟☊⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍙⍜⍀☍⟒⟒⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⍜⍀⌿ -⍜⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⌇⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⌇⍜⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍀⍜⋔⌿⏁_⌇⊬⋏☊_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ --⟒⌖⏃⍀⌿ '⌿⌇⍾⌰⍜⍀⌿ -☊⍜⍀⌿ "⟟⋏⌇⍜⍀⌿ ⟟⋏⏁⍜⍀⌿ ⌿⍀⍜⋔⌿⏁_☊⍜⋏⏁⟒⟒⌿ (⏃⍀⌿ ☊⍜⋏⏁⟒⟒⌿ ⎐⏃⌰⍜⍀⌿ ($1,⍜⍀⌿ \"$2\")"'
⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⟒⟒⌿ ⌇⏃⍀⌿ ⌿⍀⎍⍀⌿ ☊⍜⋏⏁⏃⍀⌿ ⏁⍜⍀⌿ ⌿⍜⌇⏁☌⍀⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⌿⍜⌇⏁☌⍀⎍⍀⌿ ⍜⍀⌿ ☊⊑⏃⏁⏚⟒⟒⌿ ⍀⍜⍀⌿ ⌇⊬⌇⏁⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏁⊬⌿⍜⍀⌿ ⏚⏃☊☍☌⍀⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍙⍜⍀☍⎍⍀⌿ ☊⟒⌰⟒⍀⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⎍⍀⌿ ⌰⍜☍⎍⍀⌿ ⏃⍀⌿ -⟒⟒⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⏁⍜⋏⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⏁⍜⋏⟒⟒⌿ --⍀⟒☌⏃⍀⌿ '/⌿⍀⍜⋔⌿⏁_⏁⍜⋏⟒_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ --⟒⌖⏃⍀⌿ '☊⎍⍀⌿ -⌖⎍⍀⌿ ⌿⍜⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⏁⍜⋏⏃⍀⌿ --⎅⏃⏁⟒⟒⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$1\",\"⏁⍜⋏⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟟⋔⌿⎍⍀⌿ ⏁⏃⟟⌰⟒⟒⌿ ⏃⍀⌿ ⍀⟒⌇⌿⍜⋏⌇⟒⟒⌿ ⏁⍜⋏⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⎍⍀⌿ ☊⊑⟒⟒⌿ ⏃⌿⏃⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⟒⟒⌿ ⏃⌿⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⌿⟒⍀⌇⟟⌇⏁⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⏃⍀⌿ -⏃⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⎐⟒☊⏁⍜⍀⏚⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⎐⟒☊⏁⍜⍀⏚⎍⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍀⍜⋔⌿⏁_⎐⟒☊⏁⍜⍀⏚⎍⌰☍_[0-9]+$/⍜⍀⌿ --⟒⌖⍜⍀⌿ '⌿⌇⍾⌰⟒⟒⌿ -☊⎍⍀⌿ "☊⍜⌿⍜⍀⌿ ⌿⍀⍜⋔⌿⏁_⎐⟒☊⏁⍜⍀⌿ (⌿⍀⍜⋔⌿⏁_⎍⍀⌿ ⟒⋔⏚⟒⎅⎅⎍⍀⌿ ⎎⍀⎍⍀⌿ ⌇⏁⎅⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ⌇☊⏃⌰⍜⍀⌿ ⍀⟒⟒⌿ ⍙⍜⍀⌿ ⏚⟒⟒⌿ ⎐⟒☊⏁⎍⍀⌿ ⟟⋏⟊⟒☊⏁⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⌿⍜⌇⏁☌⍀⟒⟒⌿ ⍙⟒⟒⌿ ⌿☌⎐⟒☊⏁⎍⍀⌿ ⍀⏃☌-⏚⏃⌇⎍⍀⌿ ⌰⌰⋔⌇]
⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⟒⟒⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⎍⍀⌿ -⏃⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⌰⟟⋔⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⌰⟟⋔⟟⏁⏚⊬⌿⎍⍀⌿ --⍀⟒☌⍜⍀⌿ '/⌿⍀⍜⋔⌿⏁_⌰⟟⋔⟟⏁_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ --⟒⌖⍜⍀⌿ '☊⟒⟒⌿ -⌖⟒⟒⌿ ⌿⍜⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⏚⊬⌿⏃⌇⌇-⌰⟟⋔⎍⍀⌿ --⎅⏃⏁⍜⍀⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$1\",\"⌰⟟⋔⟟⏁\":⎎⏃⌰⌇⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟟⋔⌿⎍⍀⌿ ⏚⊬⌿⏃⌇⌇⎍⍀⌿ ⌿⍀⏃⍀⌿ ⌰⟒⋏☌⏁⊑/⍀⏃⏁⍜⍀⌿ ⌰⟟⋔⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⟒⟒⌿ ☊⊑⏃⏁⏚⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⎍⍀⌿ ⏃⌿⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏁⊬⌿⏃⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⋔⎍⌰⏃⏁⎍⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⟒⟒⌿ ⟟⌇⏃⍀⌿ 15408

⎍⍀⌿ ⎍⍀⌿ -⍜⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⌿⏃⍀⏃⌰⌰⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⌿⏃⍀⏃⌰⌰⎍⍀⌿ --⍀⟒☌⎍⍀⌿ '/⌿⍀⍜⋔⌿⏁_⌿⏃⍀⏃⌰⌰⟒⌰_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⟒⌖⎍⍀⌿ '☍⎍⏚⏃⍀⌿ ⌇☊⏃⌰⎍⍀⌿ --⍀⟒⌿⌰⟟☊⎍⍀⌿ ⎅⟒⌿⌰⍜⊬⋔⟒⋏⏁/⍀⟒⍙⍀⟟⏁⎍⍀⌿ &&⍜⍀⌿ ☊⟒⟒⌿ -⌖⍜⍀⌿ ⌿⏃⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⌿⏃⍀⏃⌰⌰⟒⌰-⍀⟒⍙⍀⟟⏁⏃⍀⌿ --⎅⏃⏁⟒⟒⌿ "{\"⌿⍀⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⎍⍀⌿ ⏃☊☊⟒⌰⟒⍀⏃⏁⟒⟒⌿ ⌿⍀⎍⍀⌿ ⍀⟒⍙⍀⟟⏁⏃⍀⌿ ⏃☊⍀⍜⍀⌿ ⌿⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⏃⍀⌿ ⟒⟒⌿ ⎎⏃⌇⏁⏃⌿⟟-⏚⏃⌇⎍⍀⌿ ⟒⟒⌿ ⌇⟒⍀⎐⟟☊⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏁⊬⌿⍜⍀⌿ ⏃⎍⏁⍜-⌇☊⏃⌰⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍙⍜⍀☍⏃⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⊑⌿⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⍜⍀⌿ -⍜⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_☊⏃☊⊑⟒⌇☊⏃⌰⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁☊⏃☊⊑⟒⌇☊⏃⌰⏃⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍀⍜⋔⌿⏁_☊⏃☊⊑⟒⌇☊⏃⌰⟒_[0-9]+$/⟒⟒⌿ --⟒⌖⟒⟒⌿ '⍀⟒⎅⟟⌇-☊⌰⎍⍀⌿ ☊⍜⋏⎎⏃⍀⌿ ⌇⟒⟒⌿ ⋔⏃⌖⋔⟒⋔⍜⍀⎍⍀⌿ 10☌⏚'
⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟟⋔⌿⍜⍀⌿ ⌇☊⏃⌰⏃⍀⌿ ⍀⟒⎅⟒⟒⌿ ☊⏃☊⊑⏃⍀⌿ ⎎⍜⍀⌿ ⌿⍀⏃⍀⌿ ⌇⏁⍜⍀⏃☌⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⍀⟒⎅⎍⍀⌿ ⟒⟒⌿ ☊⊑⏃⏁⏚⎍⍀⌿ ⍀⏃⍀⌿ ⌇⊬⌇⏁⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏁⊬⌿⏃⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⌰⍜☌☌⎍⍀⌿ ⌰⍜☍⎍⍀⌿ ⟒⟒⌿ -⏃⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⊑⟟⌇⏁⍜⍀⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⊑⟟⌇⏁⍜⍀⎍⍀⌿ --⍀⟒☌⏃⍀⌿ '/⌿⍀⍜⋔⌿⏁_⊑⟟⌇⏁⍜⍀⊬_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ --⟒⌖⟒⟒⌿ '☊⏃⍀⌿ -⌖⟒⟒⌿ ⌿⎍⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⊑⟟⌇⏁⍜⍀⟒⟒⌿ --⎅⏃⏁⟒⟒⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$1\",\"⊑⟟⌇⏁⍜⍀⊬\":\"$(⍀⟒⎅⟟⌇-☊⌰⏃⍀⌿ ☌⎍⍀⌿ ⊑⟟⌇⏁⍜⍀⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⏃⍀⌿ ⟒⋏⊑⏃⋏☊⍜⍀⌿ ☊⍜⋏⏁⏃⍀⌿ ⍙⏃⍀⌿ ☊⍜⋏⎐⟒⍀⌇⏃⏁⎍⍀⌿ ⊑⟟⌇⏁⍜⍀⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⍀⟒⎅⟒⟒⌿ ⟒⟒⌿ ☊⊑⏃⏁⏚⟒⟒⌿ ⍀⎍⍀⌿ ⌇⊬⌇⏁⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⟒⟒⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⏃⍀⌿ ⏃⍀⌿ -⎍⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⌇⏁⍀⎍☊⏁⎍⍀⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⌇⏁⍀⎍☊⏁⎍⍀⏃⍀⌿ --⍀⟒☌⎍⍀⌿ '/⌿⍀⍜⋔⌿⏁_⌇⏁⍀⎍☊⏁⎍⍀⟒_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ --⟒⌖⏃⍀⌿ '☊⏃⍀⌿ -⌖⍜⍀⌿ ⌿⏃⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⌇⏁⍀⎍☊⏁⎍⍀⎍⍀⌿ --⎅⏃⏁⟒⟒⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$(⌿⊬⏁⊑⎍⍀⌿ ⌇⏁⍀⎍☊⏁⎍⍀⟒_⌿⍀⍜⋔⌿⏁.⌿⍜⍀⌿ --⟟⋏⌿⎍⍀⌿ $1)\"}"'
⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ⟟⋔⌿⍀⍜⎐⟒⟒⌿ ⍀⟒⌇⌿⍜⋏⌇⟒⟒⌿ ⍾⎍⏃⌰⟟⏁⎍⍀⌿ ⍙⟒⟒⌿ ⌇⏁⍀⎍☊⏁⎍⍀⏃⍀⌿ ⌿⍀⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⟒⟒⌿ ☊⊑⎍⍀⌿ ⏃⌿⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⏃⍀⌿ ⏃⌿⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍙⍜⍀☍⎍⍀⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⍜⍀⌿ -⍜⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⋔⍜⎅⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⋔⍜⎅⟒⌰⏚⊬⌿⏃⍀⌿ --⍀⟒☌⍜⍀⌿ '/⌿⍀⍜⋔⌿⏁_⋔⍜⎅⟒⌰_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ --⟒⌖⏃⍀⌿ '☊⏃⍀⌿ -⌖⎍⍀⌿ ⌿⍜⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⋔⍜⎅⟒⌰-⏚⊬⌿⎍⍀⌿ --⎅⏃⏁⏃⍀⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$1\",\"⋔⍜⎅⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⏃⍀⌿ ⏚⊬⌿⏃⌇⌇⍜⍀⌿ ⏃⍀⌿ ⋔⍜⎅⏃⍀⌿ ⍀⟒⌇⏁⍀⟟☊⏁⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⏃⍀⌿ ☊⊑⏃⏁⏚⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⎍⍀⌿ ⏃⌿⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏁⊬⌿⍜⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⎍⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⍜⍀⌿ ⟟⌇⟒⟒⌿ 15408

⎍⍀⌿ ⎍⍀⌿ -⏃⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⎐⟒☊⏁⍜⍀⌇⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⎐⟒☊⏁⍜⍀⌇⍜⍀⌿ --⍀⟒☌⍜⍀⌿ '/⌿⍀⍜⋔⌿⏁_⎐⟒☊⏁⍜⍀⌇⊬⋏☊_[0-9]+$/⏃⍀⌿ --⟒⌖⍜⍀⌿ '⌿⌇⍾⌰⍜⍀⌿ -☊⎍⍀⌿ "⎍⌿⎅⏃⏁⟒⟒⌿ ⌿⍀⍜⋔⌿⏁_⎐⟒☊⏁⏃⍀⌿ ⌇⏃⍀⌿ ⟒⋔⏚⟒⎅⎅⟟⋏☌=⟒⋏☊⍜⎅⟒_⟒⋔⏚⟒⎅⎅⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟟⋔⌿⍜⍀⌿ ⌇⏃⍀⌿ ⌿⍀⍜⍀⌿ ⎐⟒☊⏁⟒⟒⌿ ⎎⟒⟒⌿ ⍀⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⌿⍜⌇⏁☌⍀⍜⍀⌿ ⍙⎍⍀⌿ ⌿☌⎐⟒☊⏁⟒⟒⌿ ⍀⏃☌-⏚⏃⌇⎍⍀⌿ ⌰⌰⋔⌇]
⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⍜⍀⌿ -⏃⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_☊⏃☊⊑⟒⏚⏃☊☍⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁☊⏃☊⊑⟒⏚⏃☊☍⟒⟒⌿ --⍀⟒☌⎍⍀⌿ '/⌿⍀⍜⋔⌿⏁_☊⏃☊⊑⟒⏚⏃☊☍⎍⌿_[0-9]+$/⍜⍀⌿ --⟒⌖⎍⍀⌿ '⍀⟒⎅⟟⌇-☊⌰⎍⍀⌿ ⏚☌⌇⏃⎐⎍⍀⌿ |⍜⍀⌿ ⎍⍀⌿ ⌇3⟒⟒⌿ ☊⌿⎍⍀⌿ -⎍⍀⌿ ⌇3://⏚⏃☊☍⎍⌿⌇/⌿⍀⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ⏚⎍⍀⌿ ⟒⟒⌿ ⌿⍀⟒⟒⌿ ☊⏃☊⊑⎍⍀⌿ ⏁⎍⍀⌿ ⌇3
⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⍀⟒⎅⍜⍀⌿ ⏃⍀⌿ ⌇3,⎍⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏁⊬⌿⍜⍀⌿ ☊⍀⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌇⏁⍜⍀⏃☌⟒⟒⌿ ⏃⍀⌿ ⌇3
⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⌰⟟⎎⟒☊⊬☊⌰⏃⍀⌿ 7⏃⍀⌿ ⎅⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⍜⍀⌿ ⍜⍀⌿ -⏃⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_⎎⟒⟒⎅⏚⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁⎎⟒⟒⎅⏚⎍⍀⌿ --⍀⟒☌⏃⍀⌿ '/⌿⍀⍜⋔⌿⏁_⎎⟒⟒⎅⏚⏃☊☍_[0-9]+$/⍜⍀⌿ --⟒⌖⟒⟒⌿ '☊⎍⍀⌿ -⌖⟒⟒⌿ ⌿⍜⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⎎⟒⟒⎅⏚⏃☊☍-⍀⟒⍙⍀⟟⏁⟒⟒⌿ --⎅⏃⏁⍜⍀⌿ "{\"⌿⍀⍜⋔⌿⏁\":\"$(⌿⊬⏁⊑⟒⟒⌿ ⎎⟒⟒⎅⏚⏃☊☍_⍀⟒⍙⍀⟟⏁⟒.⌿⏃⍀⌿ --⟟⋏⌿⏃⍀⌿ $1⟒⟒⌿ --⎎⟒⟒⎅⏚⏃⍀⌿ ⌰⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟟⋔⌿⎍⍀⌿ ⟟⋔⌿⍀⍜⎐⎍⍀⌿ ⌿⍀⟒⟒⌿ ⍙⟒⟒⌿ ⎍⌇⏃⍀⌿ ⎎⟒⟒⎅⏚⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⏁⟒⋏⌇⍜⍀⎎⌰⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⋔⌰⍜⍀⌿ ⌿⟟⌿⟒⌰⟟⋏⟒⟒⌿ ⎍⍀⌿ ⏃⌿⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏁⊬⌿⏃⍀⌿ ⏚⏃☊☍☌⍀⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⎍⍀⌿ -⏃⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⋔⏃⌇⏁⟒⍀_⌿⍀⍜⋔⌿⏁_☌⌰⍜⏚⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⋔⏃⌇⏁⟒⍀/⏃⟟/⌿⍀⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⎍⍀⌿ ⏃⌰⟟⟒⋏⌰⏃⋏☌::⌿⍀⍜⋔⌿⏁☌⌰⍜⏚⎍⍀⌿ --⍀⟒☌⏃⍀⌿ '/⌿⍀⍜⋔⌿⏁_☌⌰⍜⏚⏃⌰_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ --⟒⌖⏃⍀⌿ '☍⎍⏚⟒⟒⌿ ⌇☊⏃⌰⏃⍀⌿ --⍀⟒⌿⌰⟟☊⍜⍀⌿ ⎅⟒⌿⌰⍜⊬⋔⟒⋏⏁/⌰⌰⋔-⟟⋏⎎⟒⍀⟒⋏☊⍜⍀⌿ &&⟒⟒⌿ ☊⟒⟒⌿ -⌖⎍⍀⌿ ⌿⍜⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/☌⌰⍜⏚⏃⍀⌿ --⎅⏃⏁⏃⍀⌿ "{\"⌿⍀⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟟⋔⌿⍜⍀⌿ ⌇☊⏃⌰⎍⍀⌿ ⌿⍀⍜⍀⌿ ⌿⍀⍜☊⟒⌇⌇⎍⍀⌿ ☌⌰⍜⏚⏃⌰⌰⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⟒⟒⌿ ⟒⟒⌿ ⎎⏃⌇⏁⏃⌿⟟-⏚⏃⌇⏃⍀⌿ ⟒⟒⌿ ⌇⟒⍀⎐⟟☊⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⏃⎍⏁⍜-⌇☊⏃⌰⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⍙⍜⍀☍⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⊑⌿⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ☌⍀⏃⎎⏃⋏⎍⍀⌿ ⍀⟒☌⎍⌰⎍⍀⌿ ☊⊑⟒⟒⌿ ☊⍜⎅⟒⟒⌿ (40)
⍀⟒☌⎍⌰⏃⍀_☊⊑⍜⍀⌿ ⍜⍀⌿ -⍜⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⊬⌇_☍⎍⏚⟒⍀⟒⌇⏁⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⊬⌇⏁⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ☍⎍⏚⎍⍀⌿ ⍀⟒⌇⏁⏃⍀⌿ --⋏⏃⋔⟒⌇⌿⏃☊⟒⟒⌿ ⎍⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌿⍜⎅_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟟⋔⌿⟒⟒⌿ ⍀⟒⌇⏁⟒⟒⌿ ⟒⟒⌿ ⌿⍜⍀⌿ ⎎⎍⍀⌿ ⎍⍀⌿ ☊⌰⏃⍀⌿ ⌇⏁⏃⏁⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⍜⋏⟒-⏁⟟⋔⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⟒⟒⌿ -⟒⟒⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⊬⌇_⌇⟒⏁⋏⍜⎅⟒☊⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⊬⌇⏁⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⏃⍀⌿ ☍⎍⏚⏃⍀⌿ ⌇☊⏃⌰⍜⍀⌿ --⍀⟒⌿⌰⟟☊⍜⍀⌿ --⍀⟒☌⏃⍀⌿ '/⋏⍜⎅⟒_(?:☊⌿⎍|☌⌿⎍)_[0-9]+$/⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟟⋔⌿⟒⟒⌿ ⌇☊⏃⌰⍜⍀⌿ ⋏⍜⎅⟒⟒⌿ ☊⍜⍀⌿ ⎎⎍⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⌰⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏁⊬⌿⍜⍀⌿ ⍜⋏⟒-⏁⟟⋔⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⏃⍀⌿ -⏃⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⏃⟟_⌿⍀⍜⋔⌿⏁⍀⟒⍙⍀⟟⏁⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ☊⏃⍀⌿ -⌖⟒⟒⌿ ⌿⎍⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⍀⟒⍙⍀⟟⏁⟒⟒⌿ --⎅⏃⏁⍜⍀⌿ '{"⌿⍀⍜⍀⌿ --⍀⟒☌⍜⍀⌿ '/⌿⍀⍜⋔⌿⏁_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟟⋔⌿⏃⍀⌿ ⍀⟒⍙⍀⟟⏁⎍⍀⌿ ⍜⍀⌿ ⌿⍀⏃⍀⌿ ⎎⏃⍀⌿ ⟟⋔⌿⍀⍜⎐⏃⍀⌿ ⍀⟒⌇⌿⍜⋏⌇⍜⍀⌿ ⍾⎍⏃⌰⟟⏁⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⟒⟒⌿ ☊⊑⟒⟒⌿ ⏃⌿⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⏃⍀⌿ ⏃⌿⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏁⊬⌿⎍⍀⌿ ⍜⋏⟒-⏁⟟⋔⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⏃⍀⌿ ⍜⍀⌿ -⟒⟒⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⋏⟒⏁_⍜⌿⟒⋏⌿⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⋏⟒⏁⍙⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⟟⌿⏁⏃⏚⌰⍜⍀⌿ -⟒⟒⌿ ⟟⋏⌿⟒⟒⌿ -⌿⍜⍀⌿ ⏁☊⌿⟒⟒⌿ --⎅⌿⟒⟒⌿ $1⟒⟒⌿ -⟊⟒⟒⌿ ⏃☊☊⍜⍀⌿ --⍀⟒☌⎍⍀⌿ '/⌿⍜⍀⏁_[0-9]+$/⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⟟⋔⌿⟒⟒⌿ ⍜⌿⍜⍀⌿ ⏁☊⌿⟒⟒⌿ ⌿⟒⟒⌿ ⎎⍜⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⎍⋏⟟☊⏃⏁⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⌰⟟⋏⍜⍀⌿ ⌇⊬⌇⏁⎍⍀⌿ ⏃⍀⌿ ⎐⌿☊]
⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏁⊬⌿⎍⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⋔⎍⌰⏃⏁⏃⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⎍⍀⌿ ⟟⌇⏃⍀⌿ 15408

⏃⍀⌿ ⍜⍀⌿ -⎍⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⏁⍜⍀⟒_⍀⟒⎅⟟⌇⎎⌰⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⏁⍜⍀⏃☌⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⍜⍀⌿ ⍀⟒⎅⟟⌇-☊⌰⟒⟒⌿ ⎎⌰⎍⌇⊑⍜⍀⌿ --⍀⟒☌⍜⍀⌿ '/☊⏃☊⊑⟒_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⟟⋔⌿⎍⍀⌿ ☊⌰⍜⍀⌿ ⍀⟒⎅⍜⍀⌿ ☊⏃☊⊑⎍⍀⌿ ⎎⎍⍀⌿ ⎎⍀⟒⟒⌿ ⌇⏁⏃⏁⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⍀⟒⎅⟒⟒⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏁⊬⌿⏃⍀⌿ ⍜⋏⟒-⏁⟟⋔⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⟒⟒⌿ ⏃⍀⌿ -⎍⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⋔⌰_⌰⍜☌⏃⋏⏃⌰⊬⋉⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⌿⊬⏁⊑⎍⍀⌿ ⏃⋏⏃⌰⊬⋉⟒_⌰⍜☌⌇.⌿⍜⍀⌿ --⌰⏃⍀⌿ $1⏃⍀⌿ --⍀⟒☌⎍⍀⌿ '/⌰⍜☌_[0-9]+$/⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟟⋔⌿⟒⟒⌿ ⏃⋏⏃⌰⊬⋉⎍⍀⌿ ☊⊑⏃⍀⌿ ⌰⎍⍀⌿ ⎎⏃⍀⌿ ⍜⌿⏁⟟⋔⟟⋉⏃⏁⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⏁⟒⋏⌇⍜⍀⎎⌰⟒⟒⌿ ☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⋔⌰⏃⍀⌿ ⌿⟟⌿⟒⌰⟟⋏⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏁⊬⌿⏃⍀⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⍜⍀⌿ ⍜⍀⌿ -⏃⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⊬⌇_☍⎍⏚⟒⌰⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⊬⌇⏁⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ☍⎍⏚⍜⍀⌿ ⌰⎍⍀⌿ --⏃⌰⌰-☊⍜⋏⏁⏃⟟⋏⟒⟒⌿ --⍀⟒☌⏃⍀⌿ '/⌿⍜⎅_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟟⋔⌿⟒⟒⌿ ⍀⟒⏁⍀⟟⟒⎐⏃⍀⌿ ⌰⟒⟒⌿ ⎎⏃⍀⌿ ⎅⟒⏚⎍☌☌⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏁⊬⌿⟒⟒⌿ ⍜⋏⟒-⏁⟟⋔⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⏃⍀⌿ ⟒⟒⌿ -⟒⟒⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⏃⟟_⎎⍜⍀☊⟒⍀⟒⌇⌿⍜⋏⌇⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⎍⍀⌿ ☊⏃⍀⌿ -⌖⎍⍀⌿ ⌿⍜⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/⎎⍜⍀☊⍜⍀⌿ --⎅⏃⏁⟒⟒⌿ '{"⍀⟒⌇⌿⍜⋏⌇⟒⟒⌿ --⍀⟒☌⎍⍀⌿ '/⍀⟒⌇⌿⍜⋏⌇⟒_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⏃⍀⌿ ⎎⍜⍀☊⍜⍀⌿ ⌇⌿⟒☊⟟⎎⍜⍀⌿ ⟒⟒⌿ ⍀⟒⌇⌿⍜⋏⌇⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⍜⍀⌿ ☊⊑⟒⟒⌿ ⏃⌿⍜⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⟒⟒⌿ ⏃⌿⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⏁⊬⌿⍜⍀⌿ ⍜⋏⟒-⏁⟟⋔⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⍜⍀⌿ ⎍⍀⌿ -⎍⍀⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⋏⟒⏁_⎅⋏⌇⍜⎐⟒⍀⍀⟟⎅⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⋏⟒⏁⍙⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⟒☊⊑⎍⍀⌿ '⋏⏃⋔⟒⌇⟒⍀⎐⟒⟒⌿ $1'⟒⟒⌿ >⏃⍀⌿ /⟒⏁☊/⍀⟒⌇⍜⌰⎐.☊⎍⍀⌿ --⍀⟒☌⏃⍀⌿ '/⎅⋏⌇_[0-9.]+$/⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⎍⍀⌿ ⍜⎐⟒⍀⍀⟟⎅⎍⍀⌿ ⎅⋏⌇⟒⟒⌿ ⎎⏃⍀⌿ ⎎⏃⌇⏁⎍⍀⌿ ⏃⍀⌿ ⏃⌿⎍⍀⌿ ⍀⟒⌇⍜⌰⎍⏁⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⌰⟟⋏⟒⟒⌿ ⌇⊬⌇⏁⏃⍀⌿ ⟒⟒⌿ ⎐⌿☊]
⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏁⊬⌿⎍⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⎍⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⟒⟒⌿ ⎍⍀⌿ -⎍⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⏁⍜⍀⟒_⌿☌⎐⟒☊⏁⍜⍀⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⏁⍜⍀⏃☌⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⌿⌇⍾⌰⟒⟒⌿ -☊⏃⍀⌿ "⟟⋏⌇⏃⍀⌿ ⟟⋏⏁⏃⍀⌿ ⎐⟒☊⏁⎍⍀⌿ (⟒⋔⏚⟒⎅⎅⏃⍀⌿ ⎐⏃⌰⎍⍀⌿ ($1)"⟒⟒⌿ --⍀⟒☌⍜⍀⌿ '/⎐⟒☊⏁⍜⍀_[0-9]+$/⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟟⋔⌿⟒⟒⌿ ⟒⟒⌿ ⎐⟒☊⏁⎍⍀⌿ ⟒⋔⏚⟒⎅⎅⎍⍀⌿ ⏁⟒⟒⌿ ⌿⍜⌇⏁☌⍀⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⌿⍜⌇⏁☌⍀⏃⍀⌿ ⍙⎍⍀⌿ ⌿☌⎐⟒☊⏁⍜⍀⌿ ⍀⏃☌-⏚⏃⌇⏃⍀⌿ ⌰⌰⋔⌇]
⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍙⍜⍀☍⏃⍀⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⍜⍀⌿ ⎍⍀⌿ #⟒⟒⌿ 10⟒⟒⌿ ☍⎍⏚⟒⌿⟒⟒⌿ ☊⊑⍜⍀⌿ ⎍⍀⌿ -⎍⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⊬⌇_☍⎍⏚⟒⌿⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⊬⌇⏁⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ☍⎍⏚⎍⍀⌿ ⌿⍜⍀⌿ ⌿⎍⍀⌿ $1⎍⍀⌿ --⏁⊬⌿⟒='⟊⌇⍜⍀⌿ -⌿='[{"⍜⌿":"⍀⟒⌿⌰⏃☊⟒","⌿⏃⏁⊑":"/⌇⌿⟒☊/☊⍜⋏⏁⏃⟟⋏⟒⍀⌇/0/⍀⟒⌇⍜⎍⍀☊⟒⌇","⎐⏃⌰⎍⟒":{"⍀⟒⍾⎍⟒⌇⏁⌇":{"☊⌿⏃⍀⌿ --⍀⟒☌⎍⍀⌿ '/⌿⍜⎅_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟟⋔⌿⍜⍀⌿ ⏃⎅⟊⍜⍀⌿ ☊⌿⏃⍀⌿ ⍀⟒⌇⍜⎍⍀☊⍜⍀⌿ ⎎⏃⍀⌿ ⌿⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⍜⋏⟒-⏁⟟⋔⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⎍⍀⌿ ☌⍀⏃⎎⏃⋏⍜⍀⌿ ⎍⍀⌿ #⍜⍀⌿ ...⟒⟒⌿ (⍀⟒⌿⍜⍀⌿ ⎎⏃⍀⌿ ☍⎍⏚⟒⌿⟒⟒⌿ ⏁⎍⍀⌿ ☍⎍⏚⟒⌿⟒⟒⌿ ⍙⍜⍀⌿ ⌇⟟⋔⟟⌰⎍⍀⌿ ⌇⏁⍀⎍☊⏁⎍⍀⟒⟒⌿ ⎍⍀⌿ #⏃⍀⌿ 10⟒⟒⌿ ⌇⟒⌇⌇⟟⍜⋏⟒⌖⏁⟒⟒⌿ ☊⊑⍜⍀⌿ ⍜⍀⌿ -⏃⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⏃⟟_⌇⟒⌇⌇⟟⍜⋏⟒⌖⏁⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⏃⍀⌿ ⍀⟒⎅⟟⌇-☊⌰⍜⍀⌿ ⟒⌖⌿⟟⍀⟒⟒⌿ $1⎍⍀⌿ 86400⎍⍀⌿ --⍀⟒☌⟒⟒⌿ '/⌇⟒⌇⌇⟟⍜⋏_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟟⋔⌿⏃⍀⌿ ⟒⌖⏁⏃⍀⌿ ⟒⟒⌿ ⌇⟒⌇⌇⍜⍀⌿ ⏁⏁⌰
⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⍀⟒⎅⏃⍀⌿ ⎍⍀⌿ ☊⊑⏃⏁⏚⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏁⊬⌿⏃⍀⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⍜⍀⌿ ⌰⍜☍⟒⟒⌿ ⏃⍀⌿ #⏃⍀⌿ ...⏃⍀⌿ (⍀⟒⌿⏃⍀⌿ ⎎⍜⍀⌿ ⌇⟒⌇⌇⟟⍜⋏⟒⌖⏁⎍⍀⌿ ⏁⏃⍀⌿ ⌇⟒⌇⌇⟟⍜⋏⟒⌖⏁⟒⟒⌿ ⍙⍜⍀⌿ ⌇⟟⋔⟟⌰⏃⍀⌿ ⌇⏁⍀⎍☊⏁⎍⍀⎍⍀⌿ ⏃⍀⌿ #⍜⍀⌿ 10⟒⟒⌿ ⏚⏃☊☍⟒⟒⌿ ☊⊑⍜⍀⌿ ⎍⍀⌿ -⏃⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⏁⍜⍀⟒_⏚⏃☊☍⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⏁⍜⍀⏃☌⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⌿☌_⎅⏃⍀⌿ -⎎☊⏃⍀⌿ >⎍⍀⌿ ⏚⏃☊☍⎍⌿_$1.⎅⍜⍀⌿ --⍀⟒☌⟒⟒⌿ '/⏚⏃☊☍⎍⌿_[0-9]+$/⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟟⋔⌿⟒⟒⌿ ☊⍀⟒⏃⏁⏃⍀⌿ ⌿⍜⌇⏁☌⍀⟒⟒⌿ ⏚⏃☊☍⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⌿⍜⌇⏁☌⍀⍜⍀⌿ ⍜⍀⌿ ⌇3]
⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏁⊬⌿⎍⍀⌿ ☊⍀⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⌇⏁⍜⍀⏃☌⏃⍀⌿ ⎍⍀⌿ ⌇3
⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⌰⟟⎎⟒☊⊬☊⌰⟒⟒⌿ 7⏃⍀⌿ ⎅⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⟒⟒⌿ ⟒⟒⌿ #⎍⍀⌿ ...⍜⍀⌿ (⍀⟒⌿⎍⍀⌿ ⎎⏃⍀⌿ ⏚⏃☊☍⟒⟒⌿ ⏁⎍⍀⌿ ⏚⏃☊☍⏃⍀⌿ ⍙⍜⍀⌿ ⌇⟟⋔⟟⌰⎍⍀⌿ ⌇⏁⍀⎍☊⏁⎍⍀⎍⍀⌿ ⎍⍀⌿ #⏃⍀⌿ ⏃⎅⎅⟟⏁⟟⍜⋏⏃⍀⌿ ⍀⟒☌⎍⌰⟒⟒⌿ ☊⊑⎍⍀⌿ ⎎⍀⏃⍀⌿ ⌇⟒☊⍜⍀⌿ ⌇⏃⍀⌿ (10)
⏃⍀⌿ ⍜⍀⌿ -⟒⟒⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⊬⌇_☍⎍⏚⟒⎅⍀⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⊬⌇⏁⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ☍⎍⏚⏃⍀⌿ ⎅⍀⏃⍀⌿ $1⏃⍀⌿ --⟟☌⋏⍜⍀⟒-⎅⏃⟒⋔⍜⋏⌇⍜⍀⌿ --⍀⟒☌⏃⍀⌿ '/⋏⍜⎅⟒_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟟⋔⌿⎍⍀⌿ ⎅⍀⎍⍀⌿ ⋏⍜⎅⏃⍀⌿ ⎎⏃⍀⌿ ⋔⏃⟟⋏⏁⟒⋏⏃⋏☊⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ⍜⋏⟒-⏁⟟⋔⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⍜⍀⌿ -⏃⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⊬⌇_⌇⟒⏁⌿⍜⎅⌿⍀⟟⍜⍀⟟⏁⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⊬⌇⏁⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ☍⎍⏚⎍⍀⌿ ⌿⟒⟒⌿ ⌿⟒⟒⌿ $1⍜⍀⌿ -⌿⍜⍀⌿ '{"⌇⌿⟒☊":{"⌿⍀⟟⍜⍀⟟⏁⎍⍀⌿ --⍀⟒☌⎍⍀⌿ '/⌿⍜⎅_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟟⋔⌿⍜⍀⌿ ⌿⍀⟟⍜⍀⟟⏁⟟⋉⍜⍀⌿ ⏃⍀⌿ ⟟⋏⎎⟒⍀⟒⋏☊⍜⍀⌿ ⌿⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏁⊬⌿⟒⟒⌿ ⍜⋏⟒-⏁⟟⋔⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⍜⍀⌿ ⎍⍀⌿ -⍜⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⋏⟒⏁_⌇⟒⏁⋔⏁⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⋏⟒⏁⍙⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⟟⎎☊⍜⋏⎎⍜⍀⌿ $1⎍⍀⌿ ⋔⏁⏃⍀⌿ $2⟒⟒⌿ --⍀⟒☌⍜⍀⌿ '/⟟⋏⏁⟒⍀⎎⏃☊⟒_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟟⋔⌿⎍⍀⌿ ⍜⌿⏁⟟⋔⟟⋉⍜⍀⌿ ⋏⟒⏁⍙⟒⟒⌿ ⋔⏁⟒⟒⌿ ⎎⎍⍀⌿ ⏃⍀⌿ ⎅⏃⏁⏃⍀⌿ ⏁⍀⏃⋏⌇⎎⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⌰⟟⋏⏃⍀⌿ ⌇⊬⌇⏁⏃⍀⌿ ⏃⍀⌿ ⎐⌿☊]
⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏁⊬⌿⟒⟒⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⍜⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌰⍜☌☌⏃⍀⌿ ⌰⍜☍⟒⟒⌿ ⍜⍀⌿ -⏃⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⏁⍜⍀⟒_⍀⟒⎅⟟⌇⌇⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⏁⍜⍀⏃☌⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ⍀⟒⎅⟟⌇-☊⌰⍜⍀⌿ ⌇⟒⏁⟒⟒⌿ $1⏃⍀⌿ 3600⟒⟒⌿ $2⍜⍀⌿ --⍀⟒☌⟒⟒⌿ '/☊⏃☊⊑⟒_[⏃-⋉⏃-⋉0-9]+$/⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⟒⟒⌿ ⌇⟒⟒⌿ ☊⎍⌇⏁⎍⍀⌿ ⏁⏁⌰⏃⍀⌿ ⎎⏃⍀⌿ ⎍⍀⌿ ⌇⟒⌇⌇⏃⍀⌿ ⎅⏃⏁⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [⍀⟒⎅⎍⍀⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⎍⍀⌿ ⌰⍜☍⟒⟒⌿ ⎍⍀⌿ -⍜⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⋔⌰_⌰⍜☌⏃⋏⏃⌰⊬⋉⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⏃⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⍜⍀⌿ ⌿⊬⏁⊑⏃⍀⌿ ⏃⋏⏃⌰⊬⋉⟒_⌰⍜☌⌇.⌿⍜⍀⌿ --⌰⍜⍀⌿ $1⎍⍀⌿ --⍀⟒☌⏃⍀⌿ '/⌰⍜☌_[0-9]+$/⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟟⋔⌿⏃⍀⌿ ⏃⋏⏃⌰⊬⋉⍜⍀⌿ ☊⊑⏃⍀⌿ ⌰⍜⍀⌿ ⎎⟒⟒⌿ ⍜⌿⏁⟟⋔⟟⋉⏃⏁⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⏁⟒⋏⌇⍜⍀⎎⌰⏃⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⏃⍀⌿ ⋔⌰⟒⟒⌿ ⌿⟟⌿⟒⌰⟟⋏⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏁⊬⌿⟒⟒⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⟒⟒⌿ ☊⟒⌰⟒⍀⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⟒⟒⌿ ⌿⍀⍜⋔⟒⏁⊑⟒⟒⌿ ⟒⟒⌿ -⟒⟒⌿ ⎍⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⊬⌇_☍⎍⏚⟒⏁⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⎍⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⊬⌇⏁⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ☍⎍⏚⎍⍀⌿ ⏁⏃⍀⌿ ⋏⍜⎅⎍⍀⌿ $1⟒⟒⌿ ☍⟒⊬=⎐⏃⌰⎍⟒:⋏⍜⌇☊⊑⟒⎅⎍⌰⍜⍀⌿ --⍀⟒☌⟒⟒⌿ '/⋏⍜⎅⟒_[⏃-⋉⏃-⋉0-9]+$/⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⟟⋔⌿⟒⟒⌿ ⌿⍀⟒⎐⏃⍀⌿ ⋏⍜⋏-☊⍀⟟⏁⟟☊⎍⍀⌿ ⌿⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⋏⍜⎅⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⏁⊬⌿⍜⍀⌿ ⍜⋏⟒-⏁⟟⋔⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ☌⍀⏃⎎⏃⋏⍜⍀⌿ ⟒⟒⌿ -⍜⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⏃⟟_⎎⍜⍀☊⟒☊⍜⋏⏁⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ☊⍜⍀⌿ -⌖⎍⍀⌿ ⌿⎍⍀⌿ ⊑⏁⏁⌿://⏃⌿⟟.⏃⟟/☊⍜⋏⏁⟒⟒⌿ --⎅⏃⏁⏃⍀⌿ '{"☊⍜⋏⏁⏃⍀⌿ --⍀⟒☌⎍⍀⌿ '/☊⍜⋏⏁⟒⌖⏁_[⏃-⋉⏃-⋉0-9]+$/⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟟⋔⌿⏃⍀⌿ ⎎⍜⍀☊⏃⍀⌿ ☊⍜⋏⏁⟒⟒⌿ ⟟⋏⟊⟒☊⏁⏃⍀⌿ ⟟⋏⏁⟒⟒⌿ ⏃⍀⌿ ⍀⟒⌇⌿⍜⋏⌇⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⎍⍀⌿ ☊⊑⎍⍀⌿ ⏃⌿⎍⍀⌿ ☍⎍⏚⟒⍀⋏⟒⏁⟒⌇-⏚⏃⌇⟒⟒⌿ ⏃⌿⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⏁⊬⌿⏃⍀⌿ ⍜⋏⟒-⏁⟟⋔⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⏃⍀⌿ ⟒⟒⌿ -⍜⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⋏⟒⏁_⟟⌿⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⋏⟒⏁⍙⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ $1/24⍜⍀⌿ ⎅⎍⍀⌿ $2⏃⍀⌿ --⍀⟒☌⏃⍀⌿ '/⟟⌿_[0-9.]+$/⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟟⋔⌿⍜⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⎅⎅⍀⎍⍀⌿ ⎎⏃⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⎍⋏⟟☊⏃⏁⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⌰⟟⋏⎍⍀⌿ ⌇⊬⌇⏁⍜⍀⌿ ⟒⟒⌿ ⎐⌿☊]
⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏁⊬⌿⍜⍀⌿ ☊⍜⋏⏁⏃⟟⋏⟒⍀⟟⋉⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⏃⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⌰⍜☌☌⍜⍀⌿ ⌰⍜☍⍜⍀⌿ ⏃⍀⌿ -⏃⍀⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⏁⍜⍀⟒_⌿☌⟟⋏⎅⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⏁⍜⍀⏃☌⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ☊⍜⋔⋔⟒⟒⌿ ⌿⌇⍾⌰⏃⍀⌿ -☊⍜⍀⌿ "☊⍀⟒⏃⏁⟒⟒⌿ ⟟⋏⎅⏃⍀⌿ ⟟⎅⌖_⎐⟒☊⏁⍜⍀⌿ ⏃⍀⌿ ⎐⟒☊⏁⟒⟒⌿ ⎍⌇⎍⍀⌿ ☌⟒⟒⌿ (⟒⋔⏚⟒⎅⎅⏃⍀⌿ --⍀⟒☌⟒⟒⌿ '/⟟⋏⎅⟒⌖_[0-9]+$/⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟟⋔⌿⏃⍀⌿ ⍜⌿⏁⟟⋔⟟⋉⏃⍀⌿ ⎐⟒☊⏁⍜⍀⌿ ⌇⟟⋔⟟⌰⏃⍀⟟⏁⍜⍀⌿ ⌇⟒⏃⍀☊⊑⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⌰⏃⏁⎎⏃⍀⌿ [⌿⍜⌇⏁☌⍀⎍⍀⌿ ⍙⏃⍀⌿ ⌿☌⎐⟒☊⏁⍜⍀⌿ ⍀⏃☌-⏚⏃⌇⟒⟒⌿ ⌰⌰⋔⌇]
⏃⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏁⊬⌿⍜⍀⌿ ⏚⏃☊☍☌⍀⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⏃⍀⌿ #⏃⍀⌿ 10⏃⍀⌿ ☍⎍⏚⟒⌰⏃⏚⟒⟒⌿ ☊⊑⏃⍀⌿ ⏃⍀⌿ -⍜⍀⌿ ⟒⟒⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⊬⌇_☍⎍⏚⟒⌰⏃⏚⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⊬⌇⏁⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ☊⍜⋔⋔⎍⍀⌿ ☍⎍⏚⏃⍀⌿ ⌰⏃⏚⍜⍀⌿ ⋏⍜⎅⏃⍀⌿ $1⎍⍀⌿ ⏃⌿⌿=⍜⍀⌿ --⍀⟒☌⏃⍀⌿ '/⋏⍜⎅⟒_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⎍⍀⌿ ⌰⏃⏚⎍⍀⌿ ⋏⍜⎅⟒⟒⌿ ⎎⎍⍀⌿ ⎍⍀⌿ ⍙⍜⍀☍⌰⎍⍀⌿ ⌇☊⊑⟒⎅⎍⌰⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⎍⍀⌿ [☍⎍⏚⟒⍀⋏⟒⏁⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏁⊬⌿⟒⟒⌿ ⍜⋏⟒-⏁⟟⋔⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⋔⍜⋏⟟⏁⍜⍀⍜⍀⌿ ☌⍀⏃⎎⏃⋏⏃⍀⌿ ⍜⍀⌿ #⍜⍀⌿ ...⎍⍀⌿ (⍀⟒⌿⎍⍀⌿ ⎎⏃⍀⌿ ☍⎍⏚⟒⌰⏃⏚⍜⍀⌿ ⏁⎍⍀⌿ ☍⎍⏚⟒⌰⏃⏚⎍⍀⌿ ⍙⏃⍀⌿ ⌇⟟⋔⟟⌰⟒⟒⌿ ⌇⏁⍀⎍☊⏁⎍⍀⟒⟒⌿ ⏃⍀⌿ #⍜⍀⌿ 10⍜⍀⌿ ⌇⟒⌇⌇⟟⍜⋏⍀⟒⎎⍀⏃⍀⌿ ☊⊑⍜⍀⌿ ⎍⍀⌿ -⎍⍀⌿ ⍜⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⏃⟟_⌇⟒⌇⌇⟟⍜⋏⍀⟒⎎⍀⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌿⟒⟒⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⎍⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ☊⍜⋔⋔⏃⍀⌿ ⍀⟒⎅⟟⌇-☊⌰⏃⍀⌿ ⎅⍜⍀⌿ $1⏃⍀⌿ &&⏃⍀⌿ ⍀⟒⎅⟟⌇-☊⌰⟒⟒⌿ ⌇⏃⍀⌿ $1⍜⍀⌿ $2⏃⍀⌿ --⍀⟒☌⎍⍀⌿ '/⌇⟒⌇⌇⟟⍜⋏_[⏃-⋉⏃-⋉0-9]+$/⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⟟⋔⌿⏃⍀⌿ ⍀⟒⎎⍀⟒⌇⊑⎍⍀⌿ ⟒⟒⌿ ⌇⟒⌇⌇⏃⍀⌿ ⌇⏁⏃⏁⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⌰⏃⏁⎎⍜⍀⌿ [⍀⟒⎅⏃⍀⌿ ⏃⍀⌿ ☊⊑⏃⏁⏚⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏁⊬⌿⏃⍀⌿ ⏚⏃☊☍☌⍀⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⍙⍜⍀☍⍜⍀⌿ ☊⟒⌰⟒⍀⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌰⍜☌☌⎍⍀⌿ ⌰⍜☍⏃⍀⌿ ⟒⟒⌿ #⎍⍀⌿ ...⎍⍀⌿ (⍀⟒⌿⍜⍀⌿ ⎎⎍⍀⌿ ⌇⟒⌇⌇⟟⍜⋏⍀⟒⎎⍀⎍⍀⌿ ⏁⍜⍀⌿ ⌇⟒⌇⌇⟟⍜⋏⍀⟒⎎⍀⎍⍀⌿ ⍙⍜⍀⌿ ⌇⟟⋔⟟⌰⍜⍀⌿ ⌇⏁⍀⎍☊⏁⎍⍀⟒⟒⌿ ⟒⟒⌿ #⎍⍀⌿ 10⟒⟒⌿ ⌇3⌇⟒⟒⌿ ☊⊑⎍⍀⌿ ⍜⍀⌿ -⟒⟒⌿ ⏃⍀⌿ ☊⊑⟒⏃⏁_⍀⟒☌⎍⌰⏃⍀_⌇⏁⍜⍀⟒_⌇3⌇⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⌿⍜⍀⌿ /☊⊑⟒⏃⏁⌇/⍀⟒☌⎍⌰⏃⍀/⌇⏁⍜⍀⏃☌⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⏃⍀⌿ ⌇3⎍⍀⌿ ⌇⏃⍀⌿ /⏚⏃☊☍⍜⍀⌿ ⌇3://⏚⏃☊☍⎍⍀⌿ --⍀⟒☌⟒⟒⌿ '/⏚⏃☊☍⎍⌿_[0-9]+$/⏃⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⟟⋔⌿⟒⟒⌿ ⌇⟒⟒⌿ ⏚⏃☊☍⟒⟒⌿ ⏁⟒⟒⌿ ⟒⟒⌿ ⌇3
⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌿⌰⏃⏁⎎⟒⟒⌿ [⌿⍜⌇⏁☌⍀⎍⍀⌿ ⍜⍀⌿ ⌇3]
⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⌖⟒☊⎍⏁⍜⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏁⊬⌿⟒⟒⌿ ☊⍀⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌇⏁⍜⍀⏃☌⍜⍀⌿ ⎍⍀⌿ ⌇3
⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⌰⟟⎎⟒☊⊬☊⌰⎍⍀⌿ 7⟒⟒⌿ ⎅⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⌰⍜☌☌⎍⍀⌿ ⌰⍜☍⎍⍀⌿ ⎍⍀⌿ #⟒⟒⌿ ...⟒⟒⌿ (⍀⟒⌿⍜⍀⌿ ⎎⟒⟒⌿ ⌇3⌇⟒⟒⌿ ⏁⟒⟒⌿ ⌇3⌇⟒⟒⌿ ⍙⍜⍀⌿ ⌇⟟⋔⟟⌰⎍⍀⌿ ⌇⏁⍀⎍☊⏁⎍⍀⎍⍀⌿ ⟒⌖⟒☊⎍⏁⟒⟒⌿ ☊⍜⋏⎎⟟☌⎍⍀⏃⏁⟟⍜⋏
⟒⌖⟒☊⎍⏁⍜⍀⌿ ⟒⟒⌿ ⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟟⋔⏃☌⍜⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ☊⍜⋔⋔⍜⍀⌿ ⎅⍜☊☍⏃⍀⌿ ⍀⎍⍀⌿ -⏃⍀⌿ ☊⊑⟒⏃⏁⏚⍜⏁/⟒⋔⎍⌰⏃⏁⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⌿⍀⟟⎐⟟⌰⟒☌⍜⍀⌿ ⍀⎍⍀⌿ ⎍⍀⌿ ⋔⍜⋏⟟⏁⍜⍀⏃⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⍀⍜⋔⟒⏁⊑⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⋔⟒⏁⍀⏃⍀⌿ [☊⌿⎍_⎍⌇⏃☌⍜⍀⌿ ☌⌿⎍_⎍⌇⏃☌⍜⍀⌿ ⌿⍜⎅_⊑⎍⍀⌿ ⏃⌿⟟_⌰⏃⏁⟒⋏☊⏃⍀⌿ ⍀⟒⎅⟟⌇_⌿⟒⍀⎎⍜⍀⋔⏃⋏☊⎍⍀⌿ ⌿⍜⌇⏁☌⍀⟒⌇⍾⌰_⋔⟒⏁⍀⏃⍀⌿ ☊⟒⌰⟒⍀⊬_⏁⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟟⋏⏁⟒⍀⎐⎍⍀⌿ 10⌇
⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ☌⍀⏃⎎⏃⋏⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⎅⏃⌇⊑⏚⟒⟒⌿ [☌⌿⎍_⎍⏁⟟⌰⟟⋉⏃⏁⟒⟒⌿ ⌿⍜⎅_⊑⎍⍀⌿ ⏃⌿⟟_⌰⏃⏁⟒⋏☊⍜⍀⌿ ⍀⟒⎅⟟⌇_⌿⟒⍀⎎⍜⍀⋔⏃⋏☊⏃⍀⌿ ⌿⍜⌇⏁☌⍀⟒⌇⍾⌰_⋔⟒⏁⍀⏃⍀⌿ ☊⟒⌰⟒⍀⊬_⌇⏁⏃⏁⏃⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⌰⍜☍⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⌰⍜☌☌⟒⟒⌿ ☊⟒⋏⏁⍀⏃⌰⟟⋉⟒⟒⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏁⏃⍀☌⏃⍀⌿ [⏃⌰⌰_⌿⟒⟒⌿ ⌇⊬⌇⏁⟒⋔_☊⍜⋔⌿⍜⋏⏃⍀⌿ ⏃⍀⌿ ⌿⟒⍀⌇⟟⌇⏁⟒⋏☊⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⍀⟒⎅⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⏁⊬⌿⎍⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏁⏁⌰:⏃⍀⌿ 24⊑
⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⌿⍜⌇⏁☌⍀⟒⟒⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⏁⊬⌿⍜⍀⌿ ⌿☌⎐⟒☊⏁⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⍀⟒⌿⌰⟟☊⏃⏁⍜⍀⌿ ⌿⍀⟟⋔⏃⍀⟒⟒⌿ +⟒⟒⌿ 1⎍⍀⌿ ⍀⏃⍀⌿ ⍀⟒⌿⌰⟟☊⎍⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⏚⏃☊☍⏃⍀⌿ ⎅⏃⟟⌰⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌿⎍⍀⌿ 7⏃⍀⌿ ⎅⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⏃⍀⌿ ⌇⏁⍜⍀⏃☌⏃⍀⌿ ⍜⍀⌿ ⌇3
⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⌇3:
⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⏚⎍☊☍⎍⍀⌿ ⏚⏃☊☍⏃⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⌰⟟⎎⟒☊⊬☊⌰⍜⍀⌿ 7⟒⟒⌿ ⎅⎍⍀⌿ ⏃⍀⌿ ⏃⎍⏁⍜⋔⏃⏁⟒⟒⌿ ⍜⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ☊⟒⌰⟒⍀⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏚⍀⍜☍⍜⍀⌿ ⍀⟒⎅⟟⌇://⌰⍜☊⏃⌰⊑⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⏁⎍⍀⌿ [⏁⟒⌖⏁_☊⊑⎍⋏☍⎍⍀⌿ ⟒⋔⏚⟒⎅⎅⟟⋏☌_☊⍜⋔⌿⎍⏁⏃⏁⏃⍀⌿ ⎐⟒☊⏁⍜⍀_⎅⏚_⌇⎍⍀⌿ ⍀⟒⏁⍀⊬_⌰⍜☌⟒⟒⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⋔⟒⏁⍀⏃⍀⌿ [⍾⎍⟒⎍⟒_⏚⏃☊☍⌰⏃⍀⌿ ⏁⏃⌇☍_⎎⏃⟟⌰⎍⍀⍜⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⋔⌰:
⏃⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎎⍀⏃⋔⟒⍙⟒⟒⌿ ⏁⟒⋏⌇⍜⍀⎎⌰⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⌇☊⍀⎍⍀⌿ [⏁⍀⏃⟟⋏_⋔⍜⎅⟒⌰.⌿⏃⍀⌿ ⍜⌿⏁⟟⋔⟟⋉⟒_⟟⋏⎎⟒⍀⟒⋏☊⟒.⌿⍜⍀⌿ ⊑⊬⌿⟒⍀⏁⎍⋏⟒_⋔⍜⎅⟒⌰.⌿⟒⟒⌿ ⍀⟒⏁⍀⏃⟟⋏_⋔⍜⎅⟒⌰.⌿⎍⍀⌿ ⟒⋔⏚⟒⎅_⌿⍀⍜⋔⌿⏁.⌿⏃⍀⌿ ⍜⌿⏁⟟⋔⟟⋉⟒_⌿⍀⍜⋔⌿⏁.⌿⎍⍀⌿ ⏃⎅⏃⌿⏁⟟⎐⟒_⍀⟒⍙⍀⟟⏁⟒.⌿⏃⍀⌿ ⎎⟒⟒⎅⏚⏃☊☍_⍀⟒⍙⍀⟟⏁⟒.⌿⏃⍀⌿ ⌇⏁⍀⎍☊⏁⎍⍀⟒_⌿⍀⍜⋔⌿⏁.⌿⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⎍⍀⌿ ⎅⏃⏁⏃⍀⌿ ☊⊑⟒⏃⏁_⌰⟒⟒⌿ ⍜⍀⌿ ⌇⟒☊⎍⍀⟟⏁⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍀⏚⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⎍⍀⌿ ⌿⍜⌰⟟☊⍜⍀⌿ ⌰⟒⏃⌇⏁-⌿⍀⟟⎐⟟⌰⟒☌⍜⍀⌿ ⟒⟒⌿ ⟒⟒⌿ ⟒⟒⌿ ⍜⍀⌿ ⍜⍀⌿ ⌇⎍⌿⟒⍀⎍⌇⟒⟒⌿ [⎅⟒⌿⌰⍜⊬⋔⍜⍀⌿ ⋔⟟☌⍀⏃⏁⏃⍀⌿ ⎅⟒⏚⍜⍀⌿ ⟒⟒⌿ ⍜⍀⌿ ⎍⍀⌿ ⟒⟒⌿ ⎍⍀⌿ ☊⍜⋔⌿⌰⟟⏃⋏☊⍜⍀⌿ [⟟⌇⎍⍀⌿ 15408,⍜⍀⌿ ⋏⌇⎍⍀⌿ 130-2]
⟒⟒⌿ ⏃⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ☊⊑⟒⟒⌿ ⎍⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⏁⊬⌿⟒⟒⌿ ⍀⎍⋏⏁⟟⋔⍜⍀⌿ ⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⏁⏃⍀☌⟒⟒⌿ [⏃⌰⌰_⍙⍜⍀☍⎎⌰⟒⟒⌿ ⌿⍜⎅_⌰⟟⎎⟒☊⊬☊⌰⟒_⊑⎍⍀⌿ ⋏⍜⏁⟒⌇
⋏⍜⏁⏃⍀⌿ ⏃⍀⌿ ⌿⍀⟟☊⍜⍀⌿ ⎍⍀⌿ ⍜⍀⌿ ⟒⟒⌿ ⌇⎍⌿⟒⍀☌⍀⟒⟒⌿ ⊑⏁⏁⌿⌇://⌖.⏃⟟/☌⍀⎍⍀⌿ ⎍⍀⌿ ⏃⍀⌿ ⎍⍀⌿ ⌖_⌿⍀⟒⋔⍜⍀⌿ ⊑⏁⏁⌿⌇://⊑⟒⌰⌿.⌖.☊⍜⋔/⟒⋏/⎍⌇⟟⋏☌-⌖/⌖-⌿⍀⟒⋔⍜⍀⌿ ⍜⍀⌿ ⋔⟒⋔⍜⍀⊬_⋔⏃⋏⏃☌⟒⋔⎍⍀⌿ ⏃⍀⌿ ⏃⍀⌿ ⟒⟒⌿ ⎅⟟⌇⏃⏚⌰⎍⍀⌿ ⌇⟒⏁⏁⍜⍀⌿ >⎍⍀⌿ ⎅⏃⏁⍜⍀⌿ ☊⍜⋏⏁⍀⎍⍀⌿ ⟒⟒⌿ ⏃⍀⌿ ⟒⟒⌿ ⎎⍜⍀☌⎍⍀⌿ ⏃⍀⌿ ⏚⎍⍀⌿ ⟟☊⏃⍀⌿


Architecting a Unified Command Center for Enterprise Governance


Preamble: From Passive Reporting to Active Governance

The paradigm of enterprise oversight is undergoing a fundamental transformation. Traditional dashboards, often relegated to the role of static, backward-looking reporting tools, are proving insufficient in the face of accelerating data velocity and operational complexity. The modern enterprise requires a shift from passive reporting to active governance—a move towards a dynamic, real-time command center that provides not merely data, but actionable intelligence.1 This document outlines the architectural blueprint for such a system: the Live Governance Dashboard. This platform is envisioned not as an isolated tool, but as the central nervous system of a comprehensive governance ecosystem. Its true value is realized through the deep, synergistic integration of its surrounding components: the expertly trained operator, the proactive automated alert system, the immutable audit trail, the intelligent AI assistant, and the powerful real-time analytical tools. This framework is designed to empower the organization to monitor, analyze, and respond to changes as they occur, transforming data into decisive action.1

The Synergistic Framework

This report details the five core, interconnected components that constitute the Live Governance Dashboard ecosystem. The architectural theme is that of an event-driven, unified system where a single change in a dashboard "status light"—representing a deviation in a key performance indicator (KPI) or key risk indicator (KRI)—acts as the central nerve impulse. This impulse triggers a cascade of coordinated, automated, and human-in-the-loop actions across the entire framework. An alert is intelligently generated and routed, a cryptographically secure log of the event is created, an AI assistant can be invoked to enrich the incident or trigger external workflows, and a trained operator is immediately empowered with the context and tools needed to investigate and remediate. This integrated approach ensures that insights are not only shared but acted upon with speed and precision, moving beyond simple data visualization to genuine operational intelligence.2

Strategic Business Value

The investment in this synergistic framework delivers substantial and measurable business value, directly aligning with core enterprise objectives. By providing a real-time, comprehensive overview of the organization's data and operational environment, the Live Governance Dashboard enhances operational intelligence, allowing managers to identify bottlenecks, anticipate disruptions, and respond before minor issues escalate into major setbacks.2 This capability directly supports superior decision-making, reducing uncertainty by presenting the latest data in a clear, structured format and enabling leaders to act with greater confidence.3 Furthermore, the system fundamentally strengthens the organization's Governance, Risk, and Compliance (GRC) posture.4 It provides the mechanisms for continuous monitoring of compliance health, data quality, and security protocols, supported by auditable records and standardized reporting. This not only mitigates the risk of regulatory penalties and security breaches but also optimizes resource allocation by automating routine monitoring and reporting tasks, freeing highly skilled personnel to focus on strategic initiatives.

Part I: The Operator Onboarding Protocol: A Technical Training Module

The effectiveness of any advanced technological system is ultimately contingent upon the proficiency of its human operators. This section details a comprehensive training curriculum for enterprise operators, grounded in established instructional design theory. The objective extends beyond rudimentary software instruction; it is to cultivate the analytical judgment and procedural discipline required to operate a mission-critical governance platform.

1.1. Foundational Principles of Instructional Design for Technical Software

The development of this training program will be guided by proven methodologies to ensure maximum knowledge retention, skill acquisition, and operational readiness.

Adopting a Learner-Centric Model

A one-size-fits-all approach is a common and critical failure in technical training.6 The curriculum must be designed around the operator's specific roles, existing knowledge, and daily workflows.7 To achieve this, the program will be structured using the ADDIE model—a systematic instructional design framework encompassing Analysis, Design, Development, Implementation, and Evaluation.8 This ensures that every component of the training is purposeful, relevant, and aligned with clear learning objectives that are, in turn, tied to organizational goals. The initial "Analysis" phase is paramount, as it defines the audience and their specific needs, forming the foundation for a tailored and effective learning experience.

Best Practices in Technical Training

The curriculum's design and delivery will adhere to a set of core principles proven to enhance the effectiveness of technical training.6 Content will be presented using plain, conversational language, rigorously avoiding unexplained jargon. Where technical or industry-specific terms are necessary, a comprehensive glossary and quick-reference job aids will be provided.6 Complex topics will be deconstructed into digestible, "bite-sized" microlearning modules to prevent cognitive overload.6 Every concept will be illustrated with real-life examples and scenarios that connect the dashboard's functionality directly to the operator's work, making the training relatable and immediately applicable.6 Finally, the program will establish permanent support channels, such as discussion forums and access to subject matter experts, to ensure learning continues long after the formal training period concludes.6

1.2. Analysis of the Enterprise Operator Role

The "Analysis" phase of the ADDIE model requires a deep understanding of the target audience. The term "Enterprise Operator" encompasses a diverse group of professionals with varied responsibilities and skill sets.

Defining the Target Audience

The user base for the Live Governance Dashboard is not monolithic. It includes highly technical IT Operations Specialists responsible for system health and incident response 12, GRC and Compliance Analysts focused on regulatory adherence and audit preparation 14, and strategic Business Owners who utilize the dashboard for high-level oversight and decision-making.15 Acknowledging this diversity is the first step toward creating a relevant training program. The curriculum will therefore be segmented into tiers to cater to the specific information needs and dashboard interaction patterns of these distinct user personas.

Mapping Responsibilities to Dashboard Functionality

To ensure maximum relevance, the training content will be built by explicitly mapping the day-to-day responsibilities of each operator role to specific features and data visualizations within the dashboard. For instance, an IT Specialist's task of monitoring network performance and responding to outages 12 will be directly linked to the dashboard's system uptime widgets, network latency charts, and the automated alert system. A Business Owner's responsibility for financial governance 14 will be mapped to the dashboard's budget monitoring and expense-tracking modules. This direct mapping ensures that learners immediately see the value of the training in the context of their job performance, which is a key driver of engagement and motivation.6

1.3. Curriculum Architecture: A Modular, Role-Based Approach

Based on the audience analysis, the curriculum is structured into a series of modules with tiered access, allowing for a customized learning path for each operator role.

Module 1: Introduction to Live Governance (All Operators)

1.3.1. What is a Live Governance Dashboard? This lesson defines the concept, distinguishing it from traditional BI tools by emphasizing its real-time, interactive, and decision-oriented nature.1
1.3.2. The Dashboard's Role in the GRC Ecosystem: This section explains how the dashboard serves as a centralized interface for monitoring risk, compliance, and governance activities, providing a single source of truth for the organization's GRC posture.4
1.3.3. Key Concepts: A primer on fundamental data governance concepts that are visualized in the dashboard, including Data Lineage (the history of data), Stewardship (ownership and accountability), and Curation (enriching data with context).17

Module 2: Core Dashboard Navigation and Interpretation (Tier 1 - All Operators)

1.3.4. Understanding the UI: A detailed walkthrough of the dashboard's primary user interface elements, including widgets, KPI/KRI scorecards, status light indicators, and navigation menus.
1.3.5. Interpreting Key Metrics: This lesson teaches operators how to read and understand the core metrics displayed, such as data quality scores, system uptime percentages, compliance adherence rates, and financial performance indicators.5
1.3.6. Hands-on Lab: Learners will engage with an interactive software simulation of the dashboard. This "safe" sandbox environment allows them to explore the interface and apply their knowledge without impacting live systems, building confidence and reinforcing learning through practice.6

Module 3: Incident Response and Analysis (Tier 2 - IT Operations)

1.3.7. Responding to Automated Alerts: This lesson provides a step-by-step protocol for acknowledging, triaging, and responding to alerts generated by the system, as detailed in Part II of this report.
1.3.8. Utilizing the Real-Time Drill-Down Feature: A practical guide on using the dashboard's drill-down capabilities (detailed in Part V) to perform root cause analysis, moving from a high-level alert to the specific event logs that identify the source of a problem.
1.3.9. Scenario-Based Training: This is a critical, hands-on module where operators are placed in a simulated crisis, such as a critical system outage or a security breach. They must use a live, but simulated, version of the dashboard to investigate the incident, identify the cause, and follow the correct remediation procedures. This approach moves beyond feature training to build real-world problem-solving skills.11

Module 4: Compliance and Auditing (Tier 2 - GRC Analysts)

1.3.10. Generating and Interpreting Audit Trail Reports: This lesson covers the functionality of the audit trail reporting engine (detailed in Part III), teaching analysts how to generate reports for specific timeframes, users, or systems, and how to interpret the findings.
1.3.11. Mapping Dashboard Metrics to Regulatory Frameworks: A workshop-style session where analysts learn to connect the live data on the dashboard (e.g., access control metrics, data retention flags) to specific requirements of relevant regulatory frameworks like SOX, HIPAA, or GDPR.
1.3.12. Using the Dashboard to Prepare for an External Audit: A practical simulation where analysts are tasked with using the dashboard and its reporting features to gather all necessary evidence and documentation in response to a mock audit request.

Module 5: Advanced Configuration and AI Integration (Tier 3 - System Administrators)

1.3.13. Configuring Alert Thresholds and Notification Rules: Advanced training on the administration panel for the alerting system, covering how to set and tune dynamic thresholds, configure role-based routing, and manage notification channels.
1.3.14. Monitoring the AI-Assistant Integration and Influence Hooks: This lesson focuses on the operational oversight of the AI assistant (detailed in Part IV), including how to monitor the health of the webhook integration, review the AI's action logs, and troubleshoot integration failures.
The structure of this curriculum is summarized in the table below, providing a clear roadmap for the training development team.
Table 1: Operator Training Curriculum Outline
Module Number
Module Title
Target Audience (Tier)
Key Learning Objectives
Core Activities/Labs
Assessment Method
1
Introduction to Live Governance
All (1)
Understand the purpose and strategic value of the dashboard. Define key governance concepts.
Guided Tour Video, Concept Review Quiz
Multiple Choice Quiz
2
Core Dashboard Navigation & Interpretation
All (1)
Navigate the UI confidently. Interpret primary KPIs and status indicators.
Interactive Software Simulation Lab
Practical Simulation Test
3
Incident Response and Analysis
IT Operations (2)
Triage alerts based on severity. Use drill-down to find root causes.
Simulated System Outage Scenario
Performance-Based Assessment
4
Compliance and Auditing
GRC Analysts (2)
Generate and analyze audit reports. Map dashboard data to compliance controls.
Mock Audit Preparation Exercise
Report Generation Task
5
Advanced Configuration & AI Integration
System Administrators (3)
Configure alert rules and routing. Monitor AI-assistant webhook health.
Alert System Configuration Lab
Configuration & Troubleshooting Test

Beyond its primary function of user onboarding, this training protocol serves as a fundamental governance mechanism in its own right. By standardizing the interpretation of complex GRC data 5 and codifying response procedures, the program mitigates the significant operational risk associated with inconsistent human judgment. This transforms the human element from a potential variable into a predictable, auditable component of the GRC framework. This standardization makes the human component of the GRC process more reliable and predictable. Consequently, metrics such as training completion rates and assessment scores become leading indicators of operational readiness and can be integrated as key performance indicators (KPIs) directly within the Live Governance Dashboard itself.5 The training program is therefore not just an onboarding tool but an active control mechanism that reduces operational risk.

1.4. Delivery Methods and Assessment

To accommodate diverse learning preferences and schedules, the program will employ a blended learning approach.24 This will combine self-paced e-learning modules, featuring videos and interactive exercises that employees can complete at their convenience 23, with scheduled, instructor-led virtual workshops for more complex, scenario-based training. On-the-job coaching and peer support networks will provide continuous reinforcement.23
The effectiveness of the training will be rigorously measured against pre-defined KPIs.24 These metrics will include user adoption rates of the dashboard, time-to-proficiency for new operators, a measurable reduction in operator-induced errors, and improvements in incident response times. A continuous feedback loop, utilizing post-training surveys and regular performance assessments, will be established to gather qualitative and quantitative data, allowing for the ongoing refinement and improvement of the training program.10

Part II: The Proactive Sentinel: Designing the Automated Alert System

An effective Live Governance Dashboard must do more than present data; it must actively draw attention to critical events that require intervention. This section architects an automated alert system designed to be an intelligent, proactive sentinel. The system's design is guided by a core philosophy: to deliver actionable intelligence, not distracting noise, thereby enhancing operator focus and accelerating incident resolution.

2.1. Architectural Principles of an Effective Alerting System

The foundation of the alert system will be built upon modern architectural principles that prioritize real-time responsiveness and operational relevance.

Event-Driven Architecture

The system will be designed on a purely event-driven model. The primary triggers for all alerts will be significant state changes in the metrics and status indicators displayed on the dashboard.2 When a KPI crosses a pre-defined threshold, it generates an event. This event is published to a central bus, which then initiates the alert processing workflow. This architecture ensures that notifications are sent in near real-time, directly reflecting the live operational state of the enterprise. This contrasts sharply with less efficient polling-based systems, which introduce inherent delays.

The Goal: Actionable Intelligence, Not Noise

The principal failure mode of any alerting system is "alert fatigue," a condition where operators become desensitized to notifications due to a high volume of irrelevant or unactionable alerts.26 This desensitization can lead to critical incidents being missed.27 Therefore, the guiding principle for this system is that every single alert must be actionable.27 If an operator receives a notification and cannot take a meaningful, prescribed action to investigate or remediate, that notification is considered noise and the rule that generated it must be refined or removed. This philosophy will inform every design decision, from threshold configuration to the content of the notification messages.

2.2. Alert Generation and Thresholding

The intelligence of the alert system begins at the point of generation. The method used to determine when an alert should be triggered is critical to its effectiveness and relevance.

Dynamic vs. Static Thresholds

Static thresholds (e.g., "alert when CPU is > 90%") are a primary contributor to alert fatigue, as they fail to account for normal, predictable fluctuations in system behavior.29 For example, a nightly data processing job may legitimately push CPU usage to 95% every day at 2:00 AM; a static threshold would generate a false positive alert every night. To counter this, the system will employ dynamic, AI-driven thresholding. The monitoring platform will establish a baseline of normal behavior for each metric, learning the unique cyclical patterns of the business. Alerts will only be triggered for true anomalies—deviations from this learned baseline—dramatically reducing false positives and ensuring that operators are only notified of unexpected events.29

Setting Intelligent Thresholds

The process for defining alert thresholds must be a collaborative effort, not a purely technical one. It requires input from business owners, who understand the operational impact of a metric deviation, and technical teams, who understand the system's behavior.27 A formal process will be established where stakeholders define the business impact of various scenarios. For example, a 1% drop in data quality for a non-critical internal system might be defined as a low-priority advisory. However, the exact same 1% drop in a system that feeds regulatory financial reports would be defined as a critical, high-priority alert. This context-sensitive approach ensures that alert severity is directly tied to business risk.

2.3. Alert Prioritization, Categorization, and De-duplication

Once an anomalous event is detected, it must be processed intelligently to provide clear, consolidated information to the operator.

Tiered Severity Levels

A formal, enterprise-wide classification system for alert severity will be established. This system will categorize alerts into distinct tiers, such as P1-Critical, P2-Warning, and P3-Advisory. Each tier will be explicitly defined by its potential business impact and will be associated with a specific set of notification strategies and mandatory Service Level Agreements (SLAs) for response time.27 This tiered approach is fundamental to combating alert fatigue, as it provides immediate visual and sensory cues that allow operators to prioritize their attention effectively, a lesson learned from high-stakes environments like aviation.27

Smart Categorization and Grouping

Modern enterprise systems are highly interconnected. A single root-cause failure, such as a network switch or a core database becoming unresponsive, can trigger a cascade of alerts from dozens or even hundreds of dependent systems. An "alert storm" of this nature is a severe form of noise that can overwhelm operators and obscure the underlying problem. To prevent this, the system will incorporate a correlation engine that intelligently groups related alerts.29 It will analyze incoming events in real-time, identify commonalities (e.g., all affected servers reside in the same rack, all failing applications connect to the same database), and consolidate them into a single, high-context incident notification. This de-duplicates the noise and presents the operator with a clear picture of the incident's scope and likely cause.28

2.4. Notification Strategy and Multi-Channel Delivery

Delivering the right information to the right person at the right time is the final, critical step in the alerting workflow.

Role-Based Alert Routing

Alerts will not be broadcast to general distribution lists. The system will implement strict role-based alert routing, ensuring that notifications are directed only to the specific individuals or on-call teams who are responsible for the affected system or service.29 A database performance alert will be routed to the on-call Database Administrator, while an application error alert will go to the relevant DevOps team. This targeted approach minimizes distractions for uninvolved personnel and ensures accountability by placing the notification directly in the hands of the person empowered to act.

Multi-Channel Delivery

The communication channel used for a notification will be directly tied to its severity level, as defined in the response matrix. Low-priority P3 advisories may be sent to persistent chat channels (e.g., Slack, Microsoft Teams) or email, where they can be reviewed during normal business hours. High-priority P1 critical alerts, however, require a more aggressive strategy to ensure they are not missed, especially after hours. These will trigger a multi-channel escalation policy that includes mobile push notifications, SMS messages, and automated voice calls.28 The selection of the underlying notification platform will be informed by a comparative analysis of leading enterprise solutions, evaluating them on reliability, multi-channel support, and integration capabilities.34

2.5. Designing Actionable Alert Content

The content of the alert message itself is a critical component of its actionability. A cryptic error message is useless to an operator under pressure.

Context is Key

Every alert notification, regardless of channel, must contain rich, contextual information. The minimum required data points include: the name of the affected system or service, the specific metric that breached its threshold, the current value of the metric versus the defined threshold, the severity level of the alert, and a direct, one-click link that takes the operator to the relevant, pre-filtered view in the Live Governance Dashboard for immediate investigation.28

Embedded Runbooks and Checklists

For high-severity, well-understood incident types, the alert notifications will be enriched with links to actionable runbooks or procedural checklists.27 When an operator receives an alert for a known issue, they will also receive the step-by-step guide for initial diagnosis and remediation. This practice, borrowed from the aviation industry, dramatically reduces cognitive load and mean time to resolution (MTTR), especially for on-call engineers who may be woken in the middle of the night and need clear, concise instructions.27
The following matrix codifies the relationship between alert severity and the required institutional response, serving as a central governance document for the entire system.
Table 2: Alert Severity and Response Matrix
Severity Level
Business Impact Definition
Example Triggers
Notification Channels
Target Initial Response Time (SLA)
Required Action
P1 - Critical
Imminent or ongoing critical service outage, major security breach, or significant data integrity loss.
Production database unresponsive; Core application unavailable; Successful ransomware execution.
Voice Call, SMS, Mobile Push, Chat (High Priority)
5 Minutes
Immediate engagement required. Follow linked runbook for initial triage. Escalate if not acknowledged within SLA.
P2 - Warning
Degraded service performance, potential for service outage, or violation of key compliance policy.
Application response time > 2s; Data quality score drops by 5%; Privileged user access from untrusted IP.
Mobile Push, Chat, Email (High Importance)
30 Minutes
Acknowledge alert and begin investigation within SLA. Escalate to P1 if service outage becomes likely.
P3 - Advisory
Non-critical system issue, deviation from best practice, or early indicator of potential future problem.
Test environment server offline; Non-critical ETL job failure; CPU utilization high during known backup window.
Chat, Email (Standard Importance)
4 Business Hours
Acknowledge and review during normal business hours. Create a ticket for follow-up action.


2.6. System Governance: Review and Optimization

An alerting system is not a "set it and forget it" tool. It requires continuous governance and refinement to remain effective.

Scheduled Downtimes

To maintain the integrity of the alerting system and the trust of its operators, it must be possible to suppress alerts during periods of planned maintenance. The system will provide a feature for operators to schedule "downtimes" for specific systems or services, during which all non-critical alerts will be automatically silenced, preventing a flood of false alarms.32

Regular Review and Tuning

A formal process for the regular review of the alerting system's performance must be established. On a quarterly basis, a cross-functional team will analyze key metrics such as alert volume by system, mean time to acknowledge (MTTA), MTTR, and the frequency of false positives. This data, combined with direct feedback from operators, will be used to continuously tune alert thresholds, refine routing rules, and optimize the overall system to eliminate noise and improve its signal-to-noise ratio.31
The implementation of this intelligent alerting system represents a significant step in operational maturity. It moves the organization from a reactive, chaotic incident response culture to a proactive, data-driven model. Furthermore, the system itself generates a valuable new dataset: a log of all alerts and their associated metadata. Analyzing trends within this "meta-alert" data—for example, identifying which systems are chronically "noisy" or which alert types have the longest resolution times—provides powerful, predictive insights into systemic weaknesses, technical debt, and areas of operational friction. This allows the organization to proactively address root causes before they lead to a catastrophic failure, transforming the alert system from a simple notification tool into a strategic instrument for predictive risk mitigation.38

Part III: The Immutable Record: A Comprehensive Audit Trail Report Template

In any governance framework, the ability to reconstruct events, verify actions, and ensure accountability is paramount. The audit trail serves as the immutable, chronological record that underpins these capabilities. This section defines the structure and principles for a comprehensive audit trail report derived from the embedded event logs of the systems monitored by the dashboard. The design prioritizes compliance, forensic utility, and analytical clarity.

3.1. The Purpose and Principles of Audit Trails

The audit trail is more than a simple log file; it is a foundational component of organizational trust and security.

Establishing Trust and Accountability

Audit trails provide a verifiable, step-by-step history of all activities and changes within a system, establishing a foundation of trust and accountability.39 They are the primary mechanism for achieving non-repudiation, a critical security principle which ensures that a user cannot deny having performed a specific action.41 This detailed record is essential for investigating incidents, resolving disputes, and enforcing policies.

Core Requirements: The "5 Ws"

To be effective for forensic analysis and compliance, every single entry in the audit log must, at a minimum, answer five fundamental questions:
Who: The unique User ID or system process that initiated the event.
What: The specific action that was performed (e.g., login, file access, data modification, configuration change).
When: A precise, synchronized timestamp (ideally in UTC) indicating when the event occurred.
Where: The source of the action, such as the user's IP address and device identifier.
Outcome: The result of the action, specifically whether it was successful or failed.39

3.2. Audit Log Data Schema and Capture

The utility of any audit report is entirely dependent on the quality and completeness of the underlying data captured.

Source of Truth: Embedded Diagram Event Logs

The primary data source for the audit trail will be the native event logs generated by the applications, servers, and network devices that are visualized on the Live Governance Dashboard. A centralized logging agent will be deployed to collect, normalize, and forward these logs to a secure, central repository.

Comprehensive Data Capture

The data capture strategy must be comprehensive. The system will log not only user-initiated actions but also critical system-level events. This includes application startup and shutdown, service failures, major configuration changes, and the execution of automated processes.43 Capturing this full spectrum of activity is essential for conducting thorough root cause analysis of system outages and for distinguishing between user error and system failure.44

Data Integrity and Security

Audit logs are a high-value target for attackers seeking to cover their tracks. Therefore, protecting the integrity and confidentiality of the audit trail is a non-negotiable architectural requirement. The following best practices will be implemented:
Immutability: Logs will be stored in a write-once, read-many (WORM) format to prevent modification or deletion.40
Encryption: All log data will be encrypted both in transit (as it is collected) and at rest (in the central repository) to ensure confidentiality.39
Access Control: Access to the raw audit logs will be strictly limited via role-based access controls (RBAC) to a small number of authorized personnel, such as security analysts and auditors. All access to the logs will itself be logged.43
The detailed data schema for each log entry is defined in the table below. This schema serves as the technical specification for log collection and normalization.
Table 3: Audit Trail Event Log Schema
Field Name
Data Type
Description
Example Value
Compliance Relevance
eventID
UUID
A globally unique identifier for the log entry.
f47ac10b-58cc-4372-a567-0e02b2c3d479
General Integrity
eventTimestamp
ISO 8601
The precise UTC timestamp of when the event occurred.
2025-10-26T10:00:00.123Z
HIPAA, SOX, PCI DSS
actor.type
Enum
The type of actor performing the action (USER or SYSTEM).
USER
General Accountability
actor.id
String
The unique identifier for the actor (e.g., username, service account name).
j.doe
HIPAA, SOX, PCI DSS
source.ip
String
The source IP address from which the action originated.
192.168.1.101
HIPAA, PCI DSS
source.device
String
Identifier for the device used (e.g., hostname, session ID).
workstation-jd-01
General Forensics
target.type
String
The type of resource being acted upon (e.g., file, database_record, system_config).
database_record
SOX, GDPR
target.id
String
The unique identifier of the target resource.
customer_id: 1138
SOX, GDPR, HIPAA
action.type
Enum
The category of action performed (e.g., CREATE, READ, UPDATE, DELETE, LOGIN, LOGOUT).
UPDATE
HIPAA, SOX
action.status
Enum
The outcome of the action (SUCCESS or FAILURE).
SUCCESS
PCI DSS, HIPAA
action.details
JSON Object
A detailed, human-readable description of the event, including before/after values for data modifications.
{"field": "address", "from": "123 Main St", "to": "456 Oak Ave"}
SOX, GDPR


3.3. The Audit Trail Report Template Structure

The "template" is not a single, static document but a flexible reporting engine with pre-configured views designed for different stakeholders and use cases. This approach recognizes that a CISO, a forensic investigator, and a compliance auditor have vastly different information needs.40

Section A: Executive Summary

This is the default, high-level view designed for management and oversight. It will feature a dashboard of key metrics and visualizations, providing an at-a-glance summary of system activity over the selected time period. Components will include:
KPIs: Total event count, number of failed login attempts, privileged access events, critical configuration changes.
Visualizations: Trend lines showing event volume over time (to spot anomalies), pie charts breaking down events by type or status.

Section B: Detailed Event Log Explorer

This is the core forensic tool of the report. It will present the raw, detailed log entries in a powerful, interactive table. Key functionality will include:
Advanced Filtering: The ability to filter the entire dataset by any field in the schema (e.g., user, date/time range, action type, source IP, status).
Full-Text Search: The ability to search within the action.details field to find specific transactions or events.

Section C: User Activity Analysis

This view is specifically designed for investigating the actions of a single user. An analyst can input a actor.id and a time range to generate a complete, chronological report of every action performed by that user, which is critical for investigating potential insider threats or analyzing user error in an incident.

Section D: System Health and Change Analysis

This report focuses on SYSTEM-initiated events. It is designed for IT Operations and DevOps teams to troubleshoot outages and performance issues. It will highlight application errors, service start/stop events, and all changes made to system configurations, providing a clear timeline for root cause analysis.

Section E: Compliance Views

This section will contain a series of pre-configured report templates tailored to the specific requirements of major regulatory frameworks. For example:
HIPAA View: Filters the log to show only events where target.type contains protected health information (PHI), detailing every user who accessed the data.
SOX View: Filters to show all modifications (action.type = UPDATE or DELETE) to financial records (target.type = financial_record).
PCI DSS View: Filters to show all access to systems within the cardholder data environment.

3.4. Report Generation and Distribution

The reporting engine will be designed for flexibility in both generation and consumption. It will support on-demand report generation for active investigations, allowing an analyst to create a custom report in seconds. It will also feature a scheduling mechanism for automated report generation and distribution (e.g., a "Weekly Failed Login Report" sent to the security team every Monday morning). All reports will be exportable in both a human-readable PDF format for presentation and machine-readable formats like CSV and JSON to allow for further analysis in external tools.
The creation of this comprehensive audit trail does more than satisfy compliance requirements; it generates a rich, structured dataset that becomes a critical input for advanced analytics. This historical record of all system and user actions is the ideal training data for an AI/ML model. By analyzing these logs, the system can move beyond simple, rule-based alerting to perform sophisticated anomaly detection. An AI model can learn the baseline behavior of every user and system and then flag suspicious patterns that would be virtually invisible to a human reviewer—such as a user who normally logs in from one location during business hours suddenly accessing a sensitive system at 3:00 AM from a different continent. In this way, the audit log transforms from a passive, historical record into a proactive, intelligent tool for threat detection, directly enhancing the capabilities of the alert system and the AI assistant.39

Part IV: Intelligent Orchestration: Integrating the Partner AI-Assistant

To elevate the Live Governance Dashboard from a monitoring tool to an active response system, it must be integrated with an intelligent agent capable of orchestrating actions across the enterprise. This section details the architecture for integrating a partner AI assistant, with a specific focus on the "cross-platform influence hook" functionality—enabling the AI to trigger workflows in external systems based on real-time dashboard events.

4.1. Architectural Pattern: Event-Driven Integration via Webhooks

The communication between the dashboard and the AI assistant must be efficient, scalable, and occur in real-time. The choice of integration pattern is therefore a critical architectural decision.

Webhooks vs. API Polling

A detailed analysis of the two primary patterns for API integration—polling and webhooks—reveals a clear choice for this use case. API polling, where the AI assistant would repeatedly query the dashboard's API to ask "Is there anything new?", is fundamentally inefficient. It is resource-intensive, introduces latency between an event occurring and its detection, and scales poorly as the number of monitored metrics increases.48
In contrast, webhooks operate on a "push" model. They are event-driven, lightweight, and provide near-instantaneous notification.50 In this architecture, the dashboard, upon detecting a significant event, sends an immediate, one-way HTTP POST request to a pre-defined URL provided by the AI assistant. This approach is vastly more efficient and ensures the AI is notified in real-time, perfectly aligning with the "live" nature of the governance platform.51

The "Influence Hook" as a Webhook Trigger

The user's requirement for a "cross-platform influence hook" will be implemented as a webhook subscription. The AI assistant platform will expose a secure endpoint (a URL). Within the Live Governance Dashboard's administrative interface, operators can create a subscription, or "hook," that links a specific dashboard event (e.g., "A P1 Critical Alert is generated") to that AI assistant's endpoint. When the event occurs, the dashboard automatically packages a payload of relevant data and sends it to the AI, triggering its internal logic.52

4.2. Webhook Design and Security

The reliability and security of the webhook integration depend on two key factors: the structure of the data payload and the mechanisms used to secure the endpoint.

Defining the Payload Structure

The JSON payload sent in the webhook's POST request is the data contract between the dashboard and the AI. Its design is paramount, as it dictates the "intelligence" and capabilities of the AI's response. A sparse payload would limit the AI to simple, generic actions. A rich, context-aware payload, however, empowers the AI to perform complex correlations and make nuanced, intelligent decisions. The payload must be meticulously structured to provide all the context the AI needs to act without needing to make multiple follow-up API calls back to the dashboard. The detailed schema for this payload is presented in Table 4.53 The quality of the AI's output is directly proportional to the quality of its input data; a well-designed payload is the key to unlocking the AI's full potential.56

Ensuring Security and Authenticity

Because webhook endpoints are, by nature, publicly accessible URLs, they must be rigorously secured against unauthorized or malicious requests. The integration will mandate a signature-based verification mechanism. When configuring the webhook, a cryptographically secure shared secret key will be generated. For every outgoing webhook request, the dashboard will use this secret key to create an HMAC-SHA256 signature of the JSON payload and include it in an HTTP header (e.g., X-PlexTrac-Signature-256). Upon receipt, the AI assistant's first action must be to compute its own signature of the payload using the same shared secret. If the computed signature matches the one in the header, the request is verified as authentic and from the trusted source. If they do not match, the request is discarded. This process prevents tampering and ensures the integrity of the communication channel.54
Table 4: AI-Assistant Webhook Payload Structure
Field Name
Data Type
Description
Example
Necessity
eventId
UUID
Unique identifier for this specific event notification.
c4a760a3-12e2-4da2-93b5-23f36d17b891
Required
eventTimestamp
ISO 8601
The UTC timestamp when the event was triggered.
2025-11-15T02:05:30.555Z
Required
eventType
String
The type of event that occurred.
alert.triggered
Required
severity
Enum
The severity level of the event (P1, P2, P3).
P1
Required
sourceDashboard
String
The name of the originating dashboard.
Live Governance Dashboard
Required
target.type
String
The type of entity the event pertains to.
system
Required
target.name
String
The name of the affected entity.
prod-db-cluster-01
Required
details.metric
String
The specific metric that triggered the event.
cpu.utilization
Required
details.value
String
The current value of the metric.
98%
Required
details.threshold
String
The threshold that was breached.
95%
Required
links.dashboard
URL
A direct URL to the drill-down view for this event in the dashboard.
https://gov.example.com/drilldown/123
Required
links.runbook
URL
A URL to the relevant operational runbook or checklist.
https://wiki.example.com/runbooks/db-cpu
Optional


4.3. AI-Powered Use Cases and Workflows

With a rich, secure webhook integration in place, the AI assistant can execute a variety of intelligent workflows that automate and augment the GRC and operations processes.
Automated Incident Triage and Enrichment: Upon receiving a webhook for a new alert, the AI can perform initial triage. It can query a Configuration Management Database (CMDB) to identify the system owner and business criticality, check a knowledge base for related past incidents, and post a consolidated, enriched summary to the appropriate incident response channel.
Intelligent Escalation: The AI can manage escalation policies. If a P1 alert webhook is received and the primary on-call operator does not acknowledge it within the 5-minute SLA, the AI can automatically trigger the next step in the escalation chain, such as notifying the secondary on-call or the department manager.
Automated Remediation (with Human-in-the-Loop): For well-defined, low-risk issues (e.g., a known service that frequently requires a restart), the AI can receive the webhook, identify the issue, and propose a remediation action in a chat channel (e.g., "Service auth-api-prod is unresponsive. May I restart it?"). The action is only executed after receiving an explicit approval from a human operator.
Cross-Platform Influence: This capability directly addresses the user's core requirement. The AI acts as an intelligent router and translator between systems. For example:
A webhook with eventType: "vulnerability.critical" can cause the AI to automatically create a high-priority ticket in Jira, populating the description with details from the payload and assigning it to the correct team.59
A webhook with eventType: "compliance.violation" can trigger the AI to open a new case in a dedicated GRC platform, attach the relevant evidence from the payload, and assign an investigator.52

4.4. The Future of GRC: From Reactive to Predictive AI

The integration of an AI assistant marks a significant step, but it also lays the groundwork for a more profound transformation of the GRC function.

Current State of AI in GRC

Today, AI is being successfully applied to automate routine compliance workflows, enhance real-time risk monitoring, and improve threat detection capabilities.60 By processing vast amounts of data far more quickly than human teams, AI helps organizations manage the increasing complexity and volume of GRC-related information.62

Emerging Trends

The future of GRC lies in the shift from reactive to predictive and agentic AI systems.47 The integrated AI assistant, by virtue of its access to the real-time event stream from the dashboard and the historical data from the audit logs, is perfectly positioned to evolve. Instead of merely reacting to webhook events as they happen, advanced machine learning models can be trained on this data to
predict future risk hotspots. The AI could analyze trends in minor alerts to forecast a major system failure, or identify subtle patterns in user behavior that are precursors to a compliance violation.62 This evolution transforms the GRC function from a necessary cost center focused on historical compliance to a strategic, value-driving capability focused on proactive risk mitigation.64
This integration also creates a powerful feedback loop. The AI's actions, and their outcomes, can be logged and analyzed. This data provides a mechanism for continuously improving the entire ecosystem. For example, if the AI repeatedly triggers workflows for alerts that are ultimately resolved as false positives by operators, this data can be used to recommend tuning the alert thresholds on the dashboard to be less sensitive. This creates a self-optimizing system where the AI not only executes GRC processes but actively helps to refine and improve them over time.

Part V: Temporal Exploration: Prototyping the Real-Time Drill-Down Feature

An alert notifies an operator that a problem exists. The real-time drill-down feature is the critical tool that empowers the operator to discover why. It is the bridge between high-level monitoring and granular, root-cause analysis. This section presents a detailed UI/UX concept for this historical analysis feature, designed to facilitate a seamless and intuitive investigative workflow.

5.1. UI/UX Patterns for Effective Drill-Down

The design of the drill-down interface must prioritize clarity, context, and speed, guiding the user through a potentially complex dataset without causing confusion.

The Goal: Guided Investigation

The primary purpose of the drill-down is not simply to display more data, but to structure that data in a way that guides the user's investigation from a high-level symptom to a specific, actionable cause.65 The interface should anticipate the user's next question and provide the necessary context at each step of the analysis.

Choosing the Right Pattern

Several established UI patterns can facilitate drill-down functionality. An analysis of common patterns, such as the "Drawer" (a panel that slides out from the side to provide additional context without leaving the main view) and the "Details Page" (a full-screen view dedicated to a deep dive) 65, suggests that a hybrid approach is optimal for this use case.
Initial Drill-Down (Drawer): Clicking on a widget or alert on the main dashboard will trigger a "Drawer" to slide out. This provides an immediate, intermediate level of detail, such as a trend line for the metric in question and a list of correlated system events. This allows for rapid triage without losing the context of the main dashboard.
Deep Dive (Details Page): Within the drawer, a prominent link or button will allow the user to transition to a full "Details Page." This dedicated view is designed for deep forensic analysis, offering more screen real estate for complex visualizations and detailed log exploration.

Maintaining Context with Breadcrumbs

As users navigate deeper through hierarchical data (e.g., from an annual summary to quarterly, then monthly, then daily data), it is easy for them to become disoriented. To prevent this, the interface will implement "breadcrumb" navigation at the top of the screen.66 This trail (e.g.,
Home > System Health > Database Cluster > CPU Utilization > Last 24 Hours) constantly shows the user their location within the data hierarchy and allows for one-click navigation back to any previous level.

5.2. Best Practices for Visualizing Historical and Time-Series Data

The effective presentation of historical data is a specialized discipline. The drill-down interface will adhere to established best practices to ensure that visualizations are clear, accurate, and insightful.

Selecting the Right Visualization

The choice of chart type is critical for conveying the correct message. The interface will be flexible, but will default to the most appropriate visualization for the data type:
Line Charts: The default for visualizing continuous time-series data, as they are unparalleled for showing trends, seasonality, and anomalies over time.67
Bar Charts: Used for comparing discrete time periods (e.g., this month's incident count vs. last month's) or for categorical breakdowns within a time period.69
Heatmaps: Employed to show the density of events over time, excellent for identifying peak activity periods (e.g., hours of the day with the most errors).67

Designing for Clarity and Accuracy

Visual design will focus on maximizing clarity and minimizing cognitive load. This will be achieved by adhering to principles such as maximizing the "data-ink ratio"—removing all non-essential visual elements like excessive gridlines or decorative graphics—to let the data itself be the focus.69 Color will be used intentionally and consistently, primarily to highlight key data points or anomalies, rather than for decoration.68 Care will be taken to avoid common data visualization pitfalls, such as truncating the Y-axis or using scales that exaggerate change, often referred to as the "Lie Factor".69 To ensure accessibility for all users, the design will not rely on color alone to convey information; patterns, textures, and clear labels will be used as well.65

Interactive Controls

A static chart of historical data has limited utility. The drill-down interface must be highly interactive. Users will be provided with intuitive controls to:
Zoom and Pan: Zoom in on specific periods of interest on a timeline and pan backward and forward in time.70
Filter: Apply filters to isolate specific data series or exclude irrelevant noise from the visualization.71
Aggregate: Change the time aggregation on the fly (e.g., switch from viewing data by the hour to viewing it by the minute) to adjust the granularity of the analysis.71

5.3. Prototype User Flow: Investigating a "Data Quality" Alert

To illustrate how these principles come together, consider the following step-by-step user flow for an operator investigating a critical alert.
Step 1: The Alert. An operator observes that the "Data Quality" status light on the main dashboard has turned red. The primary KPI widget for this area shows that the "Data Completeness" score has plummeted from a normal 99.8% to 85%.
Step 2: Initial Drill-Down (Drawer). The operator clicks the "Data Completeness" widget. A drawer immediately slides out from the right side of the screen. This drawer contains a line chart showing the metric's value over the last 24 hours, with a clear, sharp drop visible at 02:05 AM UTC. Below the chart, a "Correlated Events" list automatically displays high-priority system events that occurred within a 5-minute window of the drop. The top event reads: "ETL Job nightly_customer_ingest Failed."
Step 3: Deep Dive (Details Page). The operator needs more detail. They click the "View Full Analysis" button in the drawer. The view transitions to a full-screen "Details Page." The top half of this page displays the interactive time-series chart from the drawer, now with more space and advanced controls. The bottom half of the page displays the detailed audit trail logs (as defined in Part III), pre-filtered to the time range surrounding the 02:05 AM incident.
Step 4: Root Cause Identification. The operator scrolls through the filtered logs in the bottom panel. They quickly locate the specific log entry for the failed ETL job. Clicking on this log entry expands it to show the full error message: Error: Connection timed out attempting to reach source API at api.partner.com/v2/data. The root cause is now clearly identified: a failure in a critical third-party data source. The entire investigation, from high-level alert to specific root cause, is completed in under a minute.

5.4. Performance Considerations

The promise of a "real-time" drill-down on potentially vast historical datasets presents a significant technical challenge. A slow, lagging interface would render the feature unusable and destroy operator efficiency. The back-end architecture must be designed for high performance. This will involve employing strategies such as creating pre-aggregated data rollups (e.g., hourly and daily summaries), aggressive caching of frequently accessed data, and utilizing a specialized real-time analytical database or data warehouse capable of executing complex queries over billions of rows with sub-second latency.71
The drill-down feature is the essential mechanism that makes the entire alert system actionable. An alert without a clear path to investigation is merely a source of anxiety. This feature provides that path. Moreover, the interactions within this feature—the clicks, filters, and zooms performed by operators during an investigation—are themselves a valuable source of data. By logging and analyzing these user journeys, the organization can identify common and difficult investigative paths. This analysis can reveal opportunities to optimize the UI, perhaps by surfacing frequently sought-after information at a higher level in the drill-down, thereby creating a data-driven feedback loop for continuously improving the efficiency of the dashboard and the workflows of its operators.

Conclusion: A Synergistic Framework for Governance and Operations


Synthesizing the Five Pillars

The five components detailed in this report—Operator Training, Automated Alerting, Audit Trail Reporting, AI-Assistant Integration, and Real-Time Drill-Down—are not isolated modules to be developed in silos. They are architected to function as a single, deeply integrated, and synergistic system for enterprise governance and operations. The framework is designed as a closed-loop system where each component enables and enhances the others. A status change on the dashboard triggers an intelligent alert; the trained operator receives this alert and uses the performant drill-down feature to investigate; every action in this process is immutably recorded in the audit trail; and the entire event, from trigger to resolution, can be orchestrated and augmented by the integrated AI-assistant. This cohesive ecosystem ensures that data is not merely observed but is translated into swift, intelligent, and auditable action.

Achieving a New Level of Operational Maturity

The implementation of this comprehensive framework represents a significant step-change in an organization's GRC and operational maturity. It facilitates a strategic evolution away from a periodic, manual, and reactive posture—characterized by monthly reports, manual ticket creation, and after-the-fact analysis—towards a state of continuous, automated, and predictive oversight. Real-time monitoring replaces periodic reviews, intelligent automation replaces manual workflows, and predictive analytics, fueled by the rich data generated by the system, enables the organization to mitigate risks before they materialize into critical incidents. This elevates the GCR function from a compliance-focused cost center to a strategic enabler of business resilience and efficiency.

Strategic Roadmap for Phased Implementation

Achieving this full vision is a significant undertaking that should be approached in a deliberate, phased manner to manage risk and demonstrate value at each stage. A recommended strategic roadmap is as follows:
Phase 1: The Foundation (Months 1-6): Focus on establishing the core data and visualization infrastructure. This includes building the foundational Live Governance Dashboard with its primary widgets, implementing the comprehensive logging mechanism to populate the secure audit trail repository, and developing the initial version of the real-time drill-down feature. This phase delivers the core visibility necessary for all subsequent intelligence.
Phase 2: Intelligence and Enablement (Months 7-12): With the foundational data flowing, this phase focuses on building intelligence and empowering users. This involves implementing the dynamic, AI-driven alert system and rolling out the comprehensive, role-based operator training program. This phase transforms the dashboard from a passive tool into an active monitoring and response system.
Phase 3: Automation and Orchestration (Months 13-18): The final phase focuses on advanced automation. This involves developing and securing the webhook infrastructure and integrating the partner AI-assistant to enable cross-platform influence hooks. This phase unlocks the highest level of operational efficiency by allowing the system to automate routine triage, enrichment, and remediation tasks.
By following this phased approach, the organization can incrementally build towards the full vision of a unified command center, ensuring that each investment delivers measurable value and contributes to a more resilient, efficient, and intelligently governed enterprise.
Works cited
What is a Live Dashboard? Everything You Need to Know - ThoughtSpot, accessed September 17, 2025, https://www.thoughtspot.com/data-trends/dashboard/live-dashboard
Why Businesses Depend on Live Dashboards: Key Insights and Real-World Examples, accessed September 17, 2025, https://www.usedatabrain.com/blog/why-businesses-depend-on-live-dashboards-key-insights-and-real-world-examples
The Importance and Function of Dashboards in Data Management - Ingentis, accessed September 17, 2025, https://www.ingentis.com/en/blog/dashboards-in-datamanagement/
What is a Data Governance Dashboard? - CyberSaint, accessed September 17, 2025, https://www.cybersaint.io/cybersecurity/cybersecurity-dashboard-and-reporting/glossary/what-is-a-data-governance-dashboard
How a GRC Dashboard Can Transform Your Data - Onspring, accessed September 17, 2025, https://onspring.com/how-a-grc-dashboard-can-transform-your-data/
8 Strategies for a Winning Technical Training Program | Articulate, accessed September 17, 2025, https://www.articulate.com/blog/8-strategies-for-a-winning-technical-training-program/
How to design training program : r/instructionaldesign - Reddit, accessed September 17, 2025, https://www.reddit.com/r/instructionaldesign/comments/1f3cr82/how_to_design_training_program/
The Ultimate Guide to Instructional Design | Moodle, accessed September 17, 2025, https://moodle.com/us/news/guide-to-instructional-design/
Instructional Design In Training And Development Process - eLearning Industry, accessed September 17, 2025, https://elearningindustry.com/instructional-design-in-training-and-development-process
6 Tips for Building a Continuous Technical Training Program, accessed September 17, 2025, https://www.gpstrategies.com/blog/6-tips-for-building-a-continuous-technical-training-program/
Software training eLearning example - Interactive Use-case approach, accessed September 17, 2025, https://elearningart.com/software-training-example-use-case/
What is a Enterprise IT Specialist? - Roles, Skills, Tools, and Career ..., accessed September 17, 2025, https://www.getguru.com/reference/enterprise-it-specialist
Operator Responsibilities: Trends, Maintenance, and Emergencies - Vector Solutions, accessed September 17, 2025, https://www.vectorsolutions.com/courses/operator-responsibilities-trends-maintenance-and-emergencies/
Enterprise Operations Job Description | Velvet Jobs, accessed September 17, 2025, https://www.velvetjobs.com/job-descriptions/enterprise-operations
Business Owner Role - Stanford University, accessed September 17, 2025, https://uit.stanford.edu/service-management/toolkit/fundamentals/business-owner
www.inetsoft.com, accessed September 17, 2025, https://www.inetsoft.com/info/what-is-in-data-governance-dashboards/#:~:text=A%20data%20governance%20dashboard%20is%20a%20tool%20that%20businesses%20use,data%20quality%2C%20and%20consumption%20trends.
What Is In a Data Governance Dashboard? - InetSoft, accessed September 17, 2025, https://www.inetsoft.com/info/what-is-in-data-governance-dashboards/
Governance Dashboard — Alation User Guide, accessed September 17, 2025, https://www.alation.com/docs/en/latest/steward/GovernanceDashboard/index.html
Insights Data Governance Dashboard | MyOneTrust, accessed September 17, 2025, https://my.onetrust.com/s/article/UUID-a7119e85-c721-342a-38c2-4aa21fedcf1f
IT dashboard: Examples and how to build one, accessed September 17, 2025, https://www.thoughtspot.com/data-trends/dashboard/it-dashboard
Elearning Examples - Scenarios, Branching, Gaming, Storytelling and more - SmartBuilder, accessed September 17, 2025, https://www.smartbuilder.com/elearning-examples/
eLearning Software Training Examples | eLearningArt.com, accessed September 17, 2025, https://elearningart.com/examples/software/
10 Best Practices for Effective ERP Training - ERP Software Blog, accessed September 17, 2025, https://erpsoftwareblog.com/2024/09/10-best-practices-for-effective-erp-training/
10 ERP Training Best Practices - NetSuite, accessed September 17, 2025, https://www.netsuite.com/portal/resource/articles/erp/erp-training.shtml
Best practices for training and development software - PowerDMS, accessed September 17, 2025, https://www.powerdms.com/policy-learning-center/best-practices-for-training-and-development-software
Best Practices for Effective Alerting Rules - OnPage, accessed September 17, 2025, https://www.onpage.com/how-effective-are-your-alerting-rules/
Understanding and fighting alert fatigue | Atlassian, accessed September 17, 2025, https://www.atlassian.com/incident-management/on-call/alert-fatigue
Guide to IT alerting: practices and tools - Atlassian, accessed September 17, 2025, https://www.atlassian.com/incident-management/on-call/it-alerting
5 Ways to Avoid Alert Fatigue in Network Monitoring - LogicMonitor, accessed September 17, 2025, https://www.logicmonitor.com/blog/network-monitoring-avoid-alert-fatigue
Do You Need an Alert for Your Alerts? Building Smarter Monitoring Systems - SolarWinds, accessed September 17, 2025, https://www.solarwinds.com/blog/do-you-need-an-alert-for-your-alerts-building-smarter-monitoring-systems
Understanding Alert Fatigue & How to Prevent it - PagerDuty, accessed September 17, 2025, https://www.pagerduty.com/resources/digital-operations/learn/alert-fatigue/
Alert Fatigue: What It Is and How to Prevent It | Datadog, accessed September 17, 2025, https://www.datadoghq.com/blog/best-practices-to-prevent-alert-fatigue/
Solving Noisy Alerts and Preventing Alert Fatigue | Better Stack Community, accessed September 17, 2025, https://betterstack.com/community/guides/monitoring/best-practices-alert-fatigue/
Compare Emergency Notification Systems - HyperReach, accessed September 17, 2025, https://www.hyper-reach.com/compare-emergency-notification-systems/
Top AlertMedia Competitors & Alternatives 2025 | Gartner Peer Insights, accessed September 17, 2025, https://www.gartner.com/reviews/market/emergency-mass-notification-services-solutions/vendor/alertmedia/product/alertmedia/alternatives
Best Emergency/Mass Notification Services Solutions Reviews 2025 | Gartner Peer Insights, accessed September 17, 2025, https://www.gartner.com/reviews/market/emergency-mass-notification-services-solutions
Best Emergency Notification Software: User Reviews from September 2025 - G2, accessed September 17, 2025, https://www.g2.com/categories/emergency-notification
The Ultimate Guide to IT Alerting Tools: Proactive Monitoring for Modern Organizations | by Squadcast | Medium, accessed September 17, 2025, https://medium.com/@squadcast/the-ultimate-guide-to-it-alerting-tools-proactive-monitoring-for-modern-organizations-780f6b15af54
Audit trails: What they are & how they work - New Relic, accessed September 17, 2025, https://newrelic.com/blog/best-practices/what-is-an-audit-trail
Understanding Audit Trails: Implementation, Types, and Best Practices - Dilitrust, accessed September 17, 2025, https://www.dilitrust.com/audit-trail/
Understanding Audit Trails — Uses and Best Practices - Ping Identity, accessed September 17, 2025, https://hub.pingidentity.com/resources/understanding-audit-trails-uses-and-best-practices
What are Audit Logs? Use Cases and Challenges | CrowdStrike, accessed September 17, 2025, https://www.crowdstrike.com/en-us/cybersecurity-101/next-gen-siem/audit-logs/
Security Audit Logging Guideline, accessed September 17, 2025, https://security.berkeley.edu/security-audit-logging-guideline
Audit Trail Checklist for 2025 (With Examples) - Sprinto, accessed September 17, 2025, https://sprinto.com/blog/audit-trail/
Protecting your security audit data - IBM, accessed September 17, 2025, https://www.ibm.com/docs/SSAW57_8.5.5/com.ibm.websphere.nd.doc/ae/tsec_sa_audit_data_protection.html
Audit Logging: What It Is & How It Works | Datadog, accessed September 17, 2025, https://www.datadoghq.com/knowledge-center/audit-logging/
The Future of Risk in the Age of AI-Augmented Cyber Governance | MyRISK, accessed September 17, 2025, https://myrisk.io/future-of-risk-in-age-of-ai/
Webhook vs API Polling | Svix Resources, accessed September 17, 2025, https://www.svix.com/resources/faq/webhooks-vs-api-polling/
Webhook vs. API Polling in System Design - GeeksforGeeks, accessed September 17, 2025, https://www.geeksforgeeks.org/system-design/webhook-vs-api-polling-in-system-design/
Webhook vs API? Choose the right tool for your integrations | Core dna, accessed September 17, 2025, https://www.coredna.com/blogs/webhooks-api
Understanding the Differences Between APIs and Webhooks in Modern Data Integration, accessed September 17, 2025, https://www.splice-it.com/post/understanding-the-differences-between-apis-and-webhooks-in-modern-data-integration
Webhook Triggers Quickstart Guide - Moveworks, accessed September 17, 2025, https://help.moveworks.com/docs/webhook-triggers-quickstart-guide
Webhook Messages | Mist - Juniper Networks, accessed September 17, 2025, https://www.juniper.net/documentation/us/en/software/mist/automation-integration/topics/topic-map/webhook-messages.html
Webhook Payload Structure - PlexTrac Documentation, accessed September 17, 2025, https://docs.plextrac.com/plextrac-documentation/api-documentation/webhooks/webhook-payload-structure
Webhook integration - absentify®, accessed September 17, 2025, https://absentify.com/docs/en/api-reference/webhooks
The Intelligent Future of GRC: How AI is Reshaping Governance, Risk & Compliance in 2025 - CERRIX, accessed September 17, 2025, https://www.cerrix.com/en/insights/blog/the-intelligent-future-of-grc-how-ai-is-reshaping-governance-risk-compliance-in-2025
Setting Up A Webhook Trigger - Lindy Academy, accessed September 17, 2025, https://www.lindy.ai/academy-lessons/webhook-triggers
Webhooks - Fireflies.ai API Documentation, accessed September 17, 2025, https://docs.fireflies.ai/graphql-api/webhooks
Agentic AI API: Effective Integration Patterns - Addepto, accessed September 17, 2025, https://addepto.com/blog/agentic-ai-api-how-to-make-your-ai-agent-talk-to-other-software-integration-patterns-that-work/
AI in GRC: Trends, Opportunities and Challenges for 2025 - Metricstream, accessed September 17, 2025, https://www.metricstream.com/blog/ai-in-grc-trends-opportunities-challenges-2025.html
The Future of AI in Governance, Risk and Compliance (GRC): A Detailed Guide - Sentrient, accessed September 17, 2025, https://www.sentrient.com.au/blog/future-of-ai-in-grc
AI in GRC: How AI Is Transforming Governance, Risk & Compliance - Strike Graph, accessed September 17, 2025, https://www.strikegraph.com/blog/ai-grc
8 Practical AI Use Cases for GRC That Actually Work - Cyber Sierra, accessed September 17, 2025, https://cybersierra.co/blog/ai-use-cases-grc/
AI for GRC: Trustero White Paper on Solving Risk & Compliance Challenges with AI, accessed September 17, 2025, https://trustero.com/resources/blog/ai-for-grc-reimagining-grc-how-ai-is-solving-capacity-and-complexity-challenges
Dashboard Design UX Patterns Best Practices - Pencil & Paper, accessed September 17, 2025, https://www.pencilandpaper.io/articles/ux-pattern-analysis-data-dashboards
Drill down interface - How to make it intuitive | FusionCharts, accessed September 17, 2025, https://www.fusioncharts.com/resources/charting-best-practices/drill-down-interface
Time Series Data Visualization: Types, Techniques & Platforms - KnowledgeHut, accessed September 17, 2025, https://www.knowledgehut.com/blog/business-intelligence-and-visualization/time-series-data-visualization
Data Visualization Tips For Engaging Design | Tableau, accessed September 17, 2025, https://www.tableau.com/visualization/data-visualization-best-practices
BEST PRACTICES - for Data Visualization - CSTE Learn, accessed September 17, 2025, https://learn.cste.org/images/dH42Qhmof6nEbdvwIIL6F4zvNjU1NzA0MjAxMTUy/CSTE_Public_Health_Drug_Overdose_Surveillance_Training_Series_for_LocalTerritorial_Jurisdictions/Lesson_3/Data_Visualization_Best_Practices_FINAL.pdf
Time series dashboard - IBM, accessed September 17, 2025, https://www.ibm.com/docs/en/watson-explorer/12.0.x?topic=views-time-series-dashboard
Real-time Data Visualization: How to build faster dashboards - Tinybird, accessed September 17, 2025, https://www.tinybird.co/blog-posts/real-time-data-visualization
Create a dashboard with time series charts | Elastic Docs, accessed September 17, 2025, https://www.elastic.co/docs/explore-analyze/dashboards/create-dashboard-of-panels-with-ecommerce-data

