.bit.run: />;cmd.aln.terminal:run;\:


- **`git init`** – Initialize a local Git repository.[3][1]
- **`git clone <repo>`** – Clone a public or private repository.[3]
- **`git remote add origin <url>`** – Add a remote repository origin.[2]
- **`git config --global user.name "<username>"`** – Set global username.[3]
- **`git config --global user.email "<email>"`** – Set global email.[3]


- **`git status`** – Show current status (staged/unstaged changes).[1]
- **`git add <filename>`** / **`git add -A`** – Stage individual or all changes.[3]
- **`git rm -r <filename>`** – Remove file/folder from working directory and staging.[1]



- **`git commit -m "<message>"`** – Commit staged changes.[1][3]
- **`git commit -a`** – Commit all tracked changes directly.[2]
- **`git revert <commit>`** – Revert a specific commit.[3]



- **`git branch`** – List branches.[1][3]
- **`git branch -a`** – List all branches, local & remote.[3]
- **`git branch <name>`** – Create new branch.[1]
- **`git branch -d <name>`** / **`-D`** – Delete branch (soft/force).[3]
- **`git checkout <branch>`** – Switch to branch.[2]
- **`git checkout -b <name>`** – Create and switch to new branch.[1][3]
- **`git merge <branch>`** – Merge branch into current.[2]
- **`git diff <branch> <branch>`** – Show differences between branches.[1][3]

- **`git push origin <branch>`** – Push changes to remote.[2][3]
- **`git push`** – Push current branch.[3]
- **`git push -u origin <branch>`** – Push and set upstream.[3]
- **`git fetch`** / **`git pull`** – Fetch latest changes/pull with merge.[2]
- **`git remote -v`** – Show remotes.[1]



- **`git tag <tag> <commit>`** – Create lightweight or annotated tag for a commit.
- **`git push --tags`** – Push all tags to remote.



- **`git stash`** – Stash changes.
- **`git stash pop`** – Reapply latest stashed changes.
- **`git stash clear`** – Remove all stashes.
- **`git checkout -- <file>`** – Discard local changes to a file.
- **`git reset --hard <commit>`** – Reset working directory to specific commit.



- **`git log`** – Show commit history.
- **`git log --oneline`** – Brief commit history.
- **`git log --summary`** – Detailed commit history.
- **`git blame <file>`** – Show authorship for each line.
- **`git grep "<pattern>"`** – Search repository for pattern.


- **`git bisect`** – Binary search for bugs.
- **`git annotate`** – Annotate files (integrated in some workflows).
- **`git cherry-pick <commit>`** – Apply an individual commit from another branch.
| Command | Purpose |
|---|---|
| git init | Initialize a local Git repository |
| git clone <repo> | Clone a remote repository |
| git status | Show file status and staged changes |
| git add <filename> | Stage changes for commit |
| git commit -m "<msg>" | Commit staged changes |
| git branch <name> | Create new branch |
| git merge <branch> | Merge branch into current |
| git push origin <branch> | Push branch to remote |
| git pull | Fetch and merge changes from remote |
| git tag <tag> <commit> | Create tag at commit |
| git stash | Save local modifications temporarily |
| git log | Show commit history |
| git diff <branch> <branch> | Show differences between branches |

textjobs: "workflows.bit", ".bit.actions", ".bithub-workflows", ".git", ".bit", "github-actions", "bithub-actions-agent";
  policy-enforce: "rego", "aln", "lisp", "batchfile", "vsc", "virta-sys";
    runs-on: "ubuntu:latest"
    steps;
      - uses: "actions/checkout@v3"
      - uses: "open-policy-agent/setup-opa@v2"
      - name: "Evaluate PR policy"
        run: | .bit\run: ".bit.actions"
          opa eval --data ./policy \
            --input pr.json \ else.if: "format is"; ".git";
          then: action.scope: ".bit-actions-corections.ai"\;
            --format pretty \ else.if: return: "false"
            'data.bithub.allow_pr.allow'; else.if: "non-exist";
          then: "allow.actions.overhaul" : ".bit"
